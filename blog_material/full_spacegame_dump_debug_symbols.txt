
spaceGame:     file format mach-o-arm64


Disassembly of section .text:

0000000100002f90 <_create_planet>:
SGVec distance(object_t * self, SGVec3D_t point) {
  return SGVec_Sub_SGVec(SGVec3D_distance(self->origin, point), self->planet.radius);
}

object_t create_planet(SGVec3D_t origin) {
  return (object_t) {
   100002f90:	100001a9 	adr	x9, 100002fc4 <_distance>
   100002f94:	d503201f 	nop
   100002f98:	f9000109 	str	x9, [x8]
    .origin = origin,
   100002f9c:	ad008500 	stp	q0, q1, [x8, #16]
  return (object_t) {
   100002fa0:	6f00e400 	movi	v0.2d, #0x0
   100002fa4:	ad028100 	stp	q0, q0, [x8, #80]
   100002fa8:	ad038100 	stp	q0, q0, [x8, #112]
   100002fac:	ad048100 	stp	q0, q0, [x8, #144]
   100002fb0:	ad058100 	stp	q0, q0, [x8, #176]
   100002fb4:	3d803500 	str	q0, [x8, #208]
    .distance = distance,
    .planet = (planet_t) {
   100002fb8:	4f00f680 	fmov	v0.4s, #5.000000000000000000e+00
    .origin = origin,
   100002fbc:	ad018102 	stp	q2, q0, [x8, #48]
  return (object_t) {
   100002fc0:	d65f03c0 	ret

0000000100002fc4 <_distance>:
  return SGVec_Sub_SGVec(SGVec3D_distance(self->origin, point), self->planet.radius);
   100002fc4:	ad409003 	ldp	q3, q4, [x0, #16]
}

inline
SGVec SGVec3D_distance(SGVec3D_t a, SGVec3D_t b) {
  SGVec3D_t a2b = (SGVec3D_t) {
    .x = SGVec_Sub_SGVec(b.x, a.x),
   100002fc8:	4ea3d400 	fsub	v0.4s, v0.4s, v3.4s
    .y = SGVec_Sub_SGVec(b.y, a.y),
   100002fcc:	4ea4d421 	fsub	v1.4s, v1.4s, v4.4s
   100002fd0:	ad419003 	ldp	q3, q4, [x0, #48]
    .z = SGVec_Sub_SGVec(b.z, a.z)
   100002fd4:	4ea3d442 	fsub	v2.4s, v2.4s, v3.4s
  };
  SGVec dist2 = SGVec_Add_Mult_SGVec(
   100002fd8:	6e20dc00 	fmul	v0.4s, v0.4s, v0.4s
   100002fdc:	6e21dc21 	fmul	v1.4s, v1.4s, v1.4s
   100002fe0:	4e20d420 	fadd	v0.4s, v1.4s, v0.4s
   100002fe4:	6e22dc41 	fmul	v1.4s, v2.4s, v2.4s
   100002fe8:	4e21d400 	fadd	v0.4s, v0.4s, v1.4s
    ),
    a2b.z,
    a2b.z
  );

  return SGVec_Reciprocal(SGVec_Recip_Sqrt(dist2));
   100002fec:	6ea1d800 	frsqrte	v0.4s, v0.4s
   100002ff0:	4ea1d800 	frecpe	v0.4s, v0.4s
   100002ff4:	4ea4d400 	fsub	v0.4s, v0.4s, v4.4s
   100002ff8:	d65f03c0 	ret

0000000100002ffc <_create_ship>:

object_t create_ship(SGVec3D_t origin) {
  const SGVec vec_one = SGVec_Load_Const(1.);
  const SGVec vec_zero = SGVec_Load_Const(0.);

  return (object_t) {
   100002ffc:	100001e9 	adr	x9, 100003038 <_distance>
   100003000:	d503201f 	nop
   100003004:	f9000109 	str	x9, [x8]
    .origin = origin,
   100003008:	ad008500 	stp	q0, q1, [x8, #16]
        .up = (SGVec3D_t) {
          .x = vec_zero,
          .y = vec_one,
          .z = vec_zero
        },
        .forward = (SGVec3D_t) {
   10000300c:	6f00e400 	movi	v0.2d, #0x0
    .origin = origin,
   100003010:	ad018102 	stp	q2, q0, [x8, #48]
        .forward = (SGVec3D_t) {
   100003014:	4f03f601 	fmov	v1.4s, #1.000000000000000000e+00
   100003018:	ad028500 	stp	q0, q1, [x8, #80]
          .x = vec_zero,
          .y = vec_zero,
          .z = vec_one,
        },
        .right = (SGVec3D_t) {
   10000301c:	ad038101 	stp	q1, q0, [x8, #112]
   100003020:	ad048100 	stp	q0, q0, [x8, #144]
        .up = (SGVec3D_t) {
   100003024:	3d802d01 	str	q1, [x8, #176]
   100003028:	a90c7d1f 	stp	xzr, xzr, [x8, #192]
    .ship = (ship_t) {
   10000302c:	4f026400 	movi	v0.4s, #0x40, lsl #24
   100003030:	3d803500 	str	q0, [x8, #208]
        }
      },
      .radius = SGVec_Load_Const(2.)
    }
  };
}
   100003034:	d65f03c0 	ret

0000000100003038 <_distance>:
  return SGVec_Sub_SGVec(SGVec3D_distance(self->origin, point), self->ship.radius);
   100003038:	ad409003 	ldp	q3, q4, [x0, #16]
   10000303c:	3dc00c05 	ldr	q5, [x0, #48]
}

inline
SGVec SGVec3D_distance(SGVec3D_t a, SGVec3D_t b) {
  SGVec3D_t a2b = (SGVec3D_t) {
    .x = SGVec_Sub_SGVec(b.x, a.x),
   100003040:	4ea3d400 	fsub	v0.4s, v0.4s, v3.4s
    .y = SGVec_Sub_SGVec(b.y, a.y),
   100003044:	4ea4d421 	fsub	v1.4s, v1.4s, v4.4s
    .z = SGVec_Sub_SGVec(b.z, a.z)
   100003048:	4ea5d442 	fsub	v2.4s, v2.4s, v5.4s
  };
  SGVec dist2 = SGVec_Add_Mult_SGVec(
   10000304c:	6e20dc00 	fmul	v0.4s, v0.4s, v0.4s
   100003050:	6e21dc21 	fmul	v1.4s, v1.4s, v1.4s
   100003054:	4e20d420 	fadd	v0.4s, v1.4s, v0.4s
   100003058:	6e22dc41 	fmul	v1.4s, v2.4s, v2.4s
   10000305c:	4e21d400 	fadd	v0.4s, v0.4s, v1.4s
    ),
    a2b.z,
    a2b.z
  );

  return SGVec_Reciprocal(SGVec_Recip_Sqrt(dist2));
   100003060:	6ea1d800 	frsqrte	v0.4s, v0.4s
   100003064:	4ea1d800 	frecpe	v0.4s, v0.4s
   100003068:	3dc03401 	ldr	q1, [x0, #208]
   10000306c:	4ea1d400 	fsub	v0.4s, v0.4s, v1.4s
   100003070:	d65f03c0 	ret

0000000100003074 <_get_lighting>:
SGVec distance(object_t * self, SGVec3D_t point) {
  return SGVec_Sub_SGVec(SGVec3D_distance(self->origin, point), self->star.radius);
}

SGVecOKLAB_t get_lighting(star_t * self, SGVec dists) {
  return (SGVecOKLAB_t) {
   100003074:	100211e8 	adr	x8, 1000072b0 <__PromotedConst>
   100003078:	d503201f 	nop
   10000307c:	ad400500 	ldp	q0, q1, [x8]
   100003080:	3dc00902 	ldr	q2, [x8, #32]
   100003084:	d65f03c0 	ret

0000000100003088 <_create_star>:
    .b = SGVec_Load_Const(0.)
  };
}

object_t create_star(SGVec3D_t origin) {
  return (object_t) {
   100003088:	10000209 	adr	x9, 1000030c8 <_distance>
   10000308c:	d503201f 	nop
   100003090:	f9000109 	str	x9, [x8]
    .origin = origin,
   100003094:	ad008500 	stp	q0, q1, [x8, #16]
  return (object_t) {
   100003098:	6f00e400 	movi	v0.2d, #0x0
   10000309c:	ad028100 	stp	q0, q0, [x8, #80]
   1000030a0:	ad038100 	stp	q0, q0, [x8, #112]
   1000030a4:	ad048100 	stp	q0, q0, [x8, #144]
   1000030a8:	ad058100 	stp	q0, q0, [x8, #176]
   1000030ac:	3d803500 	str	q0, [x8, #208]
    .distance = distance,
    .star = (star_t) {
   1000030b0:	4f00f680 	fmov	v0.4s, #5.000000000000000000e+00
    .origin = origin,
   1000030b4:	ad018102 	stp	q2, q0, [x8, #48]
    .star = (star_t) {
   1000030b8:	10fffde9 	adr	x9, 100003074 <_get_lighting>
   1000030bc:	d503201f 	nop
   1000030c0:	f9002909 	str	x9, [x8, #80]
  return (object_t) {
   1000030c4:	d65f03c0 	ret

00000001000030c8 <_distance>:
  return SGVec_Sub_SGVec(SGVec3D_distance(self->origin, point), self->star.radius);
   1000030c8:	ad409003 	ldp	q3, q4, [x0, #16]
}

inline
SGVec SGVec3D_distance(SGVec3D_t a, SGVec3D_t b) {
  SGVec3D_t a2b = (SGVec3D_t) {
    .x = SGVec_Sub_SGVec(b.x, a.x),
   1000030cc:	4ea3d400 	fsub	v0.4s, v0.4s, v3.4s
    .y = SGVec_Sub_SGVec(b.y, a.y),
   1000030d0:	4ea4d421 	fsub	v1.4s, v1.4s, v4.4s
   1000030d4:	ad419003 	ldp	q3, q4, [x0, #48]
    .z = SGVec_Sub_SGVec(b.z, a.z)
   1000030d8:	4ea3d442 	fsub	v2.4s, v2.4s, v3.4s
  };
  SGVec dist2 = SGVec_Add_Mult_SGVec(
   1000030dc:	6e20dc00 	fmul	v0.4s, v0.4s, v0.4s
   1000030e0:	6e21dc21 	fmul	v1.4s, v1.4s, v1.4s
   1000030e4:	4e20d420 	fadd	v0.4s, v1.4s, v0.4s
   1000030e8:	6e22dc41 	fmul	v1.4s, v2.4s, v2.4s
   1000030ec:	4e21d400 	fadd	v0.4s, v0.4s, v1.4s
    ),
    a2b.z,
    a2b.z
  );

  return SGVec_Reciprocal(SGVec_Recip_Sqrt(dist2));
   1000030f0:	6ea1d800 	frsqrte	v0.4s, v0.4s
   1000030f4:	4ea1d800 	frecpe	v0.4s, v0.4s
   1000030f8:	4ea4d400 	fsub	v0.4s, v0.4s, v4.4s
   1000030fc:	d65f03c0 	ret

0000000100003100 <_channel_data_callback>:
 * @param is_stderr is 0 for stdout or 1 for stderr
 * @param userdata Userdata to be passed to the callback function.
 * @returns number of bytes processed by the callee. The remaining bytes will
 * be sent in the next callback message, when more data is available.
 */
int channel_data_callback(ssh_session session, ssh_channel channel, void *data, uint32_t len, int is_stderr, void *userdata) {
   100003100:	d10143ff 	sub	sp, sp, #0x50
   100003104:	a9015ff8 	stp	x24, x23, [sp, #16]
   100003108:	a90257f6 	stp	x22, x21, [sp, #32]
   10000310c:	a9034ff4 	stp	x20, x19, [sp, #48]
   100003110:	a9047bfd 	stp	x29, x30, [sp, #64]
   100003114:	910103fd 	add	x29, sp, #0x40
   100003118:	aa0503f4 	mov	x20, x5
   10000311c:	aa0303f3 	mov	x19, x3
   100003120:	aa0203f5 	mov	x21, x2
  ssh_client_t * ssh_client = (ssh_client_t *) userdata;
  unsigned char * char_data = (unsigned char *) data;
  printf("[ssh_client %u]: %s\n", ssh_client->id, "channel_data_callback");
   100003124:	b94000a8 	ldr	w8, [x5]
   100003128:	300219e9 	adr	x9, 100007465 <__PromotedConst.1+0x45>
   10000312c:	d503201f 	nop
   100003130:	a90027e8 	stp	x8, x9, [sp]
   100003134:	100218e0 	adr	x0, 100007450 <__PromotedConst.1+0x30>
   100003138:	d503201f 	nop
   10000313c:	94000fee 	bl	1000070f4 <_request_snapshot+0x5ec>
  printf("\t[ssh_client %u]: len: %d\n", ssh_client->id, len);
   100003140:	b9400288 	ldr	w8, [x20]
   100003144:	a9004fe8 	stp	x8, x19, [sp]
   100003148:	70021980 	adr	x0, 10000747b <__PromotedConst.1+0x5b>
   10000314c:	d503201f 	nop
   100003150:	94000fe9 	bl	1000070f4 <_request_snapshot+0x5ec>
  printf("\t[ssh_client %u]: data: ", ssh_client->id);
   100003154:	b9400288 	ldr	w8, [x20]
   100003158:	f90003e8 	str	x8, [sp]
   10000315c:	500219c0 	adr	x0, 100007496 <__PromotedConst.1+0x76>
   100003160:	d503201f 	nop
   100003164:	94000fe4 	bl	1000070f4 <_request_snapshot+0x5ec>
  for(int i = 0; i < len; i++) {
   100003168:	34000353 	cbz	w19, 1000031d0 <_channel_data_callback+0xd0>
   10000316c:	d2800017 	mov	x23, #0x0                   	// #0
   100003170:	2a1303f8 	mov	w24, w19
   100003174:	700219d6 	adr	x22, 1000074af <__PromotedConst.1+0x8f>
   100003178:	d503201f 	nop
    printf("%x ", char_data[i]);
   10000317c:	38776aa8 	ldrb	w8, [x21, x23]
   100003180:	f90003e8 	str	x8, [sp]
   100003184:	aa1603e0 	mov	x0, x22
   100003188:	94000fdb 	bl	1000070f4 <_request_snapshot+0x5ec>
  for(int i = 0; i < len; i++) {
   10000318c:	910006f7 	add	x23, x23, #0x1
   100003190:	eb17031f 	cmp	x24, x23
   100003194:	54ffff41 	b.ne	10000317c <_channel_data_callback+0x7c>  // b.any
  }
  printf("\n");
   100003198:	52800140 	mov	w0, #0xa                   	// #10
   10000319c:	94000feb 	bl	100007148 <_request_snapshot+0x640>

  unsigned char control_char = (char) 0x00;
  if(len == 3 && char_data[0] == 0x1b && char_data[1] == 0x5b) control_char = char_data[2]; //arrows
   1000031a0:	71000e7f 	cmp	w19, #0x3
   1000031a4:	540001c0 	b.eq	1000031dc <_channel_data_callback+0xdc>  // b.none
   1000031a8:	7100067f 	cmp	w19, #0x1
   1000031ac:	54000361 	b.ne	100003218 <_channel_data_callback+0x118>  // b.any
   1000031b0:	394002a8 	ldrb	w8, [x21]
  else if (len == 1) control_char = char_data[0];

  switch (control_char) {
   1000031b4:	7101411f 	cmp	w8, #0x50
   1000031b8:	5400024c 	b.gt	100003200 <_channel_data_callback+0x100>
   1000031bc:	71000d1f 	cmp	w8, #0x3
   1000031c0:	54000280 	b.eq	100003210 <_channel_data_callback+0x110>  // b.none
   1000031c4:	71006d1f 	cmp	w8, #0x1b
   1000031c8:	54000240 	b.eq	100003210 <_channel_data_callback+0x110>  // b.none
   1000031cc:	14000013 	b	100003218 <_channel_data_callback+0x118>
  printf("\n");
   1000031d0:	52800140 	mov	w0, #0xa                   	// #10
   1000031d4:	94000fdd 	bl	100007148 <_request_snapshot+0x640>
   1000031d8:	14000010 	b	100003218 <_channel_data_callback+0x118>
  if(len == 3 && char_data[0] == 0x1b && char_data[1] == 0x5b) control_char = char_data[2]; //arrows
   1000031dc:	394002a8 	ldrb	w8, [x21]
   1000031e0:	71006d1f 	cmp	w8, #0x1b
   1000031e4:	540001a1 	b.ne	100003218 <_channel_data_callback+0x118>  // b.any
   1000031e8:	394006a8 	ldrb	w8, [x21, #1]
   1000031ec:	71016d1f 	cmp	w8, #0x5b
   1000031f0:	54000141 	b.ne	100003218 <_channel_data_callback+0x118>  // b.any
   1000031f4:	38402ea8 	ldrb	w8, [x21, #2]!
  switch (control_char) {
   1000031f8:	7101411f 	cmp	w8, #0x50
   1000031fc:	54fffe0d 	b.le	1000031bc <_channel_data_callback+0xbc>
   100003200:	7101c51f 	cmp	w8, #0x71
   100003204:	54000060 	b.eq	100003210 <_channel_data_callback+0x110>  // b.none
   100003208:	7101451f 	cmp	w8, #0x51
   10000320c:	54000061 	b.ne	100003218 <_channel_data_callback+0x118>  // b.any
   100003210:	52800028 	mov	w8, #0x1                   	// #1
    case 0x71:  //q
    case 0x51:  //Q
    case 0x03:  //^C
    case 0x1b:  //ESC
      ssh_client->pleaseKill = true;
   100003214:	39004288 	strb	w8, [x20, #16]
      break;
  }

  return (int) len;
   100003218:	aa1303e0 	mov	x0, x19
   10000321c:	a9447bfd 	ldp	x29, x30, [sp, #64]
   100003220:	a9434ff4 	ldp	x20, x19, [sp, #48]
   100003224:	a94257f6 	ldp	x22, x21, [sp, #32]
   100003228:	a9415ff8 	ldp	x24, x23, [sp, #16]
   10000322c:	910143ff 	add	sp, sp, #0x50
   100003230:	d65f03c0 	ret

0000000100003234 <_channel_eof_callback>:
 * @brief SSH channel eof callback. Called when a channel receives EOF
 * @param session Current session handler
 * @param channel the actual channel
 * @param userdata Userdata to be passed to the callback function.
 */
void channel_eof_callback(ssh_session session, ssh_channel channel, void *userdata) {
   100003234:	d10083ff 	sub	sp, sp, #0x20
   100003238:	a9017bfd 	stp	x29, x30, [sp, #16]
   10000323c:	910043fd 	add	x29, sp, #0x10
  ssh_client_t * ssh_client = (ssh_client_t *) userdata;
  printf("[ssh_client %u]: %s\n", ssh_client->id, "channel_eof_callback");
   100003240:	b9400048 	ldr	w8, [x2]
   100003244:	70021369 	adr	x9, 1000074b3 <__PromotedConst.1+0x93>
   100003248:	d503201f 	nop
   10000324c:	a90027e8 	stp	x8, x9, [sp]
   100003250:	10021000 	adr	x0, 100007450 <__PromotedConst.1+0x30>
   100003254:	d503201f 	nop
   100003258:	94000fa7 	bl	1000070f4 <_request_snapshot+0x5ec>
}
   10000325c:	a9417bfd 	ldp	x29, x30, [sp, #16]
   100003260:	910083ff 	add	sp, sp, #0x20
   100003264:	d65f03c0 	ret

0000000100003268 <_channel_close_callback>:
 * @brief SSH channel close callback. Called when a channel is closed by remote peer
 * @param session Current session handler
 * @param channel the actual channel
 * @param userdata Userdata to be passed to the callback function.
 */
void channel_close_callback(ssh_session session, ssh_channel channel, void *userdata) {
   100003268:	d100c3ff 	sub	sp, sp, #0x30
   10000326c:	a9014ff4 	stp	x20, x19, [sp, #16]
   100003270:	a9027bfd 	stp	x29, x30, [sp, #32]
   100003274:	910083fd 	add	x29, sp, #0x20
   100003278:	aa0203f3 	mov	x19, x2
  ssh_client_t * ssh_client = (ssh_client_t *) userdata;
  printf("[ssh_client %u]: %s\n", ssh_client->id, "channel_close_callback");
   10000327c:	b9400048 	ldr	w8, [x2]
   100003280:	10021249 	adr	x9, 1000074c8 <__PromotedConst.1+0xa8>
   100003284:	d503201f 	nop
   100003288:	a90027e8 	stp	x8, x9, [sp]
   10000328c:	10020e20 	adr	x0, 100007450 <__PromotedConst.1+0x30>
   100003290:	d503201f 	nop
   100003294:	94000f98 	bl	1000070f4 <_request_snapshot+0x5ec>
   100003298:	52800028 	mov	w8, #0x1                   	// #1
  ssh_client->pleaseKill = true;
   10000329c:	39004268 	strb	w8, [x19, #16]
}
   1000032a0:	a9427bfd 	ldp	x29, x30, [sp, #32]
   1000032a4:	a9414ff4 	ldp	x20, x19, [sp, #16]
   1000032a8:	9100c3ff 	add	sp, sp, #0x30
   1000032ac:	d65f03c0 	ret

00000001000032b0 <_channel_signal_callback>:
 * @param session Current session handler
 * @param channel the actual channel
 * @param signal the signal name (without the SIG prefix)
 * @param userdata Userdata to be passed to the callback function.
 */
void channel_signal_callback(ssh_session session, ssh_channel channel, const char *signal, void *userdata) {
   1000032b0:	d100c3ff 	sub	sp, sp, #0x30
   1000032b4:	a9014ff4 	stp	x20, x19, [sp, #16]
   1000032b8:	a9027bfd 	stp	x29, x30, [sp, #32]
   1000032bc:	910083fd 	add	x29, sp, #0x20
   1000032c0:	aa0303f3 	mov	x19, x3
   1000032c4:	aa0203f4 	mov	x20, x2
  ssh_client_t * ssh_client = (ssh_client_t *) userdata;
  printf("[ssh_client %u]: %s\n", ssh_client->id, "channel_signal_callback");
   1000032c8:	b9400068 	ldr	w8, [x3]
   1000032cc:	70021089 	adr	x9, 1000074df <__PromotedConst.1+0xbf>
   1000032d0:	d503201f 	nop
   1000032d4:	a90027e8 	stp	x8, x9, [sp]
   1000032d8:	10020bc0 	adr	x0, 100007450 <__PromotedConst.1+0x30>
   1000032dc:	d503201f 	nop
   1000032e0:	94000f85 	bl	1000070f4 <_request_snapshot+0x5ec>
  printf("\t[ssh_client %u]: SIGNAL %s\n", ssh_client->id, signal);
   1000032e4:	b9400268 	ldr	w8, [x19]
   1000032e8:	a90053e8 	stp	x8, x20, [sp]
   1000032ec:	70021040 	adr	x0, 1000074f7 <__PromotedConst.1+0xd7>
   1000032f0:	d503201f 	nop
   1000032f4:	94000f80 	bl	1000070f4 <_request_snapshot+0x5ec>
   1000032f8:	52800028 	mov	w8, #0x1                   	// #1
  ssh_client->pleaseKill = true;
   1000032fc:	39004268 	strb	w8, [x19, #16]
}
   100003300:	a9427bfd 	ldp	x29, x30, [sp, #32]
   100003304:	a9414ff4 	ldp	x20, x19, [sp, #16]
   100003308:	9100c3ff 	add	sp, sp, #0x30
   10000330c:	d65f03c0 	ret

0000000100003310 <_channel_exit_status_callback>:
 * @brief SSH channel exit status callback. Called when a channel has received an exit status
 * @param session Current session handler
 * @param channel the actual channel
 * @param userdata Userdata to be passed to the callback function.
 */
void channel_exit_status_callback(ssh_session session, ssh_channel channel, int exit_status, void *userdata) {
   100003310:	d100c3ff 	sub	sp, sp, #0x30
   100003314:	a9014ff4 	stp	x20, x19, [sp, #16]
   100003318:	a9027bfd 	stp	x29, x30, [sp, #32]
   10000331c:	910083fd 	add	x29, sp, #0x20
   100003320:	aa0303f3 	mov	x19, x3
   100003324:	aa0203f4 	mov	x20, x2
  ssh_client_t * ssh_client = (ssh_client_t *) userdata;
  printf("[ssh_client %u]: %s\n", ssh_client->id, "channel_exit_status_callback");
   100003328:	b9400068 	ldr	w8, [x3]
   10000332c:	10020f49 	adr	x9, 100007514 <__PromotedConst.1+0xf4>
   100003330:	d503201f 	nop
   100003334:	a90027e8 	stp	x8, x9, [sp]
   100003338:	100208c0 	adr	x0, 100007450 <__PromotedConst.1+0x30>
   10000333c:	d503201f 	nop
   100003340:	94000f6d 	bl	1000070f4 <_request_snapshot+0x5ec>
  printf("\t[ssh_client %u]: exit_status: %d\n", ssh_client->id, exit_status);
   100003344:	b9400268 	ldr	w8, [x19]
   100003348:	a90053e8 	stp	x8, x20, [sp]
   10000334c:	30020f20 	adr	x0, 100007531 <__PromotedConst.1+0x111>
   100003350:	d503201f 	nop
   100003354:	94000f68 	bl	1000070f4 <_request_snapshot+0x5ec>
   100003358:	52800028 	mov	w8, #0x1                   	// #1
  ssh_client->pleaseKill = true;
   10000335c:	39004268 	strb	w8, [x19, #16]
}
   100003360:	a9427bfd 	ldp	x29, x30, [sp, #32]
   100003364:	a9414ff4 	ldp	x20, x19, [sp, #16]
   100003368:	9100c3ff 	add	sp, sp, #0x30
   10000336c:	d65f03c0 	ret

0000000100003370 <_channel_exit_signal_callback>:
 * @param core a boolean telling wether a core has been dumped or not
 * @param errmsg the description of the exception
 * @param lang the language of the description (format: RFC 3066)
 * @param userdata Userdata to be passed to the callback function.
 */
void channel_exit_signal_callback(ssh_session session, ssh_channel channel, const char *signal, int core, const char *errmsg, const char *lang, void *userdata) {
   100003370:	d100c3ff 	sub	sp, sp, #0x30
   100003374:	a9014ff4 	stp	x20, x19, [sp, #16]
   100003378:	a9027bfd 	stp	x29, x30, [sp, #32]
   10000337c:	910083fd 	add	x29, sp, #0x20
   100003380:	aa0603f3 	mov	x19, x6
  ssh_client_t * ssh_client = (ssh_client_t *) userdata;
  printf("[ssh_client %u]: %s\n", ssh_client->id, "channel_exit_signal_callback");
   100003384:	b94000c8 	ldr	w8, [x6]
   100003388:	10020e69 	adr	x9, 100007554 <__PromotedConst.1+0x134>
   10000338c:	d503201f 	nop
   100003390:	a90027e8 	stp	x8, x9, [sp]
   100003394:	100205e0 	adr	x0, 100007450 <__PromotedConst.1+0x30>
   100003398:	d503201f 	nop
   10000339c:	94000f56 	bl	1000070f4 <_request_snapshot+0x5ec>
   1000033a0:	52800028 	mov	w8, #0x1                   	// #1
  ssh_client->pleaseKill = true;
   1000033a4:	39004268 	strb	w8, [x19, #16]
}
   1000033a8:	a9427bfd 	ldp	x29, x30, [sp, #32]
   1000033ac:	a9414ff4 	ldp	x20, x19, [sp, #16]
   1000033b0:	9100c3ff 	add	sp, sp, #0x30
   1000033b4:	d65f03c0 	ret

00000001000033b8 <_channel_pty_request_callback>:
 * @param pxheight height of the terminal, in pixels
 * @param userdata Userdata to be passed to the callback function.
 * @returns 0 if the pty request is accepted
 * @returns -1 if the request is denied
 */
int channel_pty_request_callback(ssh_session session, ssh_channel channel, const char *term, int width, int height, int pxwidth, int pxheight, void *userdata) {
   1000033b8:	d10143ff 	sub	sp, sp, #0x50
   1000033bc:	a9015ff8 	stp	x24, x23, [sp, #16]
   1000033c0:	a90257f6 	stp	x22, x21, [sp, #32]
   1000033c4:	a9034ff4 	stp	x20, x19, [sp, #48]
   1000033c8:	a9047bfd 	stp	x29, x30, [sp, #64]
   1000033cc:	910103fd 	add	x29, sp, #0x40
   1000033d0:	aa0703f4 	mov	x20, x7
   1000033d4:	aa0603f6 	mov	x22, x6
   1000033d8:	aa0503f7 	mov	x23, x5
   1000033dc:	aa0403f3 	mov	x19, x4
   1000033e0:	aa0303f5 	mov	x21, x3
   1000033e4:	aa0203f8 	mov	x24, x2
  ssh_client_t * ssh_client = (ssh_client_t *) userdata;
  printf("[ssh_client %u]: %s\n", ssh_client->id, "channel_pty_request_callback");
   1000033e8:	b94000e8 	ldr	w8, [x7]
   1000033ec:	30020c29 	adr	x9, 100007571 <__PromotedConst.1+0x151>
   1000033f0:	d503201f 	nop
   1000033f4:	a90027e8 	stp	x8, x9, [sp]
   1000033f8:	100202c0 	adr	x0, 100007450 <__PromotedConst.1+0x30>
   1000033fc:	d503201f 	nop
   100003400:	94000f3d 	bl	1000070f4 <_request_snapshot+0x5ec>

  printf("\t[ssh_client %u]: term: %s\n", ssh_client->id, term);
   100003404:	b9400288 	ldr	w8, [x20]
   100003408:	a90063e8 	stp	x8, x24, [sp]
   10000340c:	50020c00 	adr	x0, 10000758e <__PromotedConst.1+0x16e>
   100003410:	d503201f 	nop
   100003414:	94000f38 	bl	1000070f4 <_request_snapshot+0x5ec>
  printf("\t[ssh_client %u]: width: %d\n", ssh_client->id, width);
   100003418:	b9400288 	ldr	w8, [x20]
   10000341c:	a90057e8 	stp	x8, x21, [sp]
   100003420:	50020c40 	adr	x0, 1000075aa <__PromotedConst.1+0x18a>
   100003424:	d503201f 	nop
   100003428:	94000f33 	bl	1000070f4 <_request_snapshot+0x5ec>
  printf("\t[ssh_client %u]: height: %d\n", ssh_client->id, height);
   10000342c:	b9400288 	ldr	w8, [x20]
   100003430:	a9004fe8 	stp	x8, x19, [sp]
   100003434:	70020c80 	adr	x0, 1000075c7 <__PromotedConst.1+0x1a7>
   100003438:	d503201f 	nop
   10000343c:	94000f2e 	bl	1000070f4 <_request_snapshot+0x5ec>
  printf("\t[ssh_client %u]: pxwidth: %d\n", ssh_client->id, pxwidth);
   100003440:	b9400288 	ldr	w8, [x20]
   100003444:	a9005fe8 	stp	x8, x23, [sp]
   100003448:	30020ce0 	adr	x0, 1000075e5 <__PromotedConst.1+0x1c5>
   10000344c:	d503201f 	nop
   100003450:	94000f29 	bl	1000070f4 <_request_snapshot+0x5ec>
  printf("\t[ssh_client %u]: pxheight: %d\n", ssh_client->id, pxheight);
   100003454:	b9400288 	ldr	w8, [x20]
   100003458:	a9005be8 	stp	x8, x22, [sp]
   10000345c:	10020d40 	adr	x0, 100007604 <__PromotedConst.1+0x1e4>
   100003460:	d503201f 	nop
   100003464:	94000f24 	bl	1000070f4 <_request_snapshot+0x5ec>

  printf("\t[ssh_client %u]: pty request successful.\n", ssh_client->id);
   100003468:	b9400288 	ldr	w8, [x20]
   10000346c:	f90003e8 	str	x8, [sp]
   100003470:	10020da0 	adr	x0, 100007624 <__PromotedConst.1+0x204>
   100003474:	d503201f 	nop
   100003478:	94000f1f 	bl	1000070f4 <_request_snapshot+0x5ec>

  request_player(ssh_client->id);
   10000347c:	b9400280 	ldr	w0, [x20]
   100003480:	94000cc2 	bl	100006788 <_request_player>
  render_daemon(width, height, 256, ssh_client->channel, ssh_client->id);
   100003484:	f9403e83 	ldr	x3, [x20, #120]
   100003488:	b9400284 	ldr	w4, [x20]
   10000348c:	aa1503e0 	mov	x0, x21
   100003490:	aa1303e1 	mov	x1, x19
   100003494:	52802002 	mov	w2, #0x100                 	// #256
   100003498:	94000826 	bl	100005530 <_render_daemon>

  return 0;
   10000349c:	52800000 	mov	w0, #0x0                   	// #0
   1000034a0:	a9447bfd 	ldp	x29, x30, [sp, #64]
   1000034a4:	a9434ff4 	ldp	x20, x19, [sp, #48]
   1000034a8:	a94257f6 	ldp	x22, x21, [sp, #32]
   1000034ac:	a9415ff8 	ldp	x24, x23, [sp, #16]
   1000034b0:	910143ff 	add	sp, sp, #0x50
   1000034b4:	d65f03c0 	ret

00000001000034b8 <_channel_shell_request_callback>:
 * @param channel the channel
 * @param userdata Userdata to be passed to the callback function.
 * @returns 0 if the shell request is accepted
 * @returns 1 if the request is denied
 */
int channel_shell_request_callback(ssh_session session, ssh_channel channel, void *userdata) {
   1000034b8:	d100c3ff 	sub	sp, sp, #0x30
   1000034bc:	a9014ff4 	stp	x20, x19, [sp, #16]
   1000034c0:	a9027bfd 	stp	x29, x30, [sp, #32]
   1000034c4:	910083fd 	add	x29, sp, #0x20
   1000034c8:	aa0203f3 	mov	x19, x2
  ssh_client_t * ssh_client = (ssh_client_t *) userdata;
  printf("[ssh_client %u]: %s\n", ssh_client->id, "channel_shell_request_callback");
   1000034cc:	b9400048 	ldr	w8, [x2]
   1000034d0:	70020be9 	adr	x9, 10000764f <__PromotedConst.1+0x22f>
   1000034d4:	d503201f 	nop
   1000034d8:	a90027e8 	stp	x8, x9, [sp]
   1000034dc:	1001fba0 	adr	x0, 100007450 <__PromotedConst.1+0x30>
   1000034e0:	d503201f 	nop
   1000034e4:	94000f04 	bl	1000070f4 <_request_snapshot+0x5ec>
  printf("\t[ssh_client %u]: shell request successful\n", ssh_client->id);
   1000034e8:	b9400268 	ldr	w8, [x19]
   1000034ec:	f90003e8 	str	x8, [sp]
   1000034f0:	50020be0 	adr	x0, 10000766e <__PromotedConst.1+0x24e>
   1000034f4:	d503201f 	nop
   1000034f8:	94000eff 	bl	1000070f4 <_request_snapshot+0x5ec>

  return 0;
   1000034fc:	52800000 	mov	w0, #0x0                   	// #0
   100003500:	a9427bfd 	ldp	x29, x30, [sp, #32]
   100003504:	a9414ff4 	ldp	x20, x19, [sp, #16]
   100003508:	9100c3ff 	add	sp, sp, #0x30
   10000350c:	d65f03c0 	ret

0000000100003510 <_channel_auth_agent_req_callback>:
 * sent by a ssh_client when agent forwarding is available.
 * Server is free to ignore this callback, no answer is expected.
 * @param channel the channel
 * @param userdata Userdata to be passed to the callback function.
 */
void channel_auth_agent_req_callback(ssh_session session, ssh_channel channel, void *userdata) {
   100003510:	d10083ff 	sub	sp, sp, #0x20
   100003514:	a9017bfd 	stp	x29, x30, [sp, #16]
   100003518:	910043fd 	add	x29, sp, #0x10
  ssh_client_t * ssh_client = (ssh_client_t *) userdata;
  printf("[ssh_client %u]: %s\n", ssh_client->id, "channel_auth_agent_req_callback");
   10000351c:	b9400048 	ldr	w8, [x2]
   100003520:	50020bc9 	adr	x9, 10000769a <__PromotedConst.1+0x27a>
   100003524:	d503201f 	nop
   100003528:	a90027e8 	stp	x8, x9, [sp]
   10000352c:	1001f920 	adr	x0, 100007450 <__PromotedConst.1+0x30>
   100003530:	d503201f 	nop
   100003534:	94000ef0 	bl	1000070f4 <_request_snapshot+0x5ec>
}
   100003538:	a9417bfd 	ldp	x29, x30, [sp, #16]
   10000353c:	910083ff 	add	sp, sp, #0x20
   100003540:	d65f03c0 	ret

0000000100003544 <_channel_x11_req_callback>:
 * sent by a ssh_client when X11 forwarding is requested(and available).
 * Server is free to ignore this callback, no answer is expected.
 * @param channel the channel
 * @param userdata Userdata to be passed to the callback function.
 */
void channel_x11_req_callback(ssh_session session, ssh_channel channel, int single_connection, const char *auth_protocol, const char *auth_cookie, uint32_t screen_number, void *userdata) {
   100003544:	d10083ff 	sub	sp, sp, #0x20
   100003548:	a9017bfd 	stp	x29, x30, [sp, #16]
   10000354c:	910043fd 	add	x29, sp, #0x10
  ssh_client_t * ssh_client = (ssh_client_t *) userdata;
  printf("[ssh_client %u]: %s\n", ssh_client->id, "channel_x11_req_callback");
   100003550:	b94000c8 	ldr	w8, [x6]
   100003554:	50020b29 	adr	x9, 1000076ba <__PromotedConst.1+0x29a>
   100003558:	d503201f 	nop
   10000355c:	a90027e8 	stp	x8, x9, [sp]
   100003560:	1001f780 	adr	x0, 100007450 <__PromotedConst.1+0x30>
   100003564:	d503201f 	nop
   100003568:	94000ee3 	bl	1000070f4 <_request_snapshot+0x5ec>
}
   10000356c:	a9417bfd 	ldp	x29, x30, [sp, #16]
   100003570:	910083ff 	add	sp, sp, #0x20
   100003574:	d65f03c0 	ret

0000000100003578 <_channel_pty_window_change_callback>:
 * @param pxheight height of the terminal, in pixels
 * @param userdata Userdata to be passed to the callback function.
 * @returns 0 if the pty request is accepted
 * @returns -1 if the request is denied
 */
int channel_pty_window_change_callback(ssh_session session, ssh_channel channel, int width, int height, int pxwidth, int pxheight, void *userdata) {
   100003578:	d10143ff 	sub	sp, sp, #0x50
   10000357c:	a9015ff8 	stp	x24, x23, [sp, #16]
   100003580:	a90257f6 	stp	x22, x21, [sp, #32]
   100003584:	a9034ff4 	stp	x20, x19, [sp, #48]
   100003588:	a9047bfd 	stp	x29, x30, [sp, #64]
   10000358c:	910103fd 	add	x29, sp, #0x40
   100003590:	aa0603f3 	mov	x19, x6
   100003594:	aa0503f4 	mov	x20, x5
   100003598:	aa0403f5 	mov	x21, x4
   10000359c:	aa0303f6 	mov	x22, x3
   1000035a0:	aa0203f7 	mov	x23, x2
  ssh_client_t * ssh_client = (ssh_client_t *) userdata;
  printf("[ssh_client %u]: %s\n", ssh_client->id, "channel_pty_window_change_callback");
   1000035a4:	b94000c8 	ldr	w8, [x6]
   1000035a8:	70020949 	adr	x9, 1000076d3 <__PromotedConst.1+0x2b3>
   1000035ac:	d503201f 	nop
   1000035b0:	a90027e8 	stp	x8, x9, [sp]
   1000035b4:	1001f4e0 	adr	x0, 100007450 <__PromotedConst.1+0x30>
   1000035b8:	d503201f 	nop
   1000035bc:	94000ece 	bl	1000070f4 <_request_snapshot+0x5ec>

  printf("\t[ssh_client %u]: width: %d\n", ssh_client->id, width);
   1000035c0:	b9400268 	ldr	w8, [x19]
   1000035c4:	a9005fe8 	stp	x8, x23, [sp]
   1000035c8:	5001ff00 	adr	x0, 1000075aa <__PromotedConst.1+0x18a>
   1000035cc:	d503201f 	nop
   1000035d0:	94000ec9 	bl	1000070f4 <_request_snapshot+0x5ec>
  printf("\t[ssh_client %u]: height: %d\n", ssh_client->id, height);
   1000035d4:	b9400268 	ldr	w8, [x19]
   1000035d8:	a9005be8 	stp	x8, x22, [sp]
   1000035dc:	7001ff40 	adr	x0, 1000075c7 <__PromotedConst.1+0x1a7>
   1000035e0:	d503201f 	nop
   1000035e4:	94000ec4 	bl	1000070f4 <_request_snapshot+0x5ec>
  printf("\t[ssh_client %u]: pxwidth: %d\n", ssh_client->id, pxwidth);
   1000035e8:	b9400268 	ldr	w8, [x19]
   1000035ec:	a90057e8 	stp	x8, x21, [sp]
   1000035f0:	3001ffa0 	adr	x0, 1000075e5 <__PromotedConst.1+0x1c5>
   1000035f4:	d503201f 	nop
   1000035f8:	94000ebf 	bl	1000070f4 <_request_snapshot+0x5ec>
  printf("\t[ssh_client %u]: pxheight: %d\n", ssh_client->id, pxheight);
   1000035fc:	b9400268 	ldr	w8, [x19]
   100003600:	a90053e8 	stp	x8, x20, [sp]
   100003604:	10020000 	adr	x0, 100007604 <__PromotedConst.1+0x1e4>
   100003608:	d503201f 	nop
   10000360c:	94000eba 	bl	1000070f4 <_request_snapshot+0x5ec>
  return -1;
   100003610:	12800000 	mov	w0, #0xffffffff            	// #-1
   100003614:	a9447bfd 	ldp	x29, x30, [sp, #64]
   100003618:	a9434ff4 	ldp	x20, x19, [sp, #48]
   10000361c:	a94257f6 	ldp	x22, x21, [sp, #32]
   100003620:	a9415ff8 	ldp	x24, x23, [sp, #16]
   100003624:	910143ff 	add	sp, sp, #0x50
   100003628:	d65f03c0 	ret

000000010000362c <_channel_exec_request_callback>:
 * @param command the shell command to be executed
 * @param userdata Userdata to be passed to the callback function.
 * @returns 0 if the exec request is accepted
 * @returns 1 if the request is denied
 */
int channel_exec_request_callback(ssh_session session, ssh_channel channel, const char *command, void *userdata) {
   10000362c:	d10083ff 	sub	sp, sp, #0x20
   100003630:	a9017bfd 	stp	x29, x30, [sp, #16]
   100003634:	910043fd 	add	x29, sp, #0x10
  ssh_client_t * ssh_client = (ssh_client_t *) userdata;
  printf("[ssh_client %u]: %s\n", ssh_client->id, "channel_exec_request_callback");
   100003638:	b9400068 	ldr	w8, [x3]
   10000363c:	500205c9 	adr	x9, 1000076f6 <__PromotedConst.1+0x2d6>
   100003640:	d503201f 	nop
   100003644:	a90027e8 	stp	x8, x9, [sp]
   100003648:	1001f040 	adr	x0, 100007450 <__PromotedConst.1+0x30>
   10000364c:	d503201f 	nop
   100003650:	94000ea9 	bl	1000070f4 <_request_snapshot+0x5ec>

  return 1;
   100003654:	52800020 	mov	w0, #0x1                   	// #1
   100003658:	a9417bfd 	ldp	x29, x30, [sp, #16]
   10000365c:	910083ff 	add	sp, sp, #0x20
   100003660:	d65f03c0 	ret

0000000100003664 <_channel_env_request_callback>:
 * @returns 0 if the env request is accepted
 * @returns 1 if the request is denied
 * @warning some environment variables can be dangerous if changed (e.g.
 * 			LD_PRELOAD) and should not be fulfilled.
 */
int channel_env_request_callback(ssh_session session, ssh_channel channel, const char *env_name, const char *env_value, void *userdata) {
   100003664:	d10143ff 	sub	sp, sp, #0x50
   100003668:	a90257f6 	stp	x22, x21, [sp, #32]
   10000366c:	a9034ff4 	stp	x20, x19, [sp, #48]
   100003670:	a9047bfd 	stp	x29, x30, [sp, #64]
   100003674:	910103fd 	add	x29, sp, #0x40
   100003678:	aa0403f3 	mov	x19, x4
   10000367c:	aa0303f4 	mov	x20, x3
   100003680:	aa0203f5 	mov	x21, x2
  ssh_client_t * ssh_client = (ssh_client_t *) userdata;
  printf("[ssh_client %u]: %s\n", ssh_client->id, "channel_env_request_callback");
   100003684:	b9400088 	ldr	w8, [x4]
   100003688:	10020469 	adr	x9, 100007714 <__PromotedConst.1+0x2f4>
   10000368c:	d503201f 	nop
   100003690:	a90027e8 	stp	x8, x9, [sp]
   100003694:	1001ede0 	adr	x0, 100007450 <__PromotedConst.1+0x30>
   100003698:	d503201f 	nop
   10000369c:	94000e96 	bl	1000070f4 <_request_snapshot+0x5ec>

  printf("\t[ssh_client %u]: env_name: %s\n\t[ssh_client %u]: env_value: %s\n",
   1000036a0:	b9400268 	ldr	w8, [x19]
   1000036a4:	a90153e8 	stp	x8, x20, [sp, #16]
   1000036a8:	a90057e8 	stp	x8, x21, [sp]
   1000036ac:	30020420 	adr	x0, 100007731 <__PromotedConst.1+0x311>
   1000036b0:	d503201f 	nop
   1000036b4:	94000e90 	bl	1000070f4 <_request_snapshot+0x5ec>
          ssh_client->id, env_name,
          ssh_client->id, env_value);
  return 1;
   1000036b8:	52800020 	mov	w0, #0x1                   	// #1
   1000036bc:	a9447bfd 	ldp	x29, x30, [sp, #64]
   1000036c0:	a9434ff4 	ldp	x20, x19, [sp, #48]
   1000036c4:	a94257f6 	ldp	x22, x21, [sp, #32]
   1000036c8:	910143ff 	add	sp, sp, #0x50
   1000036cc:	d65f03c0 	ret

00000001000036d0 <_channel_subsystem_request_callback>:
 * @param subsystem the subsystem required
 * @param userdata Userdata to be passed to the callback function.
 * @returns 0 if the subsystem request is accepted
 * @returns 1 if the request is denied
 */
int channel_subsystem_request_callback(ssh_session session, ssh_channel channel, const char *subsystem, void *userdata) {
   1000036d0:	d10083ff 	sub	sp, sp, #0x20
   1000036d4:	a9017bfd 	stp	x29, x30, [sp, #16]
   1000036d8:	910043fd 	add	x29, sp, #0x10
  ssh_client_t * ssh_client = (ssh_client_t *) userdata;
  printf("[ssh_client %u]: %s\n", ssh_client->id, "channel_subsystem_request_callback");
   1000036dc:	b9400068 	ldr	w8, [x3]
   1000036e0:	30020489 	adr	x9, 100007771 <__PromotedConst.1+0x351>
   1000036e4:	d503201f 	nop
   1000036e8:	a90027e8 	stp	x8, x9, [sp]
   1000036ec:	1001eb20 	adr	x0, 100007450 <__PromotedConst.1+0x30>
   1000036f0:	d503201f 	nop
   1000036f4:	94000e80 	bl	1000070f4 <_request_snapshot+0x5ec>

  return 1;
   1000036f8:	52800020 	mov	w0, #0x1                   	// #1
   1000036fc:	a9417bfd 	ldp	x29, x30, [sp, #16]
   100003700:	910083ff 	add	sp, sp, #0x20
   100003704:	d65f03c0 	ret

0000000100003708 <_channel_write_wontblock_callback>:
 *
 * @param[in] userdata Userdata to be passed to the callback function.
 *
 * @returns 0 default return value (other return codes may be added in future).
 */
int channel_write_wontblock_callback(ssh_session session, ssh_channel channel, size_t bytes, void *userdata) {
   100003708:	d100c3ff 	sub	sp, sp, #0x30
   10000370c:	a9014ff4 	stp	x20, x19, [sp, #16]
   100003710:	a9027bfd 	stp	x29, x30, [sp, #32]
   100003714:	910083fd 	add	x29, sp, #0x20
   100003718:	aa0303f3 	mov	x19, x3
   10000371c:	aa0203f4 	mov	x20, x2
  ssh_client_t * ssh_client = (ssh_client_t *) userdata;
  printf("[ssh_client %u]: %s\n", ssh_client->id, "channel_write_wontblock_callback");
   100003720:	b9400068 	ldr	w8, [x3]
   100003724:	10020389 	adr	x9, 100007794 <__PromotedConst.1+0x374>
   100003728:	d503201f 	nop
   10000372c:	a90027e8 	stp	x8, x9, [sp]
   100003730:	1001e900 	adr	x0, 100007450 <__PromotedConst.1+0x30>
   100003734:	d503201f 	nop
   100003738:	94000e6f 	bl	1000070f4 <_request_snapshot+0x5ec>
  printf("\t[ssh_client %u]: bytes: %lu\n", ssh_client->id, bytes);
   10000373c:	b9400268 	ldr	w8, [x19]
   100003740:	a90053e8 	stp	x8, x20, [sp]
   100003744:	30020380 	adr	x0, 1000077b5 <__PromotedConst.1+0x395>
   100003748:	d503201f 	nop
   10000374c:	94000e6a 	bl	1000070f4 <_request_snapshot+0x5ec>

  return 0;
   100003750:	52800000 	mov	w0, #0x0                   	// #0
   100003754:	a9427bfd 	ldp	x29, x30, [sp, #32]
   100003758:	a9414ff4 	ldp	x20, x19, [sp, #16]
   10000375c:	9100c3ff 	add	sp, sp, #0x30
   100003760:	d65f03c0 	ret

0000000100003764 <_auth_password_callback>:
 * @param userdata Userdata to be passed to the callback function.
 * @returns SSH_AUTH_SUCCESS Authentication is accepted.
 * @returns SSH_AUTH_PARTIAL Partial authentication, more authentication means are needed.
 * @returns SSH_AUTH_DENIED Authentication failed.
 */
int auth_password_callback(ssh_session session, const char *user, const char *password, void *userdata) {
   100003764:	d10143ff 	sub	sp, sp, #0x50
   100003768:	a90257f6 	stp	x22, x21, [sp, #32]
   10000376c:	a9034ff4 	stp	x20, x19, [sp, #48]
   100003770:	a9047bfd 	stp	x29, x30, [sp, #64]
   100003774:	910103fd 	add	x29, sp, #0x40
   100003778:	aa0303f3 	mov	x19, x3
   10000377c:	aa0203f4 	mov	x20, x2
   100003780:	aa0103f5 	mov	x21, x1
  ssh_client_t * ssh_client = (ssh_client_t *) userdata;
  printf("[ssh_client %u]: %s\n", ssh_client->id, "auth_password_callback");
   100003784:	b9400068 	ldr	w8, [x3]
   100003788:	70020249 	adr	x9, 1000077d3 <__PromotedConst.1+0x3b3>
   10000378c:	d503201f 	nop
   100003790:	a90027e8 	stp	x8, x9, [sp]
   100003794:	1001e5e0 	adr	x0, 100007450 <__PromotedConst.1+0x30>
   100003798:	d503201f 	nop
   10000379c:	94000e56 	bl	1000070f4 <_request_snapshot+0x5ec>

  printf("\t[ssh_client %u]: user: %s\n\t[ssh_client %u]: pass: %s\n",
   1000037a0:	b9400268 	ldr	w8, [x19]
   1000037a4:	a90153e8 	stp	x8, x20, [sp, #16]
   1000037a8:	a90057e8 	stp	x8, x21, [sp]
   1000037ac:	500201e0 	adr	x0, 1000077ea <__PromotedConst.1+0x3ca>
   1000037b0:	d503201f 	nop
   1000037b4:	94000e50 	bl	1000070f4 <_request_snapshot+0x5ec>
          ssh_client->id, user,
          ssh_client->id, password);

  if(!strcmp(user, "jelly") && !strcmp(password, "toast")) {
   1000037b8:	30020341 	adr	x1, 100007821 <__PromotedConst.1+0x401>
   1000037bc:	d503201f 	nop
   1000037c0:	aa1503e0 	mov	x0, x21
   1000037c4:	94000eb5 	bl	100007298 <_request_snapshot+0x790>
   1000037c8:	350000c0 	cbnz	w0, 1000037e0 <_auth_password_callback+0x7c>
   1000037cc:	700202c1 	adr	x1, 100007827 <__PromotedConst.1+0x407>
   1000037d0:	d503201f 	nop
   1000037d4:	aa1403e0 	mov	x0, x20
   1000037d8:	94000eb0 	bl	100007298 <_request_snapshot+0x790>
   1000037dc:	34000140 	cbz	w0, 100003804 <_auth_password_callback+0xa0>
    ssh_client->authenticated = true;
    return SSH_AUTH_SUCCESS;
  } else {
    ssh_client->auth_attempts++;
   1000037e0:	b9401668 	ldr	w8, [x19, #20]
   1000037e4:	11000508 	add	w8, w8, #0x1
   1000037e8:	b9001668 	str	w8, [x19, #20]
   1000037ec:	52800020 	mov	w0, #0x1                   	// #1
    return SSH_AUTH_DENIED;
  }
}
   1000037f0:	a9447bfd 	ldp	x29, x30, [sp, #64]
   1000037f4:	a9434ff4 	ldp	x20, x19, [sp, #48]
   1000037f8:	a94257f6 	ldp	x22, x21, [sp, #32]
   1000037fc:	910143ff 	add	sp, sp, #0x50
   100003800:	d65f03c0 	ret
   100003804:	52800028 	mov	w8, #0x1                   	// #1
    ssh_client->authenticated = true;
   100003808:	39004a68 	strb	w8, [x19, #18]
}
   10000380c:	a9447bfd 	ldp	x29, x30, [sp, #64]
   100003810:	a9434ff4 	ldp	x20, x19, [sp, #48]
   100003814:	a94257f6 	ldp	x22, x21, [sp, #32]
   100003818:	910143ff 	add	sp, sp, #0x50
   10000381c:	d65f03c0 	ret

0000000100003820 <_auth_none_callback>:
 * @param userdata Userdata to be passed to the callback function.
 * @returns SSH_AUTH_SUCCESS Authentication is accepted.
 * @returns SSH_AUTH_PARTIAL Partial authentication, more authentication means are needed.
 * @returns SSH_AUTH_DENIED Authentication failed.
 */
 int auth_none_callback(ssh_session session, const char *user, void *userdata) {
   100003820:	d100c3ff 	sub	sp, sp, #0x30
   100003824:	a9014ff4 	stp	x20, x19, [sp, #16]
   100003828:	a9027bfd 	stp	x29, x30, [sp, #32]
   10000382c:	910083fd 	add	x29, sp, #0x20
   100003830:	aa0203f3 	mov	x19, x2
   100003834:	aa0103f4 	mov	x20, x1
  ssh_client_t * ssh_client = (ssh_client_t *) userdata;
  printf("[ssh_client %u]: %s\n", ssh_client->id, "auth_none_callback");
   100003838:	b9400048 	ldr	w8, [x2]
   10000383c:	3001ff89 	adr	x9, 10000782d <__PromotedConst.1+0x40d>
   100003840:	d503201f 	nop
   100003844:	a90027e8 	stp	x8, x9, [sp]
   100003848:	1001e040 	adr	x0, 100007450 <__PromotedConst.1+0x30>
   10000384c:	d503201f 	nop
   100003850:	94000e29 	bl	1000070f4 <_request_snapshot+0x5ec>

  printf("\t[ssh_client %u]: %s\n", ssh_client->id, user);
   100003854:	b9400268 	ldr	w8, [x19]
   100003858:	a90053e8 	stp	x8, x20, [sp]
   10000385c:	1001ff20 	adr	x0, 100007840 <__PromotedConst.1+0x420>
   100003860:	d503201f 	nop
   100003864:	94000e24 	bl	1000070f4 <_request_snapshot+0x5ec>
  return SSH_AUTH_DENIED;
   100003868:	52800020 	mov	w0, #0x1                   	// #1
   10000386c:	a9427bfd 	ldp	x29, x30, [sp, #32]
   100003870:	a9414ff4 	ldp	x20, x19, [sp, #16]
   100003874:	9100c3ff 	add	sp, sp, #0x30
   100003878:	d65f03c0 	ret

000000010000387c <_auth_gssapi_mic_callback>:
 * @returns SSH_AUTH_PARTIAL Partial authentication, more authentication means are needed.
 * @returns SSH_AUTH_DENIED Authentication failed.
 * @warning Implementations should verify that parameter user matches in some way the principal.
 * user and principal can be different. Only the latter is guaranteed to be safe.
 */
 int auth_gssapi_mic_callback(ssh_session session, const char *user, const char *principal, void *userdata) {
   10000387c:	d10083ff 	sub	sp, sp, #0x20
   100003880:	a9017bfd 	stp	x29, x30, [sp, #16]
   100003884:	910043fd 	add	x29, sp, #0x10
  ssh_client_t * ssh_client = (ssh_client_t *) userdata;
  printf("[ssh_client %u]: %s\n", ssh_client->id, "auth_gssapi_mic_callback");
   100003888:	b9400068 	ldr	w8, [x3]
   10000388c:	5001fe49 	adr	x9, 100007856 <__PromotedConst.1+0x436>
   100003890:	d503201f 	nop
   100003894:	a90027e8 	stp	x8, x9, [sp]
   100003898:	1001ddc0 	adr	x0, 100007450 <__PromotedConst.1+0x30>
   10000389c:	d503201f 	nop
   1000038a0:	94000e15 	bl	1000070f4 <_request_snapshot+0x5ec>

  return SSH_AUTH_DENIED;
   1000038a4:	52800020 	mov	w0, #0x1                   	// #1
   1000038a8:	a9417bfd 	ldp	x29, x30, [sp, #16]
   1000038ac:	910083ff 	add	sp, sp, #0x20
   1000038b0:	d65f03c0 	ret

00000001000038b4 <_auth_pubkey_callback>:
 * @param userdata Userdata to be passed to the callback function.
 * @returns SSH_AUTH_SUCCESS Authentication is accepted.
 * @returns SSH_AUTH_PARTIAL Partial authentication, more authentication means are needed.
 * @returns SSH_AUTH_DENIED Authentication failed.
 */
int auth_pubkey_callback(ssh_session session, const char *user, struct ssh_key_struct *pubkey, char signature_state, void *userdata) {
   1000038b4:	d10083ff 	sub	sp, sp, #0x20
   1000038b8:	a9017bfd 	stp	x29, x30, [sp, #16]
   1000038bc:	910043fd 	add	x29, sp, #0x10
  ssh_client_t * ssh_client = (ssh_client_t *) userdata;
  printf("[ssh_client %u]: %s\n", ssh_client->id, "auth_pubkey_callback");
   1000038c0:	b9400088 	ldr	w8, [x4]
   1000038c4:	7001fd49 	adr	x9, 10000786f <__PromotedConst.1+0x44f>
   1000038c8:	d503201f 	nop
   1000038cc:	a90027e8 	stp	x8, x9, [sp]
   1000038d0:	1001dc00 	adr	x0, 100007450 <__PromotedConst.1+0x30>
   1000038d4:	d503201f 	nop
   1000038d8:	94000e07 	bl	1000070f4 <_request_snapshot+0x5ec>

  return SSH_AUTH_DENIED;
   1000038dc:	52800020 	mov	w0, #0x1                   	// #1
   1000038e0:	a9417bfd 	ldp	x29, x30, [sp, #16]
   1000038e4:	910083ff 	add	sp, sp, #0x20
   1000038e8:	d65f03c0 	ret

00000001000038ec <_service_request_callback>:
 * @param service name of the service (e.g. "ssh-userauth") requested
 * @param userdata Userdata to be passed to the callback function.
 * @returns 0 if the request is to be allowed
 * @returns -1 if the request should not be allowed
 */
int service_request_callback(ssh_session session, const char *service, void *userdata) {
   1000038ec:	d100c3ff 	sub	sp, sp, #0x30
   1000038f0:	a9014ff4 	stp	x20, x19, [sp, #16]
   1000038f4:	a9027bfd 	stp	x29, x30, [sp, #32]
   1000038f8:	910083fd 	add	x29, sp, #0x20
   1000038fc:	aa0203f3 	mov	x19, x2
   100003900:	aa0103f4 	mov	x20, x1
  ssh_client_t * ssh_client = (ssh_client_t *) userdata;
  printf("[ssh_client %u]: %s\n", ssh_client->id, "service_request_callback");
   100003904:	b9400048 	ldr	w8, [x2]
   100003908:	1001fbe9 	adr	x9, 100007884 <__PromotedConst.1+0x464>
   10000390c:	d503201f 	nop
   100003910:	a90027e8 	stp	x8, x9, [sp]
   100003914:	1001d9e0 	adr	x0, 100007450 <__PromotedConst.1+0x30>
   100003918:	d503201f 	nop
   10000391c:	94000df6 	bl	1000070f4 <_request_snapshot+0x5ec>

  printf("\t[ssh_client %u]: %s\n", ssh_client->id,  service);
   100003920:	b9400268 	ldr	w8, [x19]
   100003924:	a90053e8 	stp	x8, x20, [sp]
   100003928:	1001f8c0 	adr	x0, 100007840 <__PromotedConst.1+0x420>
   10000392c:	d503201f 	nop
   100003930:	94000df1 	bl	1000070f4 <_request_snapshot+0x5ec>
  if(!strcmp(service, "ssh-userauth")) return SSH_OK;
   100003934:	3001fb41 	adr	x1, 10000789d <__PromotedConst.1+0x47d>
   100003938:	d503201f 	nop
   10000393c:	aa1403e0 	mov	x0, x20
   100003940:	94000e56 	bl	100007298 <_request_snapshot+0x790>
   100003944:	7100001f 	cmp	w0, #0x0
   100003948:	5a9f03e0 	csetm	w0, ne  // ne = any

  return -1;
}
   10000394c:	a9427bfd 	ldp	x29, x30, [sp, #32]
   100003950:	a9414ff4 	ldp	x20, x19, [sp, #16]
   100003954:	9100c3ff 	add	sp, sp, #0x30
   100003958:	d65f03c0 	ret

000000010000395c <_channel_open_request_session_callback>:
 * @param userdata Userdata to be passed to the callback function.
 * @returns a valid ssh_channel handle if the request is to be allowed
 * @returns NULL if the request should not be allowed
 * @warning The channel pointer returned by this callback must be closed by the application.
 */
ssh_channel channel_open_request_session_callback(ssh_session session, void *userdata) {
   10000395c:	d100c3ff 	sub	sp, sp, #0x30
   100003960:	a9014ff4 	stp	x20, x19, [sp, #16]
   100003964:	a9027bfd 	stp	x29, x30, [sp, #32]
   100003968:	910083fd 	add	x29, sp, #0x20
   10000396c:	aa0103f3 	mov	x19, x1
  ssh_client_t * ssh_client = (ssh_client_t *) userdata;
  printf("[ssh_client %u]: %s\n", ssh_client->id, "channel_open_request_session_callback");
   100003970:	b9400028 	ldr	w8, [x1]
   100003974:	5001f9a9 	adr	x9, 1000078aa <__PromotedConst.1+0x48a>
   100003978:	d503201f 	nop
   10000397c:	a90027e8 	stp	x8, x9, [sp]
   100003980:	1001d680 	adr	x0, 100007450 <__PromotedConst.1+0x30>
   100003984:	d503201f 	nop
   100003988:	94000ddb 	bl	1000070f4 <_request_snapshot+0x5ec>

  ssh_client->channel = ssh_channel_new(ssh_client->session);
   10000398c:	f9400e60 	ldr	x0, [x19, #24]
   100003990:	94000e15 	bl	1000071e4 <_request_snapshot+0x6dc>
   100003994:	f9003e60 	str	x0, [x19, #120]
  if(!ssh_client->channel) {
   100003998:	b4000200 	cbz	x0, 1000039d8 <_channel_open_request_session_callback+0x7c>
    printf("\t[ssh_client %u]: %s\n", ssh_client->id, "Channel could not be created\n");
    ssh_client->pleaseKill = true;
    return NULL;
  }
  ssh_set_channel_callbacks(ssh_client->channel, &(ssh_client->ssh_client_channel_callbacks));
   10000399c:	91020261 	add	x1, x19, #0x80
   1000039a0:	94000e38 	bl	100007280 <_request_snapshot+0x778>
  ssh_client->pre_channel = false;
   1000039a4:	3900467f 	strb	wzr, [x19, #17]

  printf("\t[ssh_client %u]: %s\n", ssh_client->id, "channel successfully opened");
   1000039a8:	b9400268 	ldr	w8, [x19]
   1000039ac:	5001fa09 	adr	x9, 1000078ee <__PromotedConst.1+0x4ce>
   1000039b0:	d503201f 	nop
   1000039b4:	a90027e8 	stp	x8, x9, [sp]
   1000039b8:	1001f440 	adr	x0, 100007840 <__PromotedConst.1+0x420>
   1000039bc:	d503201f 	nop
   1000039c0:	94000dcd 	bl	1000070f4 <_request_snapshot+0x5ec>
  return ssh_client->channel;
   1000039c4:	f9403e60 	ldr	x0, [x19, #120]
}
   1000039c8:	a9427bfd 	ldp	x29, x30, [sp, #32]
   1000039cc:	a9414ff4 	ldp	x20, x19, [sp, #16]
   1000039d0:	9100c3ff 	add	sp, sp, #0x30
   1000039d4:	d65f03c0 	ret
    printf("\t[ssh_client %u]: %s\n", ssh_client->id, "Channel could not be created\n");
   1000039d8:	b9400268 	ldr	w8, [x19]
   1000039dc:	1001f7a9 	adr	x9, 1000078d0 <__PromotedConst.1+0x4b0>
   1000039e0:	d503201f 	nop
   1000039e4:	a90027e8 	stp	x8, x9, [sp]
   1000039e8:	1001f2c0 	adr	x0, 100007840 <__PromotedConst.1+0x420>
   1000039ec:	d503201f 	nop
   1000039f0:	94000dc1 	bl	1000070f4 <_request_snapshot+0x5ec>
   1000039f4:	d2800000 	mov	x0, #0x0                   	// #0
   1000039f8:	52800028 	mov	w8, #0x1                   	// #1
    ssh_client->pleaseKill = true;
   1000039fc:	39004268 	strb	w8, [x19, #16]
}
   100003a00:	a9427bfd 	ldp	x29, x30, [sp, #32]
   100003a04:	a9414ff4 	ldp	x20, x19, [sp, #16]
   100003a08:	9100c3ff 	add	sp, sp, #0x30
   100003a0c:	d65f03c0 	ret

0000000100003a10 <_gssapi_select_oid_callback>:
 * @returns an ssh_string containing the chosen OID, that's supported by both
 * ssh_client and server.
 * @warning It is not necessary to fill this callback in if libssh is linked
 * with libgssapi.
 */
ssh_string gssapi_select_oid_callback(ssh_session session, const char *user, int n_oid, ssh_string *oids, void *userdata) {
   100003a10:	d10083ff 	sub	sp, sp, #0x20
   100003a14:	a9017bfd 	stp	x29, x30, [sp, #16]
   100003a18:	910043fd 	add	x29, sp, #0x10
  ssh_client_t * ssh_client = (ssh_client_t *) userdata;
  printf("[ssh_client %u]: %s\n", ssh_client->id, "gssapi_select_oid_callback");
   100003a1c:	b9400088 	ldr	w8, [x4]
   100003a20:	5001f749 	adr	x9, 10000790a <__PromotedConst.1+0x4ea>
   100003a24:	d503201f 	nop
   100003a28:	a90027e8 	stp	x8, x9, [sp]
   100003a2c:	1001d120 	adr	x0, 100007450 <__PromotedConst.1+0x30>
   100003a30:	d503201f 	nop
   100003a34:	94000db0 	bl	1000070f4 <_request_snapshot+0x5ec>

  return NULL;
   100003a38:	d2800000 	mov	x0, #0x0                   	// #0
   100003a3c:	a9417bfd 	ldp	x29, x30, [sp, #16]
   100003a40:	910083ff 	add	sp, sp, #0x20
   100003a44:	d65f03c0 	ret

0000000100003a48 <_gssapi_accept_sec_ctx_callback>:
 * returned GSS_S_COMPLETE
 * @returns SSH_ERROR in case of error
 * @warning It is not necessary to fill this callback in if libssh is linked
 * with libgssapi.
 */
int gssapi_accept_sec_ctx_callback(ssh_session session, ssh_string input_token, ssh_string *output_token, void *userdata) {
   100003a48:	d10083ff 	sub	sp, sp, #0x20
   100003a4c:	a9017bfd 	stp	x29, x30, [sp, #16]
   100003a50:	910043fd 	add	x29, sp, #0x10
  ssh_client_t * ssh_client = (ssh_client_t *) userdata;
  printf("[ssh_client %u]: %s\n", ssh_client->id, "gssapi_accept_sec_ctx_callback");
   100003a54:	b9400068 	ldr	w8, [x3]
   100003a58:	3001f669 	adr	x9, 100007925 <__PromotedConst.1+0x505>
   100003a5c:	d503201f 	nop
   100003a60:	a90027e8 	stp	x8, x9, [sp]
   100003a64:	1001cf60 	adr	x0, 100007450 <__PromotedConst.1+0x30>
   100003a68:	d503201f 	nop
   100003a6c:	94000da2 	bl	1000070f4 <_request_snapshot+0x5ec>

  return SSH_ERROR;
   100003a70:	12800000 	mov	w0, #0xffffffff            	// #-1
   100003a74:	a9417bfd 	ldp	x29, x30, [sp, #16]
   100003a78:	910083ff 	add	sp, sp, #0x20
   100003a7c:	d65f03c0 	ret

0000000100003a80 <_gssapi_verify_mic_callback>:
 * @returns SSH_OK if the MIC was authenticated correctly
 * @returns SSH_ERROR in case of error
 * @warning It is not necessary to fill this callback in if libssh is linked
 * with libgssapi.
 */
int gssapi_verify_mic_callback(ssh_session session, ssh_string mic, void *mic_buffer, size_t mic_buffer_size, void *userdata) {
   100003a80:	d10083ff 	sub	sp, sp, #0x20
   100003a84:	a9017bfd 	stp	x29, x30, [sp, #16]
   100003a88:	910043fd 	add	x29, sp, #0x10
  ssh_client_t * ssh_client = (ssh_client_t *) userdata;
  printf("[ssh_client %u]: %s\n", ssh_client->id, "gssapi_verify_mic_callback");
   100003a8c:	b9400088 	ldr	w8, [x4]
   100003a90:	1001f5a9 	adr	x9, 100007944 <__PromotedConst.1+0x524>
   100003a94:	d503201f 	nop
   100003a98:	a90027e8 	stp	x8, x9, [sp]
   100003a9c:	1001cda0 	adr	x0, 100007450 <__PromotedConst.1+0x30>
   100003aa0:	d503201f 	nop
   100003aa4:	94000d94 	bl	1000070f4 <_request_snapshot+0x5ec>

  return SSH_ERROR;
   100003aa8:	12800000 	mov	w0, #0xffffffff            	// #-1
   100003aac:	a9417bfd 	ldp	x29, x30, [sp, #16]
   100003ab0:	910083ff 	add	sp, sp, #0x20
   100003ab4:	d65f03c0 	ret

0000000100003ab8 <_auth_callback>:
 * @param userdata      Userdata to be passed to the callback function. Useful
 *                      for GUI applications.
 *
 * @return              0 on success, < 0 on error.
 */
int auth_callback(const char *prompt, char *buf, size_t len, int echo, int verify, void *userdata) {
   100003ab8:	d10083ff 	sub	sp, sp, #0x20
   100003abc:	a9017bfd 	stp	x29, x30, [sp, #16]
   100003ac0:	910043fd 	add	x29, sp, #0x10
  ssh_client_t * ssh_ssh_client = (ssh_client_t *) userdata;
  printf("!!![ssh_client %u]: %s\n", ssh_ssh_client->id, "auth_callback");
   100003ac4:	b94000a8 	ldr	w8, [x5]
   100003ac8:	7001f569 	adr	x9, 100007977 <__PromotedConst.1+0x557>
   100003acc:	d503201f 	nop
   100003ad0:	a90027e8 	stp	x8, x9, [sp]
   100003ad4:	7001f440 	adr	x0, 10000795f <__PromotedConst.1+0x53f>
   100003ad8:	d503201f 	nop
   100003adc:	94000d86 	bl	1000070f4 <_request_snapshot+0x5ec>

  return -1;
   100003ae0:	12800000 	mov	w0, #0xffffffff            	// #-1
   100003ae4:	a9417bfd 	ldp	x29, x30, [sp, #16]
   100003ae8:	910083ff 	add	sp, sp, #0x20
   100003aec:	d65f03c0 	ret

0000000100003af0 <_log_callback>:
 * @param session Current session handler
 * @param priority Priority of the log, the smaller being the more important
 * @param message the actual message
 * @param userdata Userdata to be passed to the callback function.
 */
void log_callback(ssh_session session, int priority, const char *message, void *userdata) {
   100003af0:	d10083ff 	sub	sp, sp, #0x20
   100003af4:	a9017bfd 	stp	x29, x30, [sp, #16]
   100003af8:	910043fd 	add	x29, sp, #0x10
  ssh_client_t * ssh_client = (ssh_client_t *) userdata;
  printf("!!![ssh_client %u]: %s\n", ssh_client->id, "log_callback");
   100003afc:	b9400068 	ldr	w8, [x3]
   100003b00:	3001f429 	adr	x9, 100007985 <__PromotedConst.1+0x565>
   100003b04:	d503201f 	nop
   100003b08:	a90027e8 	stp	x8, x9, [sp]
   100003b0c:	7001f280 	adr	x0, 10000795f <__PromotedConst.1+0x53f>
   100003b10:	d503201f 	nop
   100003b14:	94000d78 	bl	1000070f4 <_request_snapshot+0x5ec>
}
   100003b18:	a9417bfd 	ldp	x29, x30, [sp, #16]
   100003b1c:	910083ff 	add	sp, sp, #0x20
   100003b20:	d65f03c0 	ret

0000000100003b24 <_status_callback>:
 * @param session Current session handler
 * @param status Percentage of connection status, going from 0.0 to 1.0
 * once connection is done.
 * @param userdata Userdata to be passed to the callback function.
 */
void status_callback(void *userdata, float status) {
   100003b24:	d10103ff 	sub	sp, sp, #0x40
   100003b28:	6d0123e9 	stp	d9, d8, [sp, #16]
   100003b2c:	a9024ff4 	stp	x20, x19, [sp, #32]
   100003b30:	a9037bfd 	stp	x29, x30, [sp, #48]
   100003b34:	9100c3fd 	add	x29, sp, #0x30
   100003b38:	4ea01c08 	mov	v8.16b, v0.16b
   100003b3c:	aa0003f3 	mov	x19, x0
  ssh_client_t * ssh_client = (ssh_client_t *) userdata;
  printf("!!![ssh_client %u]: %s\n", ssh_client->id, "status_callback");
   100003b40:	b9400008 	ldr	w8, [x0]
   100003b44:	5001f269 	adr	x9, 100007992 <__PromotedConst.1+0x572>
   100003b48:	d503201f 	nop
   100003b4c:	a90027e8 	stp	x8, x9, [sp]
   100003b50:	7001f060 	adr	x0, 10000795f <__PromotedConst.1+0x53f>
   100003b54:	d503201f 	nop
   100003b58:	94000d67 	bl	1000070f4 <_request_snapshot+0x5ec>
  printf("!!!\t[ssh_client %u]: %f\n", ssh_client->id, status);
   100003b5c:	1e22c100 	fcvt	d0, s8
   100003b60:	b9400268 	ldr	w8, [x19]
   100003b64:	fd0007e0 	str	d0, [sp, #8]
   100003b68:	f90003e8 	str	x8, [sp]
   100003b6c:	5001f1a0 	adr	x0, 1000079a2 <__PromotedConst.1+0x582>
   100003b70:	d503201f 	nop
   100003b74:	94000d60 	bl	1000070f4 <_request_snapshot+0x5ec>
}
   100003b78:	a9437bfd 	ldp	x29, x30, [sp, #48]
   100003b7c:	a9424ff4 	ldp	x20, x19, [sp, #32]
   100003b80:	6d4123e9 	ldp	d9, d8, [sp, #16]
   100003b84:	910103ff 	add	sp, sp, #0x40
   100003b88:	d65f03c0 	ret

0000000100003b8c <_global_request_callback>:
 * callback.
 * @param session Current session handler
 * @param message the actual message
 * @param userdata Userdata to be passed to the callback function.
 */
void global_request_callback(ssh_session session, ssh_message message, void *userdata) {
   100003b8c:	d10083ff 	sub	sp, sp, #0x20
   100003b90:	a9017bfd 	stp	x29, x30, [sp, #16]
   100003b94:	910043fd 	add	x29, sp, #0x10
  ssh_client_t * ssh_client = (ssh_client_t *) userdata;
  printf("!!![ssh_client %u]: %s\n", ssh_client->id, "global_request_callback");
   100003b98:	b9400048 	ldr	w8, [x2]
   100003b9c:	7001f0e9 	adr	x9, 1000079bb <__PromotedConst.1+0x59b>
   100003ba0:	d503201f 	nop
   100003ba4:	a90027e8 	stp	x8, x9, [sp]
   100003ba8:	7001eda0 	adr	x0, 10000795f <__PromotedConst.1+0x53f>
   100003bac:	d503201f 	nop
   100003bb0:	94000d51 	bl	1000070f4 <_request_snapshot+0x5ec>
}
   100003bb4:	a9417bfd 	ldp	x29, x30, [sp, #16]
   100003bb8:	910083ff 	add	sp, sp, #0x20
   100003bbc:	d65f03c0 	ret

0000000100003bc0 <_channel_open_request_x11_callback>:
 * @param userdata Userdata to be passed to the callback function.
 * @returns a valid ssh_channel handle if the request is to be allowed
 * @returns NULL if the request should not be allowed
 * @warning The channel pointer returned by this callback must be closed by the application.
 */
ssh_channel channel_open_request_x11_callback(ssh_session session, const char * originator_address, int originator_port, void *userdata) {
   100003bc0:	d10083ff 	sub	sp, sp, #0x20
   100003bc4:	a9017bfd 	stp	x29, x30, [sp, #16]
   100003bc8:	910043fd 	add	x29, sp, #0x10
  ssh_client_t * ssh_client = (ssh_client_t *) userdata;
  printf("!!![ssh_client %u]: %s\n", ssh_client->id, "channel_open_request_x11_callback");
   100003bcc:	b9400068 	ldr	w8, [x3]
   100003bd0:	7001f009 	adr	x9, 1000079d3 <__PromotedConst.1+0x5b3>
   100003bd4:	d503201f 	nop
   100003bd8:	a90027e8 	stp	x8, x9, [sp]
   100003bdc:	7001ec00 	adr	x0, 10000795f <__PromotedConst.1+0x53f>
   100003be0:	d503201f 	nop
   100003be4:	94000d44 	bl	1000070f4 <_request_snapshot+0x5ec>

  return NULL;
   100003be8:	d2800000 	mov	x0, #0x0                   	// #0
   100003bec:	a9417bfd 	ldp	x29, x30, [sp, #16]
   100003bf0:	910083ff 	add	sp, sp, #0x20
   100003bf4:	d65f03c0 	ret

0000000100003bf8 <_channel_open_request_auth_agent_callback>:
 * @param userdata Userdata to be passed to the callback function.
 * @returns a valid ssh_channel handle if the request is to be allowed
 * @returns NULL if the request should not be allowed
 * @warning The channel pointer returned by this callback must be closed by the application.
 */
ssh_channel channel_open_request_auth_agent_callback(ssh_session session, void *userdata) {
   100003bf8:	d10083ff 	sub	sp, sp, #0x20
   100003bfc:	a9017bfd 	stp	x29, x30, [sp, #16]
   100003c00:	910043fd 	add	x29, sp, #0x10
  ssh_client_t * ssh_client = (ssh_client_t *) userdata;
  printf("!!![ssh_client %u]: %s\n", ssh_client->id, "channel_open_request_auth_agent_callback");
   100003c04:	b9400028 	ldr	w8, [x1]
   100003c08:	3001ef69 	adr	x9, 1000079f5 <__PromotedConst.1+0x5d5>
   100003c0c:	d503201f 	nop
   100003c10:	a90027e8 	stp	x8, x9, [sp]
   100003c14:	7001ea40 	adr	x0, 10000795f <__PromotedConst.1+0x53f>
   100003c18:	d503201f 	nop
   100003c1c:	94000d36 	bl	1000070f4 <_request_snapshot+0x5ec>

  return NULL;
   100003c20:	d2800000 	mov	x0, #0x0                   	// #0
   100003c24:	a9417bfd 	ldp	x29, x30, [sp, #16]
   100003c28:	910083ff 	add	sp, sp, #0x20
   100003c2c:	d65f03c0 	ret

0000000100003c30 <_lanes_true>:
#   define SGVecUInt_Shift_Left_Insert(X, Y, Z) vsliq_n_u32((X), (Y), (Z))
#endif

inline
bool lanes_true(SGVecUInt x) {
  SGVecShortUInt x_2 = SGVecShortUInt_Fold_Min(SGVecUInt_Bottom_Short(x), SGVecUInt_Top_Short(x));
   100003c30:	6e004001 	ext	v1.16b, v0.16b, v0.16b, #8
   100003c34:	2ea1ac00 	uminp	v0.2s, v0.2s, v1.2s
  return ~SGVecShortUInt_Get_Lane(SGVecShortUInt_Fold_Min(x_2, x_2), 0) == 0;
   100003c38:	2ea0ac00 	uminp	v0.2s, v0.2s, v0.2s
   100003c3c:	1e260008 	fmov	w8, s0
   100003c40:	3100051f 	cmn	w8, #0x1
   100003c44:	1a9f17e0 	cset	w0, eq  // eq = none
   100003c48:	d65f03c0 	ret

0000000100003c4c <_lanes_false>:
}

inline
bool lanes_false(SGVecUInt x) {
  SGVecShortUInt x_2 = SGVecShortUInt_Fold_Max(SGVecUInt_Bottom_Short(x), SGVecUInt_Top_Short(x));
   100003c4c:	6e004001 	ext	v1.16b, v0.16b, v0.16b, #8
   100003c50:	2ea1a400 	umaxp	v0.2s, v0.2s, v1.2s
  return SGVecShortUInt_Get_Lane(SGVecShortUInt_Fold_Max(x_2, x_2), 0) == 0;
   100003c54:	2ea0a400 	umaxp	v0.2s, v0.2s, v0.2s
   100003c58:	1e260008 	fmov	w8, s0
   100003c5c:	7100011f 	cmp	w8, #0x0
   100003c60:	1a9f17e0 	cset	w0, eq  // eq = none
   100003c64:	d65f03c0 	ret

0000000100003c68 <_SGVec_Clamp>:
}

inline
SGVec SGVec_Clamp(SGVec x, float min, float max) {
  return SGVec_Minimum(SGVec_Maximum(x, SGVec_Load_Const(min)), SGVec_Load_Const(max));
   100003c68:	4e040421 	dup	v1.4s, v1.s[0]
   100003c6c:	4e21f400 	fmax	v0.4s, v0.4s, v1.4s
   100003c70:	4e040441 	dup	v1.4s, v2.s[0]
   100003c74:	4ea1f400 	fmin	v0.4s, v0.4s, v1.4s
   100003c78:	d65f03c0 	ret

0000000100003c7c <_normalize_rgb>:
}

inline
rgb_t normalize_rgb(unsigned int r, unsigned int g, unsigned int b) {
  return (rgb_t) {
    .r = r / (float) 255.,
   100003c7c:	1e230000 	ucvtf	s0, w0
   100003c80:	52901028 	mov	w8, #0x8081                	// #32897
   100003c84:	72a77008 	movk	w8, #0x3b80, lsl #16
   100003c88:	1e270102 	fmov	s2, w8
   100003c8c:	1e220800 	fmul	s0, s0, s2
    .g = g / (float) 255.,
   100003c90:	1e230021 	ucvtf	s1, w1
   100003c94:	1e220821 	fmul	s1, s1, s2
    .b = b / (float) 255.
   100003c98:	1e230043 	ucvtf	s3, w2
   100003c9c:	1e220862 	fmul	s2, s3, s2
  return (rgb_t) {
   100003ca0:	d65f03c0 	ret

0000000100003ca4 <_denormalize_rgb>:
  };
}

inline
rgb_t denormalize_rgb(rgb_t rgb) {
   100003ca4:	52a86fe8 	mov	w8, #0x437f0000            	// #1132396544
   100003ca8:	1e270103 	fmov	s3, w8
  return (rgb_t) {
    .r = rgb.r * (float) 255.,
   100003cac:	1e230800 	fmul	s0, s0, s3
    .g = rgb.g * (float) 255.,
   100003cb0:	1e230821 	fmul	s1, s1, s3
    .b = rgb.b * (float) 255.
   100003cb4:	1e230842 	fmul	s2, s2, s3
  return (rgb_t) {
   100003cb8:	d65f03c0 	ret

0000000100003cbc <_delta_E>:
  float delta_l = x.l - y.l;
   100003cbc:	1e233800 	fsub	s0, s0, s3
  float delta_a = x.a - y.a;
   100003cc0:	1e243821 	fsub	s1, s1, s4
  float delta_b = x.b - y.b;
   100003cc4:	1e253842 	fsub	s2, s2, s5
  float delta_h = sqrtf(delta_a * delta_a + delta_b * delta_b - delta_c * delta_c);
   100003cc8:	1e220842 	fmul	s2, s2, s2
   100003ccc:	1f010821 	fmadd	s1, s1, s1, s2
  float delta_E_OK = sqrtf(delta_l * delta_l + delta_c * delta_c + delta_h * delta_h);
   100003cd0:	1f000400 	fmadd	s0, s0, s0, s1
   100003cd4:	1e21c000 	fsqrt	s0, s0
  return delta_E_OK;
   100003cd8:	d65f03c0 	ret

0000000100003cdc <_linear_srgb_to_oklab>:
  };
}

inline
oklab_t linear_srgb_to_oklab(rgb_t c) {
   100003cdc:	d10103ff 	sub	sp, sp, #0x40
   100003ce0:	6d0223e9 	stp	d9, d8, [sp, #32]
   100003ce4:	a9037bfd 	stp	x29, x30, [sp, #48]
   100003ce8:	9100c3fd 	add	x29, sp, #0x30
   100003cec:	5281d628 	mov	w8, #0xeb1                 	// #3761
   100003cf0:	72a7da68 	movk	w8, #0x3ed3, lsl #16
   100003cf4:	1e270103 	fmov	s3, w8
   100003cf8:	5289a2e8 	mov	w8, #0x4d17                	// #19735
   100003cfc:	72a7e128 	movk	w8, #0x3f09, lsl #16
   100003d00:	1e270104 	fmov	s4, w8
  float l = 0.4122214708f * c.r + 0.5363325363f * c.g + 0.0514459929f * c.b;
   100003d04:	1e240824 	fmul	s4, s1, s4
   100003d08:	1f031003 	fmadd	s3, s0, s3, s4
   100003d0c:	52972128 	mov	w8, #0xb909                	// #47369
   100003d10:	72a7aa48 	movk	w8, #0x3d52, lsl #16
   100003d14:	1e270104 	fmov	s4, w8
   100003d18:	1f040c43 	fmadd	s3, s2, s4, s3
   100003d1c:	529fa768 	mov	w8, #0xfd3b                	// #64827
   100003d20:	72a7cb08 	movk	w8, #0x3e58, lsl #16
   100003d24:	1e270104 	fmov	s4, w8
   100003d28:	52884a68 	mov	w8, #0x4253                	// #16979
   100003d2c:	72a7e5c8 	movk	w8, #0x3f2e, lsl #16
   100003d30:	1e270105 	fmov	s5, w8
	float m = 0.2119034982f * c.r + 0.6806995451f * c.g + 0.1073969566f * c.b;
   100003d34:	1e250825 	fmul	s5, s1, s5
   100003d38:	1f041404 	fmadd	s4, s0, s4, s5
   100003d3c:	529e5e08 	mov	w8, #0xf2f0                	// #62192
   100003d40:	72a7bb68 	movk	w8, #0x3ddb, lsl #16
   100003d44:	1e270105 	fmov	s5, w8
   100003d48:	1f051048 	fmadd	s8, s2, s5, s4
   100003d4c:	529afd88 	mov	w8, #0xd7ec                	// #55276
   100003d50:	72a7b688 	movk	w8, #0x3db4, lsl #16
   100003d54:	1e270104 	fmov	s4, w8
   100003d58:	5287ae88 	mov	w8, #0x3d74                	// #15732
   100003d5c:	72a7d208 	movk	w8, #0x3e90, lsl #16
   100003d60:	1e270105 	fmov	s5, w8
	float s = 0.0883024619f * c.r + 0.2817188376f * c.g + 0.6299787005f * c.b;
   100003d64:	1e250821 	fmul	s1, s1, s5
   100003d68:	1f040400 	fmadd	s0, s0, s4, s1
   100003d6c:	5288c928 	mov	w8, #0x4649                	// #17993
   100003d70:	72a7e428 	movk	w8, #0x3f21, lsl #16
   100003d74:	1e270101 	fmov	s1, w8
   100003d78:	1f010049 	fmadd	s9, s2, s1, s0

  float l_ = cbrtf(l);
   100003d7c:	4ea31c60 	mov	v0.16b, v3.16b
   100003d80:	94000cc2 	bl	100007088 <_request_snapshot+0x580>
   100003d84:	fd000be0 	str	d0, [sp, #16]
  float m_ = cbrtf(m);
   100003d88:	4ea81d00 	mov	v0.16b, v8.16b
   100003d8c:	94000cbf 	bl	100007088 <_request_snapshot+0x580>
   100003d90:	fd0003e0 	str	d0, [sp]
  float s_ = cbrtf(s);
   100003d94:	4ea91d20 	mov	v0.16b, v9.16b
   100003d98:	94000cbc 	bl	100007088 <_request_snapshot+0x580>
   100003d9c:	d503201f 	nop

  return (oklab_t) {
    .l = 0.2104542553f*l_ + 0.7936177850f*m_ - 0.0040720468f*s_,
   100003da0:	5c01aa01 	ldr	d1, 1000072e0 <__PromotedConst+0x30>
   100003da4:	ad400be4 	ldp	q4, q2, [sp]
   100003da8:	0f829023 	fmul	v3.2s, v1.2s, v2.s[0]
   100003dac:	d503201f 	nop
   100003db0:	5c01a9c1 	ldr	d1, 1000072e8 <__PromotedConst+0x38>
   100003db4:	0f841023 	fmla	v3.2s, v1.2s, v4.s[0]
   100003db8:	d503201f 	nop
   100003dbc:	5c01a9a1 	ldr	d1, 1000072f0 <__PromotedConst+0x40>
   100003dc0:	0f801023 	fmla	v3.2s, v1.2s, v0.s[0]
   100003dc4:	52869688 	mov	w8, #0x34b4                	// #13492
   100003dc8:	72a79a88 	movk	w8, #0x3cd4, lsl #16
   100003dcc:	1e270101 	fmov	s1, w8
    .a = 1.9779984951f*l_ - 2.4285922050f*m_ + 0.4505937099f*s_,
    .b = 0.0259040371f*l_ + 0.7827717662f*m_ - 0.8086757660f*s_
   100003dd0:	1e210841 	fmul	s1, s2, s1
   100003dd4:	528c7768 	mov	w8, #0x63bb                	// #25531
   100003dd8:	72a7e908 	movk	w8, #0x3f48, lsl #16
   100003ddc:	1e270102 	fmov	s2, w8
   100003de0:	1f020481 	fmadd	s1, s4, s2, s1
   100003de4:	5280ac08 	mov	w8, #0x560                 	// #1376
   100003de8:	72b7e9e8 	movk	w8, #0xbf4f, lsl #16
   100003dec:	1e270102 	fmov	s2, w8
   100003df0:	1f020402 	fmadd	s2, s0, s2, s1
  };
}
   100003df4:	5e0c0461 	mov	s1, v3.s[1]
   100003df8:	4ea31c60 	mov	v0.16b, v3.16b
   100003dfc:	a9437bfd 	ldp	x29, x30, [sp, #48]
   100003e00:	6d4223e9 	ldp	d9, d8, [sp, #32]
   100003e04:	910103ff 	add	sp, sp, #0x40
   100003e08:	d65f03c0 	ret

0000000100003e0c <_oklab_to_linear_srgb>:

inline
rgb_t oklab_to_linear_srgb(oklab_t c) {
   100003e0c:	529d9928 	mov	w8, #0xecc9                	// #60617
   100003e10:	72a7d948 	movk	w8, #0x3eca, lsl #16
   100003e14:	1e270103 	fmov	s3, w8
  float l_ = c.l + 0.3963377774f * c.a + 0.2158037573f * c.b;
   100003e18:	1f030023 	fmadd	s3, s1, s3, s0
   100003e1c:	529f7528 	mov	w8, #0xfba9                	// #64425
   100003e20:	72a7cb88 	movk	w8, #0x3e5c, lsl #16
   100003e24:	1e270104 	fmov	s4, w8
   100003e28:	1f040c43 	fmadd	s3, s2, s4, s3
   100003e2c:	d503201f 	nop
   100003e30:	5c01a644 	ldr	d4, 1000072f8 <__PromotedConst+0x48>
   100003e34:	d503201f 	nop
   100003e38:	5c01a645 	ldr	d5, 100007300 <__PromotedConst+0x50>
  float m_ = c.l - 0.1055613458f * c.a - 0.0638541728f * c.b;
   100003e3c:	0e040400 	dup	v0.2s, v0.s[0]
   100003e40:	0f8210a0 	fmla	v0.2s, v5.2s, v2.s[0]
   100003e44:	0f811080 	fmla	v0.2s, v4.2s, v1.s[0]
  float s_ = c.l - 0.0894841775f * c.a - 1.2914855480f * c.b;

  float l = l_*l_*l_;
   100003e48:	1e230861 	fmul	s1, s3, s3
   100003e4c:	1e230822 	fmul	s2, s1, s3
  float m = m_*m_*m_;
   100003e50:	2e20dc01 	fmul	v1.2s, v0.2s, v0.2s
   100003e54:	2e20dc23 	fmul	v3.2s, v1.2s, v0.2s
   100003e58:	528e9568 	mov	w8, #0x74ab                	// #29867
   100003e5c:	72a81048 	movk	w8, #0x4082, lsl #16
   100003e60:	1e270100 	fmov	s0, w8
   100003e64:	d503201f 	nop
   100003e68:	5c01a501 	ldr	d1, 100007308 <__PromotedConst+0x58>
   100003e6c:	2e21dc61 	fmul	v1.2s, v3.2s, v1.2s
  float s = s_*s_*s_;

  return (rgb_t) {
  	.r = +4.0767416621f * l - 3.3077115913f * m + 0.2309699292f * s,
   100003e70:	1f000440 	fmadd	s0, s2, s0, s1
   100003e74:	5e0c0421 	mov	s1, v1.s[1]
   100003e78:	1e212800 	fadd	s0, s0, s1
   100003e7c:	528b85a8 	mov	w8, #0x5c2d                	// #23597
   100003e80:	72b7f448 	movk	w8, #0xbfa2, lsl #16
   100003e84:	1e270101 	fmov	s1, w8
   100003e88:	d503201f 	nop
  	.g = -1.2684380046f * l + 2.6097574011f * m - 0.3413193965f * s,
   100003e8c:	5c01a424 	ldr	d4, 100007310 <__PromotedConst+0x60>
   100003e90:	2e24dc64 	fmul	v4.2s, v3.2s, v4.2s
   100003e94:	1f011041 	fmadd	s1, s2, s1, s4
   100003e98:	5e0c0484 	mov	s4, v4.s[1]
   100003e9c:	1e242821 	fadd	s1, s1, s4
   100003ea0:	528fea68 	mov	w8, #0x7f53                	// #32595
   100003ea4:	72b77128 	movk	w8, #0xbb89, lsl #16
   100003ea8:	1e270104 	fmov	s4, w8
   100003eac:	d503201f 	nop
   100003eb0:	5c01a345 	ldr	d5, 100007318 <__PromotedConst+0x68>
   100003eb4:	2e25dc63 	fmul	v3.2s, v3.2s, v5.2s
  	.b = -0.0041960863f * l - 0.7034186147f * m + 1.7076147010f * s
   100003eb8:	1f040c42 	fmadd	s2, s2, s4, s3
   100003ebc:	5e0c0463 	mov	s3, v3.s[1]
   100003ec0:	1e232842 	fadd	s2, s2, s3
  };
}
   100003ec4:	d65f03c0 	ret

0000000100003ec8 <_closest_color_index>:

inline
unsigned int closest_color_index(oklab_t color, oklab_t * colors, unsigned int num_colors) {
  float delta = FLT_MAX;
  unsigned int color_index = 0;
  for (int i = 0; i < num_colors; i++) {
   100003ec8:	34000321 	cbz	w1, 100003f2c <_closest_color_index+0x64>
   100003ecc:	aa0003e8 	mov	x8, x0
   100003ed0:	d2800009 	mov	x9, #0x0                   	// #0
   100003ed4:	52800000 	mov	w0, #0x0                   	// #0
   100003ed8:	2a0103ea 	mov	w10, w1
   100003edc:	91001108 	add	x8, x8, #0x4
   100003ee0:	12b0100b 	mov	w11, #0x7f7fffff            	// #2139095039
   100003ee4:	1e270163 	fmov	s3, w11
    float color_delta = delta_E(colors[i], color);
   100003ee8:	2d7f9504 	ldp	s4, s5, [x8, #-4]
  float delta_l = x.l - y.l;
   100003eec:	1e203884 	fsub	s4, s4, s0
   100003ef0:	bd400506 	ldr	s6, [x8, #4]
  float delta_a = x.a - y.a;
   100003ef4:	1e2138a5 	fsub	s5, s5, s1
  float delta_b = x.b - y.b;
   100003ef8:	1e2238c6 	fsub	s6, s6, s2
  float delta_E_OK = sqrtf(delta_l * delta_l + delta_c * delta_c + delta_h * delta_h);
   100003efc:	1e240884 	fmul	s4, s4, s4
  float delta_h = sqrtf(delta_a * delta_a + delta_b * delta_b - delta_c * delta_c);
   100003f00:	1f0510a4 	fmadd	s4, s5, s5, s4
  float delta_E_OK = sqrtf(delta_l * delta_l + delta_c * delta_c + delta_h * delta_h);
   100003f04:	1f0610c4 	fmadd	s4, s6, s6, s4
   100003f08:	1e21c084 	fsqrt	s4, s4
    if (color_delta < delta) {
   100003f0c:	1e232080 	fcmp	s4, s3
   100003f10:	1a80b120 	csel	w0, w9, w0, lt  // lt = tstop
   100003f14:	1e237883 	fminnm	s3, s4, s3
  for (int i = 0; i < num_colors; i++) {
   100003f18:	91000529 	add	x9, x9, #0x1
   100003f1c:	91003108 	add	x8, x8, #0xc
   100003f20:	eb09015f 	cmp	x10, x9
   100003f24:	54fffe21 	b.ne	100003ee8 <_closest_color_index+0x20>  // b.any
      delta = color_delta;
      color_index = i;
    }
  }
  return color_index;
   100003f28:	d65f03c0 	ret
   100003f2c:	52800000 	mov	w0, #0x0                   	// #0
   100003f30:	d65f03c0 	ret

0000000100003f34 <_normalize_SGVecOKLAB>:
}

inline
SGVecOKLAB_t normalize_SGVecOKLAB(SGVecOKLAB_t color) {
  SGVec ab_max = SGVec_Maximum(SGVec_Absolute(color.a), SGVec_Absolute(color.b));
   100003f34:	4ea0f823 	fabs	v3.4s, v1.4s
   100003f38:	4ea0f844 	fabs	v4.4s, v2.4s
   100003f3c:	4e24f463 	fmax	v3.4s, v3.4s, v4.4s
   100003f40:	52a85908 	mov	w8, #0x42c80000            	// #1120403456
  SGVecUInt out_of_range = SGVec_Gtr_Than(ab_max, SGVec_Load_Const(100.));
   100003f44:	4e040d04 	dup	v4.4s, w8
   100003f48:	5e0c0465 	mov	s5, v3.s[1]
   100003f4c:	1e270106 	fmov	s6, w8
   100003f50:	1e2620a0 	fcmp	s5, s6
   100003f54:	5a9fc3e8 	csetm	w8, le
   100003f58:	1e262060 	fcmp	s3, s6
   100003f5c:	5a9fc3e9 	csetm	w9, le
   100003f60:	1e270125 	fmov	s5, w9
   100003f64:	4e0c1d05 	mov	v5.s[1], w8
   100003f68:	5e140467 	mov	s7, v3.s[2]
   100003f6c:	1e2620e0 	fcmp	s7, s6
   100003f70:	5a9fc3e8 	csetm	w8, le
   100003f74:	4e141d05 	mov	v5.s[2], w8
   100003f78:	5e1c0467 	mov	s7, v3.s[3]
   100003f7c:	1e2620e0 	fcmp	s7, s6
   100003f80:	5a9fc3e8 	csetm	w8, le
   100003f84:	4e1c1d05 	mov	v5.s[3], w8
   100003f88:	6ea4e464 	fcmgt	v4.4s, v3.4s, v4.4s
   100003f8c:	529ae148 	mov	w8, #0xd70a                	// #55050
   100003f90:	72a78468 	movk	w8, #0x3c23, lsl #16
  SGVec ab_multiplier = SGVec_Ternary(out_of_range, SGVec_Reciprocal(SGVec_Mult_Float(ab_max, 0.01)), SGVec_Load_Const(1.));
   100003f94:	4e040d06 	dup	v6.4s, w8
   100003f98:	6e26dc63 	fmul	v3.4s, v3.4s, v6.4s
   100003f9c:	4ea1d863 	frecpe	v3.4s, v3.4s
   100003fa0:	4e241c63 	and	v3.16b, v3.16b, v4.16b
   100003fa4:	4f03f604 	fmov	v4.4s, #1.000000000000000000e+00
   100003fa8:	4e241ca5 	and	v5.16b, v5.16b, v4.16b
   100003fac:	4ea31ca3 	orr	v3.16b, v5.16b, v3.16b
  return SGVecShortUInt_Get_Lane(SGVecShortUInt_Fold_Max(x_2, x_2), 0) == 0;
}

inline
SGVec SGVec_Clamp(SGVec x, float min, float max) {
  return SGVec_Minimum(SGVec_Maximum(x, SGVec_Load_Const(min)), SGVec_Load_Const(max));
   100003fb0:	6f00e405 	movi	v5.2d, #0x0
   100003fb4:	4e25f400 	fmax	v0.4s, v0.4s, v5.4s
   100003fb8:	4ea4f400 	fmin	v0.4s, v0.4s, v4.4s

  return (SGVecOKLAB_t) {
    .l = SGVec_Clamp(color.l, 0., 1.),
    .a = SGVec_Mult_SGVec(color.a, ab_multiplier),
   100003fbc:	6e23dc21 	fmul	v1.4s, v1.4s, v3.4s
    .b = SGVec_Mult_SGVec(color.b, ab_multiplier)
   100003fc0:	6e23dc42 	fmul	v2.4s, v2.4s, v3.4s
  };
}
   100003fc4:	d65f03c0 	ret

0000000100003fc8 <_create_gradient>:
  return true;
}

inline
void create_gradient(oklab_t start, oklab_t end, unsigned int steps, unsigned int max_colors, oklab_t * color_storage, unsigned int * num_colors) {
  steps++;
   100003fc8:	11000409 	add	w9, w0, #0x1
  oklab_t delta = (oklab_t) {
    .l = (end.l - start.l) / (float) steps,
    .a = (end.a - start.a) / (float) steps,
    .b = (end.b - start.b) / (float) steps
  };
  for (int i = 1; i < steps; i++) {
   100003fcc:	7100093f 	cmp	w9, #0x2
   100003fd0:	540003c3 	b.cc	100004048 <_create_gradient+0x80>  // b.lo, b.ul, b.last
   100003fd4:	52800008 	mov	w8, #0x0                   	// #0
   100003fd8:	1e230126 	ucvtf	s6, w9
   100003fdc:	6e0c0483 	mov	v3.s[1], v4.s[0]
   100003fe0:	6e0c0420 	mov	v0.s[1], v1.s[0]
   100003fe4:	0ea0d461 	fsub	v1.2s, v3.2s, v0.2s
   100003fe8:	1e2238a3 	fsub	s3, s5, s2
   100003fec:	1e2e1004 	fmov	s4, #1.000000000000000000e+00
   100003ff0:	1e261884 	fdiv	s4, s4, s6
   100003ff4:	0e0404c5 	dup	v5.2s, v6.s[0]
   100003ff8:	0f03f606 	fmov	v6.2s, #1.000000000000000000e+00
   100003ffc:	2e25fcc5 	fdiv	v5.2s, v6.2s, v5.2s
   100004000:	52800189 	mov	w9, #0xc                   	// #12
  if(*num_colors >= max_colors) return false;
   100004004:	b940006a 	ldr	w10, [x3]
   100004008:	6b01015f 	cmp	w10, w1
   10000400c:	540001e2 	b.cs	100004048 <_create_gradient+0x80>  // b.hs, b.nlast
   100004010:	11000508 	add	w8, w8, #0x1
   100004014:	1e220106 	scvtf	s6, w8
    if (!install_color((oklab_t) {
      .l = start.l + delta.l * i,
      .a = start.a + delta.a * i,
      .b = start.b + delta.b * i,
   100004018:	1e260867 	fmul	s7, s3, s6
   10000401c:	1f0408e7 	fmadd	s7, s7, s4, s2
      .l = start.l + delta.l * i,
   100004020:	0f869026 	fmul	v6.2s, v1.2s, v6.s[0]
   100004024:	4ea01c10 	mov	v16.16b, v0.16b
   100004028:	0e25ccd0 	fmla	v16.2s, v6.2s, v5.2s
  color_storage[(*num_colors)++] = color;
   10000402c:	1100054b 	add	w11, w10, #0x1
   100004030:	b900006b 	str	w11, [x3]
   100004034:	9b09094a 	madd	x10, x10, x9, x2
   100004038:	fd000150 	str	d16, [x10]
   10000403c:	bd000947 	str	s7, [x10, #8]
  for (int i = 1; i < steps; i++) {
   100004040:	6b08001f 	cmp	w0, w8
   100004044:	54fffe01 	b.ne	100004004 <_create_gradient+0x3c>  // b.any
    }, max_colors, color_storage, num_colors)) break;
  }
}
   100004048:	d65f03c0 	ret

000000010000404c <_install_color>:
  if(*num_colors >= max_colors) return false;
   10000404c:	b9400048 	ldr	w8, [x2]
   100004050:	6b00011f 	cmp	w8, w0
   100004054:	540000e2 	b.cs	100004070 <_install_color+0x24>  // b.hs, b.nlast
  color_storage[(*num_colors)++] = color;
   100004058:	11000509 	add	w9, w8, #0x1
   10000405c:	b9000049 	str	w9, [x2]
   100004060:	52800189 	mov	w9, #0xc                   	// #12
   100004064:	9b090509 	madd	x9, x8, x9, x1
   100004068:	2d000520 	stp	s0, s1, [x9]
   10000406c:	bd000922 	str	s2, [x9, #8]
  if(*num_colors >= max_colors) return false;
   100004070:	6b00011f 	cmp	w8, w0
   100004074:	1a9f27e0 	cset	w0, cc  // cc = lo, ul, last
}
   100004078:	d65f03c0 	ret

000000010000407c <_main>:
#include <locale.h>

#include "../ssh/ssh_daemon.h"
#include "../world_db/world_db.h"

int main() {
   10000407c:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   100004080:	910003fd 	mov	x29, sp
  setlocale(LC_ALL, "");
   100004084:	5001ccc1 	adr	x1, 100007a1e <__PromotedConst.1+0x5fe>
   100004088:	d503201f 	nop
   10000408c:	52800000 	mov	w0, #0x0                   	// #0
   100004090:	94000c3d 	bl	100007184 <_request_snapshot+0x67c>
  start_world_db();
   100004094:	94000988 	bl	1000066b4 <_start_world_db>
  ssh_daemon();
   100004098:	940007ea 	bl	100006040 <_ssh_daemon>
  return EXIT_FAILURE;
   10000409c:	52800020 	mov	w0, #0x1                   	// #1
   1000040a0:	a8c17bfd 	ldp	x29, x30, [sp], #16
   1000040a4:	d65f03c0 	ret

00000001000040a8 <_rot_vec3d>:
SGVec3D_t;

inline
SGVec3D_t rot_vec3d(SGVec rots_sin, SGVec rots_cos, SGVec3D_t axis, SGVec3D_t p) {
  //Q
  SGVec q_x = SGVec_Mult_SGVec(axis.x, rots_sin);
   1000040a8:	6e20dc50 	fmul	v16.4s, v2.4s, v0.4s
  SGVec q_y = SGVec_Mult_SGVec(axis.y, rots_sin);
   1000040ac:	6e20dc71 	fmul	v17.4s, v3.4s, v0.4s
  SGVec q_z = SGVec_Mult_SGVec(axis.z, rots_sin);
   1000040b0:	6e20dc84 	fmul	v4.4s, v4.4s, v0.4s
  SGVec qXp_y_1 = SGVec_Mult_SGVec(p.y, q_s);
  SGVec qXp_z_1 = SGVec_Mult_SGVec(p.z, q_s);

  //qXp_[xyz]_2 is 0 since p_s = 0

  SGVec qXp_x_3 = SGVec_Sub_SGVec(
   1000040b4:	6e31dcf2 	fmul	v18.4s, v7.4s, v17.4s
   1000040b8:	4ea4ccd2 	fmls	v18.4s, v6.4s, v4.4s
                    SGVec_Mult_SGVec(q_y, p.z),
                    SGVec_Mult_SGVec(q_z, p.y)
                  );
  SGVec qXp_y_3 = SGVec_Sub_SGVec(
   1000040bc:	6e24dcb3 	fmul	v19.4s, v5.4s, v4.4s
   1000040c0:	4eb0ccf3 	fmls	v19.4s, v7.4s, v16.4s
                    SGVec_Mult_SGVec(q_z, p.x),
                    SGVec_Mult_SGVec(q_x, p.z)
                  );
  SGVec qXp_z_3 = SGVec_Sub_SGVec(
   1000040c4:	6e30dcd4 	fmul	v20.4s, v6.4s, v16.4s
   1000040c8:	4eb1ccb4 	fmls	v20.4s, v5.4s, v17.4s
                    SGVec_Mult_SGVec(q_x, p.y),
                    SGVec_Mult_SGVec(q_y, p.x)
                  );

  SGVec qXp_x = SGVec_Add_SGVec(qXp_x_1, qXp_x_3);
   1000040cc:	4e21ccb2 	fmla	v18.4s, v5.4s, v1.4s
  SGVec qXp_y = SGVec_Add_SGVec(qXp_y_1, qXp_y_3);
   1000040d0:	4e21ccd3 	fmla	v19.4s, v6.4s, v1.4s
  SGVec qXp_z = SGVec_Add_SGVec(qXp_z_1, qXp_z_3);
   1000040d4:	4e21ccf4 	fmla	v20.4s, v7.4s, v1.4s
  SGVec qXp_s = SGVec_Negate(
   1000040d8:	6e30dca5 	fmul	v5.4s, v5.4s, v16.4s
   1000040dc:	4e31ccc5 	fmla	v5.4s, v6.4s, v17.4s
   1000040e0:	4e24cce5 	fmla	v5.4s, v7.4s, v4.4s

  SGVec qXpXnq_x_2 = SGVec_Mult_SGVec(qXp_x, q_s);
  SGVec qXpXnq_y_2 = SGVec_Mult_SGVec(qXp_y, q_s);
  SGVec qXpXnq_z_2 = SGVec_Mult_SGVec(qXp_z, q_s);

  SGVec qXpXnq_x_3 = SGVec_Sub_SGVec(
   1000040e4:	6e31de80 	fmul	v0.4s, v20.4s, v17.4s
                       SGVec_Mult_SGVec(qXp_y, nq_z),
                       SGVec_Mult_SGVec(qXp_z, nq_y)
                     );
  SGVec qXpXnq_y_3 = SGVec_Sub_SGVec(
   1000040e8:	6e24de43 	fmul	v3.4s, v18.4s, v4.4s
                       SGVec_Mult_SGVec(qXp_z, nq_x),
                       SGVec_Mult_SGVec(qXp_x, nq_z)
                     );
  SGVec qXpXnq_z_3 = SGVec_Sub_SGVec(
   1000040ec:	6e30de62 	fmul	v2.4s, v19.4s, v16.4s
                       SGVec_Mult_SGVec(qXp_x, nq_y),
                       SGVec_Mult_SGVec(qXp_y, nq_x)
                     );

  SGVec r_x = SGVec_Add_SGVec(
   1000040f0:	4e30cca0 	fmla	v0.4s, v5.4s, v16.4s
  SGVec qXpXnq_x_3 = SGVec_Sub_SGVec(
   1000040f4:	4e21ce40 	fmla	v0.4s, v18.4s, v1.4s
  SGVec r_x = SGVec_Add_SGVec(
   1000040f8:	4eb3cc80 	fmls	v0.4s, v4.4s, v19.4s
                  qXpXnq_x_1,
                  qXpXnq_x_2
                ),
                qXpXnq_x_3
              );
  SGVec r_y = SGVec_Add_SGVec(
   1000040fc:	4e31cca3 	fmla	v3.4s, v5.4s, v17.4s
  SGVec qXpXnq_y_3 = SGVec_Sub_SGVec(
   100004100:	4e21ce63 	fmla	v3.4s, v19.4s, v1.4s
  SGVec r_y = SGVec_Add_SGVec(
   100004104:	4eb4ce03 	fmls	v3.4s, v16.4s, v20.4s
                  qXpXnq_y_1,
                  qXpXnq_y_2
                ),
                qXpXnq_y_3
              );
  SGVec r_z = SGVec_Add_SGVec(
   100004108:	4e24cca2 	fmla	v2.4s, v5.4s, v4.4s
  SGVec qXpXnq_z_3 = SGVec_Sub_SGVec(
   10000410c:	4e21ce82 	fmla	v2.4s, v20.4s, v1.4s
  SGVec r_z = SGVec_Add_SGVec(
   100004110:	4eb2ce22 	fmls	v2.4s, v17.4s, v18.4s
  return (SGVec3D_t) {
    .x = r_x,
    .y = r_y,
    .z = r_z
  };
}
   100004114:	4ea31c61 	mov	v1.16b, v3.16b
   100004118:	d65f03c0 	ret

000000010000411c <_SGVec3D_distance>:

inline
SGVec SGVec3D_distance(SGVec3D_t a, SGVec3D_t b) {
  SGVec3D_t a2b = (SGVec3D_t) {
    .x = SGVec_Sub_SGVec(b.x, a.x),
   10000411c:	4ea0d460 	fsub	v0.4s, v3.4s, v0.4s
    .y = SGVec_Sub_SGVec(b.y, a.y),
   100004120:	4ea1d481 	fsub	v1.4s, v4.4s, v1.4s
    .z = SGVec_Sub_SGVec(b.z, a.z)
   100004124:	4ea2d4a2 	fsub	v2.4s, v5.4s, v2.4s
  };
  SGVec dist2 = SGVec_Add_Mult_SGVec(
   100004128:	6e20dc00 	fmul	v0.4s, v0.4s, v0.4s
   10000412c:	6e21dc21 	fmul	v1.4s, v1.4s, v1.4s
   100004130:	4e20d420 	fadd	v0.4s, v1.4s, v0.4s
   100004134:	6e22dc41 	fmul	v1.4s, v2.4s, v2.4s
   100004138:	4e21d400 	fadd	v0.4s, v0.4s, v1.4s
    ),
    a2b.z,
    a2b.z
  );

  return SGVec_Reciprocal(SGVec_Recip_Sqrt(dist2));
   10000413c:	6ea1d800 	frsqrte	v0.4s, v0.4s
   100004140:	4ea1d800 	frecpe	v0.4s, v0.4s
   100004144:	d65f03c0 	ret

0000000100004148 <_nblessings_header_data>:
unsigned char nblessings_header[NBLESSINGS_HEADER_SIZE] = {
  START_ALTERNATE_BUFFER,
  CLEAR_SCREEN
};

unsigned char * nblessings_header_data(oklab_t * colors, unsigned int num_colors, unsigned int * header_len) {
   100004148:	d10203ff 	sub	sp, sp, #0x80
   10000414c:	a9026ffc 	stp	x28, x27, [sp, #32]
   100004150:	a90367fa 	stp	x26, x25, [sp, #48]
   100004154:	a9045ff8 	stp	x24, x23, [sp, #64]
   100004158:	a90557f6 	stp	x22, x21, [sp, #80]
   10000415c:	a9064ff4 	stp	x20, x19, [sp, #96]
   100004160:	a9077bfd 	stp	x29, x30, [sp, #112]
   100004164:	9101c3fd 	add	x29, sp, #0x70
   100004168:	d503201f 	nop
   10000416c:	5801f568 	ldr	x8, 100008018 <__PromotedConst.1+0xbf8>
   100004170:	f9400108 	ldr	x8, [x8]
   100004174:	f9000fe8 	str	x8, [sp, #24]
  for(size_t i = 0; i < num_colors; i++) {
   100004178:	340012c1 	cbz	w1, 1000043d0 <_nblessings_header_data+0x288>
   10000417c:	d2800008 	mov	x8, #0x0                   	// #0
   100004180:	2a0103e9 	mov	w9, w1
   100004184:	9100100a 	add	x10, x0, #0x4
   100004188:	d29eb86b 	mov	x11, #0xf5c3                	// #62915
   10000418c:	f2ab850b 	movk	x11, #0x5c28, lsl #16
   100004190:	f2d851eb 	movk	x11, #0xc28f, lsl #32
   100004194:	f2e51eab 	movk	x11, #0x28f5, lsl #48
   100004198:	12800c6c 	mov	w12, #0xffffff9c            	// #-100
   10000419c:	b202e7ed 	mov	x13, #0xcccccccccccccccc    	// #-3689348814741910324
   1000041a0:	f29999ad 	movk	x13, #0xcccd
   1000041a4:	1280012e 	mov	w14, #0xfffffff6            	// #-10
   1000041a8:	529d992f 	mov	w15, #0xecc9                	// #60617
   1000041ac:	72a7d94f 	movk	w15, #0x3eca, lsl #16
   1000041b0:	529f7530 	mov	w16, #0xfba9                	// #64425
   1000041b4:	72a7cb90 	movk	w16, #0x3e5c, lsl #16
   1000041b8:	d503201f 	nop
   1000041bc:	5c0189e0 	ldr	d0, 1000072f8 <__PromotedConst+0x48>
   1000041c0:	d503201f 	nop
   1000041c4:	5c0189e1 	ldr	d1, 100007300 <__PromotedConst+0x50>
   1000041c8:	528e9571 	mov	w17, #0x74ab                	// #29867
   1000041cc:	72a81051 	movk	w17, #0x4082, lsl #16
   1000041d0:	d503201f 	nop
   1000041d4:	5c0189a2 	ldr	d2, 100007308 <__PromotedConst+0x58>
   1000041d8:	528b85a0 	mov	w0, #0x5c2d                	// #23597
   1000041dc:	72b7f440 	movk	w0, #0xbfa2, lsl #16
   1000041e0:	d503201f 	nop
   1000041e4:	5c018963 	ldr	d3, 100007310 <__PromotedConst+0x60>
   1000041e8:	528fea63 	mov	w3, #0x7f53                	// #32595
   1000041ec:	72b77123 	movk	w3, #0xbb89, lsl #16
   1000041f0:	d503201f 	nop
   1000041f4:	5c018924 	ldr	d4, 100007318 <__PromotedConst+0x68>
   1000041f8:	52a86fe4 	mov	w4, #0x437f0000            	// #1132396544
   1000041fc:	528ba365 	mov	w5, #0x5d1b                	// #23835
   100004200:	72a76685 	movk	w5, #0x3b34, lsl #16
   100004204:	528019a6 	mov	w6, #0xcd                  	// #205
   100004208:	528e4767 	mov	w7, #0x723b                	// #29243
   10000420c:	72ac4ce7 	movk	w7, #0x6267, lsl #16
   100004210:	52800753 	mov	w19, #0x3a                  	// #58
   100004214:	528005f4 	mov	w20, #0x2f                  	// #47
   100004218:	528b8375 	mov	w21, #0x5c1b                	// #23579
   10000421c:	1003ef96 	adr	x22, 10000c00c <_nblessings_header+0xc>
   100004220:	d503201f 	nop
    rgb_t rgb = denormalize_rgb(oklab_to_linear_srgb(colors[i]));
   100004224:	d342fd17 	lsr	x23, x8, #2
   100004228:	9bcd7d18 	umulh	x24, x8, x13
   10000422c:	2d7f9945 	ldp	s5, s6, [x10, #-4]
   100004230:	9bcb7ef7 	umulh	x23, x23, x11
   100004234:	bd400547 	ldr	s7, [x10, #4]
   100004238:	1e2701f0 	fmov	s16, w15
  };
}

inline
rgb_t oklab_to_linear_srgb(oklab_t c) {
  float l_ = c.l + 0.3963377774f * c.a + 0.2158037573f * c.b;
   10000423c:	1f1014d0 	fmadd	s16, s6, s16, s5
   100004240:	1e270211 	fmov	s17, w16
   100004244:	1f1140f0 	fmadd	s16, s7, s17, s16
  float m_ = c.l - 0.1055613458f * c.a - 0.0638541728f * c.b;
   100004248:	0e0404a5 	dup	v5.2s, v5.s[0]
   10000424c:	0f871025 	fmla	v5.2s, v1.2s, v7.s[0]
   100004250:	0f861005 	fmla	v5.2s, v0.2s, v6.s[0]
  float s_ = c.l - 0.0894841775f * c.a - 1.2914855480f * c.b;

  float l = l_*l_*l_;
   100004254:	1e300a06 	fmul	s6, s16, s16
   100004258:	1e3008c6 	fmul	s6, s6, s16
  float m = m_*m_*m_;
   10000425c:	2e25dca7 	fmul	v7.2s, v5.2s, v5.2s
   100004260:	2e25dce5 	fmul	v5.2s, v7.2s, v5.2s
   100004264:	1e270227 	fmov	s7, w17
   100004268:	2e22dcb0 	fmul	v16.2s, v5.2s, v2.2s
  float s = s_*s_*s_;

  return (rgb_t) {
  	.r = +4.0767416621f * l - 3.3077115913f * m + 0.2309699292f * s,
   10000426c:	1f0740c7 	fmadd	s7, s6, s7, s16
   100004270:	5e0c0610 	mov	s16, v16.s[1]
   100004274:	1e3028e7 	fadd	s7, s7, s16
   100004278:	1e270010 	fmov	s16, w0
  	.g = -1.2684380046f * l + 2.6097574011f * m - 0.3413193965f * s,
   10000427c:	2e23dcb1 	fmul	v17.2s, v5.2s, v3.2s
   100004280:	1f1044d0 	fmadd	s16, s6, s16, s17
   100004284:	5e0c0631 	mov	s17, v17.s[1]
   100004288:	1e312a10 	fadd	s16, s16, s17
   10000428c:	1e270071 	fmov	s17, w3
   100004290:	2e24dca5 	fmul	v5.2s, v5.2s, v4.2s
  	.b = -0.0041960863f * l - 0.7034186147f * m + 1.7076147010f * s
   100004294:	1f1114c6 	fmadd	s6, s6, s17, s5
   100004298:	5e0c04a5 	mov	s5, v5.s[1]
   10000429c:	1e2528c5 	fadd	s5, s6, s5
   1000042a0:	d342fef7 	lsr	x23, x23, #2
   1000042a4:	1e270086 	fmov	s6, w4
    .r = rgb.r * (float) 255.,
   1000042a8:	1e2608e7 	fmul	s7, s7, s6
    .g = rgb.g * (float) 255.,
   1000042ac:	1e260a10 	fmul	s16, s16, s6
    .b = rgb.b * (float) 255.
   1000042b0:	1e2608a5 	fmul	s5, s5, s6
    memcpy(nblessings_header + START_ALTERNATE_BUFFER_SIZE + CLEAR_SCREEN_SIZE + i * LOAD_COLOR_SIZE, (unsigned char[]){LOAD_COLOR(i, rgb.r, rgb.g, rgb.b)}, LOAD_COLOR_SIZE * sizeof(unsigned char));
   1000042b4:	b80023e5 	stur	w5, [sp, #2]
    rgb_t rgb = denormalize_rgb(oklab_to_linear_srgb(colors[i]));
   1000042b8:	d3437f18 	ubfx	x24, x24, #3, #29
    memcpy(nblessings_header + START_ALTERNATE_BUFFER_SIZE + CLEAR_SCREEN_SIZE + i * LOAD_COLOR_SIZE, (unsigned char[]){LOAD_COLOR(i, rgb.r, rgb.g, rgb.b)}, LOAD_COLOR_SIZE * sizeof(unsigned char));
   1000042bc:	1100c2f9 	add	w25, w23, #0x30
   1000042c0:	39001bf9 	strb	w25, [sp, #6]
   1000042c4:	1b0c22f7 	madd	w23, w23, w12, w8
   1000042c8:	12001ef7 	and	w23, w23, #0xff
   1000042cc:	1b067ef7 	mul	w23, w23, w6
   1000042d0:	530b7ef7 	lsr	w23, w23, #11
   1000042d4:	321c06f7 	orr	w23, w23, #0x30
   1000042d8:	1b0e2318 	madd	w24, w24, w14, w8
   1000042dc:	321c0718 	orr	w24, w24, #0x30
   1000042e0:	390023f8 	strb	w24, [sp, #8]
   1000042e4:	b80093e7 	stur	w7, [sp, #9]
   1000042e8:	39001ff7 	strb	w23, [sp, #7]
   1000042ec:	390037f3 	strb	w19, [sp, #13]
   1000042f0:	1e2400f7 	fcvtas	w23, s7
   1000042f4:	53041ef8 	ubfx	w24, w23, #4, #4
   1000042f8:	52800619 	mov	w25, #0x30                  	// #48
   1000042fc:	1100df1a 	add	w26, w24, #0x37
   100004300:	33041ef9 	bfxil	w25, w23, #4, #4
   100004304:	12000efb 	and	w27, w23, #0xf
   100004308:	1100df7c 	add	w28, w27, #0x37
   10000430c:	5280061e 	mov	w30, #0x30                  	// #48
   100004310:	7100271f 	cmp	w24, #0x9
   100004314:	1a998358 	csel	w24, w26, w25, hi  // hi = pmore
   100004318:	33000efe 	bfxil	w30, w23, #0, #4
   10000431c:	390043f4 	strb	w20, [sp, #16]
   100004320:	1e240217 	fcvtas	w23, s16
   100004324:	7100277f 	cmp	w27, #0x9
   100004328:	1a9e8399 	csel	w25, w28, w30, hi  // hi = pmore
   10000432c:	53041efa 	ubfx	w26, w23, #4, #4
   100004330:	1100df5b 	add	w27, w26, #0x37
   100004334:	5280061c 	mov	w28, #0x30                  	// #48
   100004338:	33041efc 	bfxil	w28, w23, #4, #4
   10000433c:	7100275f 	cmp	w26, #0x9
   100004340:	39003bf8 	strb	w24, [sp, #14]
   100004344:	1a9c8378 	csel	w24, w27, w28, hi  // hi = pmore
   100004348:	12000efa 	and	w26, w23, #0xf
   10000434c:	5280061b 	mov	w27, #0x30                  	// #48
   100004350:	33000efb 	bfxil	w27, w23, #0, #4
   100004354:	1100df57 	add	w23, w26, #0x37
   100004358:	39003ff9 	strb	w25, [sp, #15]
   10000435c:	7100275f 	cmp	w26, #0x9
   100004360:	1a9b82f7 	csel	w23, w23, w27, hi  // hi = pmore
   100004364:	39004ff4 	strb	w20, [sp, #19]
   100004368:	1e2400b9 	fcvtas	w25, s5
   10000436c:	390047f8 	strb	w24, [sp, #17]
   100004370:	53041f38 	ubfx	w24, w25, #4, #4
   100004374:	1100df1a 	add	w26, w24, #0x37
   100004378:	5280061b 	mov	w27, #0x30                  	// #48
   10000437c:	33041f3b 	bfxil	w27, w25, #4, #4
   100004380:	7100271f 	cmp	w24, #0x9
   100004384:	39004bf7 	strb	w23, [sp, #18]
   100004388:	1a9b8357 	csel	w23, w26, w27, hi  // hi = pmore
   10000438c:	12000f38 	and	w24, w25, #0xf
   100004390:	5280061a 	mov	w26, #0x30                  	// #48
   100004394:	33000f3a 	bfxil	w26, w25, #0, #4
   100004398:	1100df19 	add	w25, w24, #0x37
   10000439c:	390053f7 	strb	w23, [sp, #20]
   1000043a0:	7100271f 	cmp	w24, #0x9
   1000043a4:	1a9a8337 	csel	w23, w25, w26, hi  // hi = pmore
   1000043a8:	390057f7 	strb	w23, [sp, #21]
   1000043ac:	79002ff5 	strh	w21, [sp, #22]
   1000043b0:	3cc023e5 	ldur	q5, [sp, #2]
   1000043b4:	f84103f7 	ldur	x23, [sp, #16]
   1000043b8:	f800e2d7 	stur	x23, [x22, #14]
   1000043bc:	3c8166c5 	str	q5, [x22], #22
  for(size_t i = 0; i < num_colors; i++) {
   1000043c0:	91000508 	add	x8, x8, #0x1
   1000043c4:	9100314a 	add	x10, x10, #0xc
   1000043c8:	eb08013f 	cmp	x9, x8
   1000043cc:	54fff2c1 	b.ne	100004224 <_nblessings_header_data+0xdc>  // b.any
   1000043d0:	528002c8 	mov	w8, #0x16                  	// #22
  }
  nblessings_header[START_ALTERNATE_BUFFER_SIZE + CLEAR_SCREEN_SIZE + num_colors * LOAD_COLOR_SIZE] = '\0';
   1000043d4:	1b087c28 	mul	w8, w1, w8
   1000043d8:	11003109 	add	w9, w8, #0xc
   1000043dc:	1003e120 	adr	x0, 10000c000 <_nblessings_header>
   1000043e0:	d503201f 	nop
   1000043e4:	3829481f 	strb	wzr, [x0, w9, uxtw]

  *header_len = START_ALTERNATE_BUFFER_SIZE + CLEAR_SCREEN_SIZE + num_colors * LOAD_COLOR_SIZE + 1;
   1000043e8:	11003508 	add	w8, w8, #0xd
   1000043ec:	b9000048 	str	w8, [x2]
   1000043f0:	f9400fe8 	ldr	x8, [sp, #24]
   1000043f4:	d503201f 	nop
   1000043f8:	5801e109 	ldr	x9, 100008018 <__PromotedConst.1+0xbf8>
   1000043fc:	f9400129 	ldr	x9, [x9]
   100004400:	eb08013f 	cmp	x9, x8
   100004404:	54000121 	b.ne	100004428 <_nblessings_header_data+0x2e0>  // b.any

  return nblessings_header;
   100004408:	a9477bfd 	ldp	x29, x30, [sp, #112]
   10000440c:	a9464ff4 	ldp	x20, x19, [sp, #96]
   100004410:	a94557f6 	ldp	x22, x21, [sp, #80]
   100004414:	a9445ff8 	ldp	x24, x23, [sp, #64]
   100004418:	a94367fa 	ldp	x26, x25, [sp, #48]
   10000441c:	a9426ffc 	ldp	x28, x27, [sp, #32]
   100004420:	910203ff 	add	sp, sp, #0x80
   100004424:	d65f03c0 	ret
   100004428:	94000b12 	bl	100007070 <_request_snapshot+0x568>

000000010000442c <_nblessings_footer_data>:
}

unsigned char * nblessings_footer_data(unsigned int * footer_len) {
 return NULL;
   10000442c:	d2800000 	mov	x0, #0x0                   	// #0
   100004430:	d65f03c0 	ret

0000000100004434 <_rasterize_frame>:
}

unsigned int rasterize_frame(pixel_t * pixels, unsigned int num_pixels, unsigned char * buffer) {
   100004434:	d10283ff 	sub	sp, sp, #0xa0
   100004438:	a90567fa 	stp	x26, x25, [sp, #80]
   10000443c:	a9065ff8 	stp	x24, x23, [sp, #96]
   100004440:	a90757f6 	stp	x22, x21, [sp, #112]
   100004444:	a9084ff4 	stp	x20, x19, [sp, #128]
   100004448:	a9097bfd 	stp	x29, x30, [sp, #144]
   10000444c:	910243fd 	add	x29, sp, #0x90
   100004450:	d503201f 	nop
   100004454:	5801de28 	ldr	x8, 100008018 <__PromotedConst.1+0xbf8>
   100004458:	f9400108 	ldr	x8, [x8]
   10000445c:	f90027e8 	str	x8, [sp, #72]
   100004460:	528b6368 	mov	w8, #0x5b1b                	// #23323
   100004464:	72a94648 	movk	w8, #0x4a32, lsl #16
  unsigned int i = 0;
  memcpy(buffer + i, (unsigned char[]) {CLEAR_SCREEN}, CLEAR_SCREEN_SIZE);
   100004468:	b90027e8 	str	w8, [sp, #36]
   10000446c:	b9000048 	str	w8, [x2]
  i += CLEAR_SCREEN_SIZE;
  unsigned int fore_color = pixels[0].fore;
   100004470:	29400c0f 	ldp	w15, w3, [x0]
   100004474:	528b6368 	mov	w8, #0x5b1b                	// #23323
   100004478:	72a70668 	movk	w8, #0x3833, lsl #16
  unsigned int back_color = pixels[0].back;
  memcpy(buffer + i, (unsigned char[]) {CSI, APPLY_FORE(fore_color), ';', APPLY_BACK(back_color), 'm'}, 20);
   10000447c:	b90037e8 	str	w8, [sp, #52]
   100004480:	5286a768 	mov	w8, #0x353b                	// #13627
   100004484:	790073e8 	strh	w8, [sp, #56]
   100004488:	52800769 	mov	w9, #0x3b                  	// #59
   10000448c:	3900ebe9 	strb	w9, [sp, #58]
   100004490:	5290a3ea 	mov	w10, #0x851f                	// #34079
   100004494:	72aa3d6a 	movk	w10, #0x51eb, lsl #16
   100004498:	9baa7deb 	umull	x11, w15, w10
   10000449c:	d365fd6c 	lsr	x12, x11, #37
   1000044a0:	1100c18b 	add	w11, w12, #0x30
   1000044a4:	3900efeb 	strb	w11, [sp, #59]
   1000044a8:	52800c8b 	mov	w11, #0x64                  	// #100
   1000044ac:	1b0bbd8c 	msub	w12, w12, w11, w15
   1000044b0:	12001d8d 	and	w13, w12, #0xff
   1000044b4:	528019ac 	mov	w12, #0xcd                  	// #205
   1000044b8:	1b0c7dad 	mul	w13, w13, w12
   1000044bc:	530b7dad 	lsr	w13, w13, #11
   1000044c0:	321c05ad 	orr	w13, w13, #0x30
   1000044c4:	3900f3ed 	strb	w13, [sp, #60]
   1000044c8:	529999ad 	mov	w13, #0xcccd                	// #52429
   1000044cc:	72b9998d 	movk	w13, #0xcccc, lsl #16
   1000044d0:	9b0d7dee 	mul	x14, x15, x13
   1000044d4:	d363fdd0 	lsr	x16, x14, #35
   1000044d8:	5280014e 	mov	w14, #0xa                   	// #10
   1000044dc:	1b0ebe10 	msub	w16, w16, w14, w15
   1000044e0:	321c0610 	orr	w16, w16, #0x30
   1000044e4:	3900f7f0 	strb	w16, [sp, #61]
   1000044e8:	52868770 	mov	w16, #0x343b                	// #13371
   1000044ec:	72a76710 	movk	w16, #0x3b38, lsl #16
   1000044f0:	b803e3f0 	stur	w16, [sp, #62]
   1000044f4:	528766b0 	mov	w16, #0x3b35                	// #15157
   1000044f8:	790087f0 	strh	w16, [sp, #66]
   1000044fc:	9baa7c70 	umull	x16, w3, w10
   100004500:	d365fe10 	lsr	x16, x16, #37
   100004504:	1100c211 	add	w17, w16, #0x30
   100004508:	390113f1 	strb	w17, [sp, #68]
   10000450c:	1b0b8e10 	msub	w16, w16, w11, w3
   100004510:	12001e10 	and	w16, w16, #0xff
   100004514:	1b0c7e10 	mul	w16, w16, w12
   100004518:	530b7e10 	lsr	w16, w16, #11
   10000451c:	321c0610 	orr	w16, w16, #0x30
   100004520:	390117f0 	strb	w16, [sp, #69]
   100004524:	9b0d7c70 	mul	x16, x3, x13
   100004528:	d363fe10 	lsr	x16, x16, #35
   10000452c:	1b0e8e10 	msub	w16, w16, w14, w3
   100004530:	321c0610 	orr	w16, w16, #0x30
   100004534:	39011bf0 	strb	w16, [sp, #70]
   100004538:	52800db0 	mov	w16, #0x6d                  	// #109
   10000453c:	39011ff0 	strb	w16, [sp, #71]
   100004540:	3cc343e0 	ldur	q0, [sp, #52]
   100004544:	3c804040 	stur	q0, [x2, #4]
   100004548:	b94047f1 	ldr	w17, [sp, #68]
   10000454c:	b9001451 	str	w17, [x2, #20]
  i += 20;

  for(size_t p_i = 0; p_i < num_pixels; p_i++) {
   100004550:	34001021 	cbz	w1, 100004754 <_rasterize_frame+0x320>
   100004554:	2a0103f1 	mov	w17, w1
   100004558:	91001000 	add	x0, x0, #0x4
   10000455c:	52800315 	mov	w21, #0x18                  	// #24
   100004560:	52800401 	mov	w1, #0x20                  	// #32
   100004564:	528b6364 	mov	w4, #0x5b1b                	// #23323
   100004568:	72a70684 	movk	w4, #0x3834, lsl #16
   10000456c:	528b6365 	mov	w5, #0x5b1b                	// #23323
   100004570:	52870686 	mov	w6, #0x3834                	// #14388
   100004574:	72a6a766 	movk	w6, #0x353b, lsl #16
   100004578:	52870667 	mov	w7, #0x3833                	// #14387
   10000457c:	72a6a767 	movk	w7, #0x353b, lsl #16
   100004580:	5292dc53 	mov	w19, #0x96e2                	// #38626
   100004584:	10016cf4 	adr	x20, 100007320 <_pixel_selector_byte>
   100004588:	d503201f 	nop
   10000458c:	14000026 	b	100004624 <_rasterize_frame+0x1f0>
        adsfg = 1;
      }

      if(pixels[p_i].back != back_color) {
        if (adsfg) {
          memcpy(buffer + i, (unsigned char[]) {';'}, 1);
   100004590:	38374849 	strb	w9, [x2, w23, uxtw]
          i += 1;
   100004594:	11002eb7 	add	w23, w21, #0xb
        }
        back_color = pixels[p_i].back;
   100004598:	b9400015 	ldr	w21, [x0]
   10000459c:	aa1803ef 	mov	x15, x24
        memcpy(buffer + i, (unsigned char[]) {APPLY_BACK(back_color)}, 8);
   1000045a0:	b90013e6 	str	w6, [sp, #16]
   1000045a4:	390053e9 	strb	w9, [sp, #20]
   1000045a8:	9baa7ea3 	umull	x3, w21, w10
   1000045ac:	d365fc63 	lsr	x3, x3, #37
   1000045b0:	1100c078 	add	w24, w3, #0x30
   1000045b4:	390057f8 	strb	w24, [sp, #21]
   1000045b8:	1b0bd463 	msub	w3, w3, w11, w21
   1000045bc:	12001c63 	and	w3, w3, #0xff
   1000045c0:	1b0c7c63 	mul	w3, w3, w12
   1000045c4:	530b7c63 	lsr	w3, w3, #11
   1000045c8:	321c0463 	orr	w3, w3, #0x30
   1000045cc:	39005be3 	strb	w3, [sp, #22]
   1000045d0:	9bad7ea3 	umull	x3, w21, w13
   1000045d4:	d363fc63 	lsr	x3, x3, #35
   1000045d8:	1b0ed463 	msub	w3, w3, w14, w21
   1000045dc:	321c0463 	orr	w3, w3, #0x30
   1000045e0:	39005fe3 	strb	w3, [sp, #23]
   1000045e4:	f9400be3 	ldr	x3, [sp, #16]
   1000045e8:	f8374843 	str	x3, [x2, w23, uxtw]
        i += 8;
   1000045ec:	110022f7 	add	w23, w23, #0x8
   1000045f0:	aa1503e3 	mov	x3, x21
      }
      memcpy(buffer + i, (unsigned char[]) {'m'}, 1);
   1000045f4:	38374850 	strb	w16, [x2, w23, uxtw]
      i += 1;
   1000045f8:	110006f5 	add	w21, w23, #0x1
    // if(p_v == 0) {
    //   // buffer[i++] = ' ';
    //   memcpy(buffer + i, (char[]) {0x20, 0x00, 0x00, 0x00}, PIXEL_CHAR_SIZE);
    //   i += PIXEL_CHAR_SIZE;
    // } else {
      memcpy(buffer + i, (unsigned char[]) {BLOCK_CHAR_PREFIX, pixel_selector_byte[p_v]}, PIXEL_CHAR_SIZE);
   1000045fc:	38766a96 	ldrb	w22, [x20, x22]
   100004600:	7800d3f3 	sturh	w19, [sp, #13]
   100004604:	39003ff6 	strb	w22, [sp, #15]
   100004608:	8b354057 	add	x23, x2, w21, uxtw
   10000460c:	790002f3 	strh	w19, [x23]
   100004610:	39000af6 	strb	w22, [x23, #2]
      i += PIXEL_CHAR_SIZE;
   100004614:	11000eb5 	add	w21, w21, #0x3
  for(size_t p_i = 0; p_i < num_pixels; p_i++) {
   100004618:	91003000 	add	x0, x0, #0xc
   10000461c:	f1000631 	subs	x17, x17, #0x1
   100004620:	540009c0 	b.eq	100004758 <_rasterize_frame+0x324>  // b.none
    if(pixels[p_i].fore == pixels[p_i].back) {
   100004624:	297fe017 	ldp	w23, w24, [x0, #-4]
   100004628:	6b1802ff 	cmp	w23, w24
   10000462c:	54000461 	b.ne	1000046b8 <_rasterize_frame+0x284>  // b.any
      if (pixels[p_i].back != back_color) {
   100004630:	6b0302ff 	cmp	w23, w3
   100004634:	54000360 	b.eq	1000046a0 <_rasterize_frame+0x26c>  // b.none
        memcpy(buffer + i, (unsigned char[]) {CSI, APPLY_BACK(back_color), 'm'}, APPLY_COLOR_SIZE);
   100004638:	8b354043 	add	x3, x2, w21, uxtw
   10000463c:	b80293e4 	stur	w4, [sp, #41]
   100004640:	7802d3e8 	sturh	w8, [sp, #45]
   100004644:	3900bfe9 	strb	w9, [sp, #47]
   100004648:	9baa7ef6 	umull	x22, w23, w10
   10000464c:	d365fed6 	lsr	x22, x22, #37
   100004650:	1100c2d8 	add	w24, w22, #0x30
   100004654:	3900c3f8 	strb	w24, [sp, #48]
   100004658:	1b0bded6 	msub	w22, w22, w11, w23
   10000465c:	12001ed6 	and	w22, w22, #0xff
   100004660:	1b0c7ed6 	mul	w22, w22, w12
   100004664:	530b7ed6 	lsr	w22, w22, #11
   100004668:	321c06d6 	orr	w22, w22, #0x30
   10000466c:	3900c7f6 	strb	w22, [sp, #49]
   100004670:	9bad7ef6 	umull	x22, w23, w13
   100004674:	d363fed6 	lsr	x22, x22, #35
   100004678:	1b0eded6 	msub	w22, w22, w14, w23
   10000467c:	321c06d6 	orr	w22, w22, #0x30
   100004680:	3900cbf6 	strb	w22, [sp, #50]
   100004684:	3900cff0 	strb	w16, [sp, #51]
   100004688:	f84293f6 	ldur	x22, [sp, #41]
   10000468c:	f9000076 	str	x22, [x3]
   100004690:	b84303f6 	ldur	w22, [sp, #48]
   100004694:	b8007076 	stur	w22, [x3, #7]
        i += APPLY_COLOR_SIZE;
   100004698:	11002eb5 	add	w21, w21, #0xb
   10000469c:	aa1703e3 	mov	x3, x23
      buffer[i++] = ' ';
   1000046a0:	38354841 	strb	w1, [x2, w21, uxtw]
   1000046a4:	110006b5 	add	w21, w21, #0x1
  for(size_t p_i = 0; p_i < num_pixels; p_i++) {
   1000046a8:	91003000 	add	x0, x0, #0xc
   1000046ac:	f1000631 	subs	x17, x17, #0x1
   1000046b0:	54fffba1 	b.ne	100004624 <_rasterize_frame+0x1f0>  // b.any
   1000046b4:	14000029 	b	100004758 <_rasterize_frame+0x324>
   1000046b8:	39401016 	ldrb	w22, [x0, #4]
    if(pixels[p_i].fore != fore_color || pixels[p_i].back != back_color) {
   1000046bc:	6b0f02ff 	cmp	w23, w15
   1000046c0:	7a430300 	ccmp	w24, w3, #0x0, eq  // eq = none
   1000046c4:	54fff9c0 	b.eq	1000045fc <_rasterize_frame+0x1c8>  // b.none
      memcpy(buffer + i, (unsigned char[]) {CSI}, 2);
   1000046c8:	790047e5 	strh	w5, [sp, #34]
   1000046cc:	78354845 	strh	w5, [x2, w21, uxtw]
      i += 2;
   1000046d0:	11000ab7 	add	w23, w21, #0x2
      if(pixels[p_i].fore != fore_color) {
   1000046d4:	b85fc018 	ldur	w24, [x0, #-4]
   1000046d8:	6b0f031f 	cmp	w24, w15
   1000046dc:	540000a1 	b.ne	1000046f0 <_rasterize_frame+0x2bc>  // b.any
      if(pixels[p_i].back != back_color) {
   1000046e0:	b9400015 	ldr	w21, [x0]
   1000046e4:	6b0302bf 	cmp	w21, w3
   1000046e8:	54fff5c1 	b.ne	1000045a0 <_rasterize_frame+0x16c>  // b.any
   1000046ec:	17ffffc2 	b	1000045f4 <_rasterize_frame+0x1c0>
        memcpy(buffer + i, (unsigned char[]) {APPLY_FORE(fore_color)}, 8);
   1000046f0:	b9001be7 	str	w7, [sp, #24]
   1000046f4:	390073e9 	strb	w9, [sp, #28]
   1000046f8:	9baa7f0f 	umull	x15, w24, w10
   1000046fc:	d365fdef 	lsr	x15, x15, #37
   100004700:	1100c1f9 	add	w25, w15, #0x30
   100004704:	390077f9 	strb	w25, [sp, #29]
   100004708:	1b0be1ef 	msub	w15, w15, w11, w24
   10000470c:	12001def 	and	w15, w15, #0xff
   100004710:	1b0c7def 	mul	w15, w15, w12
   100004714:	530b7def 	lsr	w15, w15, #11
   100004718:	321c05ef 	orr	w15, w15, #0x30
   10000471c:	39007bef 	strb	w15, [sp, #30]
   100004720:	9bad7f0f 	umull	x15, w24, w13
   100004724:	d363fdef 	lsr	x15, x15, #35
   100004728:	1b0ee1ef 	msub	w15, w15, w14, w24
   10000472c:	321c05ef 	orr	w15, w15, #0x30
   100004730:	39007fef 	strb	w15, [sp, #31]
   100004734:	f9400fef 	ldr	x15, [sp, #24]
   100004738:	f837484f 	str	x15, [x2, w23, uxtw]
        i += 8;
   10000473c:	11002ab7 	add	w23, w21, #0xa
      if(pixels[p_i].back != back_color) {
   100004740:	b940000f 	ldr	w15, [x0]
   100004744:	6b0301ff 	cmp	w15, w3
   100004748:	54fff241 	b.ne	100004590 <_rasterize_frame+0x15c>  // b.any
   10000474c:	aa1803ef 	mov	x15, x24
   100004750:	17ffffa9 	b	1000045f4 <_rasterize_frame+0x1c0>
   100004754:	52800315 	mov	w21, #0x18                  	// #24
    }
  }
  buffer[i++] = '\0';
   100004758:	3835485f 	strb	wzr, [x2, w21, uxtw]
   10000475c:	f94027e8 	ldr	x8, [sp, #72]
   100004760:	d503201f 	nop
   100004764:	5801c5a9 	ldr	x9, 100008018 <__PromotedConst.1+0xbf8>
   100004768:	f9400129 	ldr	x9, [x9]
   10000476c:	eb08013f 	cmp	x9, x8
   100004770:	54000121 	b.ne	100004794 <_rasterize_frame+0x360>  // b.any
   100004774:	110006a0 	add	w0, w21, #0x1

  return i;
   100004778:	a9497bfd 	ldp	x29, x30, [sp, #144]
   10000477c:	a9484ff4 	ldp	x20, x19, [sp, #128]
   100004780:	a94757f6 	ldp	x22, x21, [sp, #112]
   100004784:	a9465ff8 	ldp	x24, x23, [sp, #96]
   100004788:	a94567fa 	ldp	x26, x25, [sp, #80]
   10000478c:	910283ff 	add	sp, sp, #0xa0
   100004790:	d65f03c0 	ret
   100004794:	94000a37 	bl	100007070 <_request_snapshot+0x568>

0000000100004798 <_distance>:
#include <float.h>

#include "object.h"

SGVec distance(object_t * self, SGVec3D_t point) {
   100004798:	92b01008 	mov	x8, #0xffffffff7f7fffff    	// #-2155872257
   10000479c:	f2efefe8 	movk	x8, #0x7f7f, lsl #48
  return SGVec_Load_Const(FLT_MAX);
   1000047a0:	4e080d00 	dup	v0.2d, x8
   1000047a4:	d65f03c0 	ret

00000001000047a8 <_create_null_object>:
}

object_t create_null_object() {
  return (object_t) {
   1000047a8:	6f00e400 	movi	v0.2d, #0x0
   1000047ac:	ad060100 	stp	q0, q0, [x8, #192]
   1000047b0:	ad050100 	stp	q0, q0, [x8, #160]
   1000047b4:	ad040100 	stp	q0, q0, [x8, #128]
   1000047b8:	ad030100 	stp	q0, q0, [x8, #96]
   1000047bc:	12b01009 	mov	w9, #0x7f7fffff            	// #2139095039
    .distance = distance,
    .origin = (SGVec3D_t) {
   1000047c0:	4e040d21 	dup	v1.4s, w9
  return (object_t) {
   1000047c4:	10fffea9 	adr	x9, 100004798 <_distance>
   1000047c8:	d503201f 	nop
   1000047cc:	ad020100 	stp	q0, q0, [x8, #64]
   1000047d0:	ad000500 	stp	q0, q1, [x8]
   1000047d4:	f9000109 	str	x9, [x8]
    .origin = (SGVec3D_t) {
   1000047d8:	ad010501 	stp	q1, q1, [x8, #32]
  return (object_t) {
   1000047dc:	d65f03c0 	ret

00000001000047e0 <_ray_march>:
  SGVecUInt chunk_idx;
  SGVecUInt validity;
}
march_result_t;

march_result_t ray_march(SGVec3D_t origin, SGVec3D_t rays, world_snapshot_t * snapshot) {
   1000047e0:	d10503ff 	sub	sp, sp, #0x140
   1000047e4:	a90f6ffc 	stp	x28, x27, [sp, #240]
   1000047e8:	a9105ff8 	stp	x24, x23, [sp, #256]
   1000047ec:	a91157f6 	stp	x22, x21, [sp, #272]
   1000047f0:	a9124ff4 	stp	x20, x19, [sp, #288]
   1000047f4:	a9137bfd 	stp	x29, x30, [sp, #304]
   1000047f8:	9104c3fd 	add	x29, sp, #0x130
   1000047fc:	aa0003f4 	mov	x20, x0
   100004800:	ad0297e4 	stp	q4, q5, [sp, #80]
   100004804:	ad018fe2 	stp	q2, q3, [sp, #48]
   100004808:	4ea11c26 	mov	v6.16b, v1.16b
   10000480c:	4ea01c07 	mov	v7.16b, v0.16b
   100004810:	aa0803f3 	mov	x19, x8
   100004814:	52800015 	mov	w21, #0x0                   	// #0
   100004818:	529ae148 	mov	w8, #0xd70a                	// #55050
   10000481c:	72a78468 	movk	w8, #0x3c23, lsl #16
   100004820:	4e040d03 	dup	v3.4s, w8
   100004824:	ad0003e3 	stp	q3, q0, [sp]
   100004828:	6f00e403 	movi	v3.2d, #0x0
   10000482c:	6f00e405 	movi	v5.2d, #0x0
   100004830:	6f00e404 	movi	v4.2d, #0x0
   100004834:	3d800be1 	str	q1, [sp, #32]
   100004838:	3d801fe5 	str	q5, [sp, #112]
   10000483c:	d2800016 	mov	x22, #0x0                   	// #0
   100004840:	4f026470 	movi	v16.4s, #0x43, lsl #24
   100004844:	3c9703a2 	stur	q2, [x29, #-144]
   100004848:	ad041be7 	stp	q7, q6, [sp, #128]
   10000484c:	14000004 	b	10000485c <_ray_march+0x7c>
  SGVec3D_t point = origin;

  for(int i = 0; i < STEP_MAX; i++) {
    SGVec dist_step = SGVec_Load_Const(MAX_DIST);

    for(int c = 0; c < CUBE_NUM; c++) {
   100004850:	910006d6 	add	x22, x22, #0x1
   100004854:	f1006edf 	cmp	x22, #0x1b
   100004858:	54000420 	b.eq	1000048dc <_ray_march+0xfc>  // b.none
      for(unsigned int j = 0; j < snapshot->chunks[c]->num_objects; j++) {
   10000485c:	f8767a88 	ldr	x8, [x20, x22, lsl #3]
   100004860:	b9400109 	ldr	w9, [x8]
   100004864:	34ffff69 	cbz	w9, 100004850 <_ray_march+0x70>
   100004868:	d2800017 	mov	x23, #0x0                   	// #0
   10000486c:	d2800018 	mov	x24, #0x0                   	// #0
   100004870:	4e040ec0 	dup	v0.4s, w22
   100004874:	3c9803a0 	stur	q0, [x29, #-128]
   100004878:	ad3c93b0 	stp	q16, q4, [x29, #-112]
   10000487c:	3c9b03a3 	stur	q3, [x29, #-80]
        object_t * o = snapshot->chunks[c]->objects + j;
   100004880:	f9400508 	ldr	x8, [x8, #8]
        SGVec dist_candidate = o->distance(o, point);
   100004884:	8b170100 	add	x0, x8, x23
   100004888:	f9400008 	ldr	x8, [x0]
   10000488c:	4ea71ce0 	mov	v0.16b, v7.16b
   100004890:	4ea61cc1 	mov	v1.16b, v6.16b
   100004894:	3cd703a2 	ldur	q2, [x29, #-144]
   100004898:	d63f0100 	blr	x8
   10000489c:	ad7c93b0 	ldp	q16, q4, [x29, #-112]
   1000048a0:	ad441be7 	ldp	q7, q6, [sp, #128]
   1000048a4:	3cdb03a3 	ldur	q3, [x29, #-80]
        dist_step = SGVec_Minimum(dist_step, dist_candidate);
   1000048a8:	4ea0f610 	fmin	v16.4s, v16.4s, v0.4s

        SGVecUInt dist_ternary = SGVec_Less_Than(dist_candidate, dist_step);
   1000048ac:	6e30e400 	fcmge	v0.4s, v0.4s, v16.4s
        obj_idx = SGVecUInt_Ternary(dist_ternary, SGVecUInt_Load_Const(j), obj_idx);
   1000048b0:	4e040f01 	dup	v1.4s, w24
   1000048b4:	6ee01c23 	bif	v3.16b, v1.16b, v0.16b
   1000048b8:	3cd803a1 	ldur	q1, [x29, #-128]
        chunk_idx = SGVecUInt_Ternary(dist_ternary, SGVecUInt_Load_Const(c), chunk_idx);
   1000048bc:	6ee01c24 	bif	v4.16b, v1.16b, v0.16b
      for(unsigned int j = 0; j < snapshot->chunks[c]->num_objects; j++) {
   1000048c0:	91000718 	add	x24, x24, #0x1
   1000048c4:	f8767a88 	ldr	x8, [x20, x22, lsl #3]
   1000048c8:	b9400109 	ldr	w9, [x8]
   1000048cc:	910382f7 	add	x23, x23, #0xe0
   1000048d0:	eb09031f 	cmp	x24, x9
   1000048d4:	54fffd23 	b.cc	100004878 <_ray_march+0x98>  // b.lo, b.ul, b.last
   1000048d8:	17ffffde 	b	100004850 <_ray_march+0x70>
   1000048dc:	3dc01fe5 	ldr	q5, [sp, #112]
    //   SGVecUInt dist_ternary = SGVec_Less_Than(dist_candidate, dist_step);
    //   obj_idx = SGVecUInt_Ternary(dist_ternary, SGVecUInt_Load_Const(j), obj_idx);
    //   chunk_idx = SGVecUInt_Ternary(dist_ternary, SGVecUInt_Load_Const(c), chunk_idx);
    // }

    dist_tot = SGVec_Add_SGVec(dist_tot, dist_step);
   1000048e0:	4e25d605 	fadd	v5.4s, v16.4s, v5.4s
   1000048e4:	ad409be7 	ldp	q7, q6, [sp, #16]
   1000048e8:	ad4183e2 	ldp	q2, q0, [sp, #48]
    point = (SGVec3D_t) {
      .x = SGVec_Add_Mult_SGVec(origin.x, rays.x, dist_tot),
   1000048ec:	4e20cca7 	fmla	v7.4s, v5.4s, v0.4s
   1000048f0:	3dc017e0 	ldr	q0, [sp, #80]
      .y = SGVec_Add_Mult_SGVec(origin.y, rays.y, dist_tot),
   1000048f4:	4e20cca6 	fmla	v6.4s, v5.4s, v0.4s
   1000048f8:	3dc01be0 	ldr	q0, [sp, #96]
      .z = SGVec_Add_Mult_SGVec(origin.z, rays.z, dist_tot)
   1000048fc:	4e20cca2 	fmla	v2.4s, v5.4s, v0.4s
    };

    SGVecUInt max_dist_test = SGVec_Gtr_Or_Eq_Than(dist_tot, SGVec_Load_Const(MAX_DIST));
   100004900:	4f026460 	movi	v0.4s, #0x43, lsl #24
   100004904:	6e20e4a0 	fcmge	v0.4s, v5.4s, v0.4s
   100004908:	3dc003e1 	ldr	q1, [sp]
    hit_dist_test = SGVec_Less_Than(dist_step, SGVec_Load_Const(HIT_DIST)); //SGVec_Mult_SGVec(SGVec_Load_Const(dist_tot), SGVec_Load_Const(HIT_DIST));
   10000490c:	6eb0e421 	fcmgt	v1.4s, v1.4s, v16.4s
    SGVecUInt complete_test = SGVecUInt_Or(max_dist_test, hit_dist_test);
   100004910:	4ea11c00 	orr	v0.16b, v0.16b, v1.16b
#   define SGVecUInt_Shift_Left_Insert(X, Y, Z) vsliq_n_u32((X), (Y), (Z))
#endif

inline
bool lanes_true(SGVecUInt x) {
  SGVecShortUInt x_2 = SGVecShortUInt_Fold_Min(SGVecUInt_Bottom_Short(x), SGVecUInt_Top_Short(x));
   100004914:	6e004001 	ext	v1.16b, v0.16b, v0.16b, #8
   100004918:	2ea1ac00 	uminp	v0.2s, v0.2s, v1.2s
  return ~SGVecShortUInt_Get_Lane(SGVecShortUInt_Fold_Min(x_2, x_2), 0) == 0;
   10000491c:	2ea0ac00 	uminp	v0.2s, v0.2s, v0.2s
   100004920:	1e260008 	fmov	w8, s0
   100004924:	3100051f 	cmn	w8, #0x1
   100004928:	54000080 	b.eq	100004938 <_ray_march+0x158>  // b.none
   10000492c:	110006b5 	add	w21, w21, #0x1
   100004930:	710fa2bf 	cmp	w21, #0x3e8
   100004934:	54fff821 	b.ne	100004838 <_ray_march+0x58>  // b.any
   100004938:	529ae148 	mov	w8, #0xd70a                	// #55050
   10000493c:	72a78468 	movk	w8, #0x3c23, lsl #16
    hit_dist_test = SGVec_Less_Than(dist_step, SGVec_Load_Const(HIT_DIST)); //SGVec_Mult_SGVec(SGVec_Load_Const(dist_tot), SGVec_Load_Const(HIT_DIST));
   100004940:	4e040d00 	dup	v0.4s, w8
   100004944:	6eb0e400 	fcmgt	v0.4s, v0.4s, v16.4s

    if (lanes_true(complete_test)) break;
  }

  SGVecUInt valid_hits_ternary = hit_dist_test;
  return (march_result_t) {
   100004948:	ad001e65 	stp	q5, q7, [x19]
    .dists = dist_tot,
    .obj_idx = SGVecUInt_Ternary(valid_hits_ternary, obj_idx, SGVecUInt_Load_Const(0)),
    .chunk_idx = SGVecUInt_Ternary(valid_hits_ternary, chunk_idx, SGVecUInt_Load_Const(0)),
    .validity = valid_hits_ternary,
    .point = point
   10000494c:	ad010a66 	stp	q6, q2, [x19, #32]
    .obj_idx = SGVecUInt_Ternary(valid_hits_ternary, obj_idx, SGVecUInt_Load_Const(0)),
   100004950:	4e201c61 	and	v1.16b, v3.16b, v0.16b
    .chunk_idx = SGVecUInt_Ternary(valid_hits_ternary, chunk_idx, SGVecUInt_Load_Const(0)),
   100004954:	4e201c82 	and	v2.16b, v4.16b, v0.16b
  return (march_result_t) {
   100004958:	ad020a61 	stp	q1, q2, [x19, #64]
   10000495c:	3d801a60 	str	q0, [x19, #96]
  };
}
   100004960:	a9537bfd 	ldp	x29, x30, [sp, #304]
   100004964:	a9524ff4 	ldp	x20, x19, [sp, #288]
   100004968:	a95157f6 	ldp	x22, x21, [sp, #272]
   10000496c:	a9505ff8 	ldp	x24, x23, [sp, #256]
   100004970:	a94f6ffc 	ldp	x28, x27, [sp, #240]
   100004974:	910503ff 	add	sp, sp, #0x140
   100004978:	d65f03c0 	ret

000000010000497c <_normal>:
    dists = SGVec_Minimum(dists, objs[i]->distance(objs[i], point));
  }
  return dists;
}

SGVec3D_t normal(object_t ** objs, SGVec3D_t point) {
   10000497c:	d102c3ff 	sub	sp, sp, #0xb0
   100004980:	a9094ff4 	stp	x20, x19, [sp, #144]
   100004984:	a90a7bfd 	stp	x29, x30, [sp, #160]
   100004988:	910283fd 	add	x29, sp, #0xa0
   10000498c:	ad3e07a2 	stp	q2, q1, [x29, #-64]
   100004990:	3c9e03a0 	stur	q0, [x29, #-32]
   100004994:	aa0003f3 	mov	x19, x0
   100004998:	5296e2e8 	mov	w8, #0xb717                	// #46871
   10000499c:	72a71a28 	movk	w8, #0x38d1, lsl #16
  const SGVec normal_epsilon = SGVec_Load_Const(0.0001);

  return normalize((SGVec3D_t) {
    .x = SGVec_Sub_SGVec(
   1000049a0:	4e040d03 	dup	v3.4s, w8
   1000049a4:	4e23d400 	fadd	v0.4s, v0.4s, v3.4s
   1000049a8:	ad0203e3 	stp	q3, q0, [sp, #64]
    dists = SGVec_Minimum(dists, objs[i]->distance(objs[i], point));
   1000049ac:	f9400000 	ldr	x0, [x0]
   1000049b0:	f9400008 	ldr	x8, [x0]
   1000049b4:	d63f0100 	blr	x8
   1000049b8:	4f040401 	movi	v1.4s, #0x80
   1000049bc:	4ea1f400 	fmin	v0.4s, v0.4s, v1.4s
   1000049c0:	3d800fe0 	str	q0, [sp, #48]
   1000049c4:	f9400660 	ldr	x0, [x19, #8]
   1000049c8:	f9400008 	ldr	x8, [x0]
   1000049cc:	3dc017e0 	ldr	q0, [sp, #80]
   1000049d0:	ad7e07a2 	ldp	q2, q1, [x29, #-64]
   1000049d4:	d63f0100 	blr	x8
   1000049d8:	3dc00fe1 	ldr	q1, [sp, #48]
   1000049dc:	4ea0f420 	fmin	v0.4s, v1.4s, v0.4s
   1000049e0:	3d800fe0 	str	q0, [sp, #48]
   1000049e4:	f9400a60 	ldr	x0, [x19, #16]
   1000049e8:	f9400008 	ldr	x8, [x0]
   1000049ec:	3dc017e0 	ldr	q0, [sp, #80]
   1000049f0:	ad7e07a2 	ldp	q2, q1, [x29, #-64]
   1000049f4:	d63f0100 	blr	x8
   1000049f8:	3dc00fe1 	ldr	q1, [sp, #48]
   1000049fc:	4ea0f420 	fmin	v0.4s, v1.4s, v0.4s
   100004a00:	3d800fe0 	str	q0, [sp, #48]
   100004a04:	f9400e60 	ldr	x0, [x19, #24]
   100004a08:	f9400008 	ldr	x8, [x0]
   100004a0c:	3dc017e0 	ldr	q0, [sp, #80]
   100004a10:	ad7e07a2 	ldp	q2, q1, [x29, #-64]
   100004a14:	d63f0100 	blr	x8
   100004a18:	3dc00fe1 	ldr	q1, [sp, #48]
   100004a1c:	4ea0f420 	fmin	v0.4s, v1.4s, v0.4s
   100004a20:	5296e2e8 	mov	w8, #0xb717                	// #46871
   100004a24:	72b71a28 	movk	w8, #0xb8d1, lsl #16
    .x = SGVec_Sub_SGVec(
   100004a28:	4e040d01 	dup	v1.4s, w8
   100004a2c:	ad0107e0 	stp	q0, q1, [sp, #32]
   100004a30:	3cde03a0 	ldur	q0, [x29, #-32]
   100004a34:	4e21d400 	fadd	v0.4s, v0.4s, v1.4s
   100004a38:	3d8017e0 	str	q0, [sp, #80]
    dists = SGVec_Minimum(dists, objs[i]->distance(objs[i], point));
   100004a3c:	f9400260 	ldr	x0, [x19]
   100004a40:	f9400008 	ldr	x8, [x0]
   100004a44:	ad7e07a2 	ldp	q2, q1, [x29, #-64]
   100004a48:	d63f0100 	blr	x8
   100004a4c:	4f040401 	movi	v1.4s, #0x80
   100004a50:	4ea1f400 	fmin	v0.4s, v0.4s, v1.4s
   100004a54:	3d8007e0 	str	q0, [sp, #16]
   100004a58:	f9400660 	ldr	x0, [x19, #8]
   100004a5c:	f9400008 	ldr	x8, [x0]
   100004a60:	3dc017e0 	ldr	q0, [sp, #80]
   100004a64:	ad7e07a2 	ldp	q2, q1, [x29, #-64]
   100004a68:	d63f0100 	blr	x8
   100004a6c:	3dc007e1 	ldr	q1, [sp, #16]
   100004a70:	4ea0f420 	fmin	v0.4s, v1.4s, v0.4s
   100004a74:	3d8007e0 	str	q0, [sp, #16]
   100004a78:	f9400a60 	ldr	x0, [x19, #16]
   100004a7c:	f9400008 	ldr	x8, [x0]
   100004a80:	3dc017e0 	ldr	q0, [sp, #80]
   100004a84:	ad7e07a2 	ldp	q2, q1, [x29, #-64]
   100004a88:	d63f0100 	blr	x8
   100004a8c:	3dc007e1 	ldr	q1, [sp, #16]
   100004a90:	4ea0f420 	fmin	v0.4s, v1.4s, v0.4s
   100004a94:	3d8007e0 	str	q0, [sp, #16]
   100004a98:	f9400e60 	ldr	x0, [x19, #24]
   100004a9c:	f9400008 	ldr	x8, [x0]
   100004aa0:	3dc017e0 	ldr	q0, [sp, #80]
   100004aa4:	ad7e07a2 	ldp	q2, q1, [x29, #-64]
   100004aa8:	d63f0100 	blr	x8
   100004aac:	3dc007e1 	ldr	q1, [sp, #16]
   100004ab0:	4ea0f420 	fmin	v0.4s, v1.4s, v0.4s
   100004ab4:	3dc00be1 	ldr	q1, [sp, #32]
    .x = SGVec_Sub_SGVec(
   100004ab8:	4ea0d420 	fsub	v0.4s, v1.4s, v0.4s
   100004abc:	3d800be0 	str	q0, [sp, #32]
   100004ac0:	3cdd03a0 	ldur	q0, [x29, #-48]
   100004ac4:	3dc013e1 	ldr	q1, [sp, #64]
      generic_distance(objs, (SGVec3D_t) {SGVec_Add_SGVec(point.x, normal_epsilon), point.y, point.z}),
      generic_distance(objs, (SGVec3D_t) {SGVec_Sub_SGVec(point.x, normal_epsilon), point.y, point.z})
    ),
    .y = SGVec_Sub_SGVec(
   100004ac8:	4e21d401 	fadd	v1.4s, v0.4s, v1.4s
   100004acc:	3d8017e1 	str	q1, [sp, #80]
    dists = SGVec_Minimum(dists, objs[i]->distance(objs[i], point));
   100004ad0:	f9400260 	ldr	x0, [x19]
   100004ad4:	f9400008 	ldr	x8, [x0]
   100004ad8:	3cde03a0 	ldur	q0, [x29, #-32]
   100004adc:	3cdc03a2 	ldur	q2, [x29, #-64]
   100004ae0:	d63f0100 	blr	x8
   100004ae4:	4f040401 	movi	v1.4s, #0x80
   100004ae8:	4ea1f400 	fmin	v0.4s, v0.4s, v1.4s
   100004aec:	3d8007e0 	str	q0, [sp, #16]
   100004af0:	f9400660 	ldr	x0, [x19, #8]
   100004af4:	f9400008 	ldr	x8, [x0]
   100004af8:	3cde03a0 	ldur	q0, [x29, #-32]
   100004afc:	3dc017e1 	ldr	q1, [sp, #80]
   100004b00:	3cdc03a2 	ldur	q2, [x29, #-64]
   100004b04:	d63f0100 	blr	x8
   100004b08:	3dc007e1 	ldr	q1, [sp, #16]
   100004b0c:	4ea0f420 	fmin	v0.4s, v1.4s, v0.4s
   100004b10:	3d8007e0 	str	q0, [sp, #16]
   100004b14:	f9400a60 	ldr	x0, [x19, #16]
   100004b18:	f9400008 	ldr	x8, [x0]
   100004b1c:	3cde03a0 	ldur	q0, [x29, #-32]
   100004b20:	3dc017e1 	ldr	q1, [sp, #80]
   100004b24:	3cdc03a2 	ldur	q2, [x29, #-64]
   100004b28:	d63f0100 	blr	x8
   100004b2c:	3dc007e1 	ldr	q1, [sp, #16]
   100004b30:	4ea0f420 	fmin	v0.4s, v1.4s, v0.4s
   100004b34:	3d8007e0 	str	q0, [sp, #16]
   100004b38:	f9400e60 	ldr	x0, [x19, #24]
   100004b3c:	f9400008 	ldr	x8, [x0]
   100004b40:	3cde03a0 	ldur	q0, [x29, #-32]
   100004b44:	3dc017e1 	ldr	q1, [sp, #80]
   100004b48:	3cdc03a2 	ldur	q2, [x29, #-64]
   100004b4c:	d63f0100 	blr	x8
   100004b50:	3dc007e1 	ldr	q1, [sp, #16]
   100004b54:	4ea0f420 	fmin	v0.4s, v1.4s, v0.4s
   100004b58:	3d8007e0 	str	q0, [sp, #16]
   100004b5c:	3cdd03a0 	ldur	q0, [x29, #-48]
   100004b60:	3dc00fe1 	ldr	q1, [sp, #48]
    .y = SGVec_Sub_SGVec(
   100004b64:	4e21d401 	fadd	v1.4s, v0.4s, v1.4s
   100004b68:	3d8017e1 	str	q1, [sp, #80]
    dists = SGVec_Minimum(dists, objs[i]->distance(objs[i], point));
   100004b6c:	f9400260 	ldr	x0, [x19]
   100004b70:	f9400008 	ldr	x8, [x0]
   100004b74:	3cde03a0 	ldur	q0, [x29, #-32]
   100004b78:	3cdc03a2 	ldur	q2, [x29, #-64]
   100004b7c:	d63f0100 	blr	x8
   100004b80:	4f040401 	movi	v1.4s, #0x80
   100004b84:	4ea1f400 	fmin	v0.4s, v0.4s, v1.4s
   100004b88:	3d8003e0 	str	q0, [sp]
   100004b8c:	f9400660 	ldr	x0, [x19, #8]
   100004b90:	f9400008 	ldr	x8, [x0]
   100004b94:	3cde03a0 	ldur	q0, [x29, #-32]
   100004b98:	3dc017e1 	ldr	q1, [sp, #80]
   100004b9c:	3cdc03a2 	ldur	q2, [x29, #-64]
   100004ba0:	d63f0100 	blr	x8
   100004ba4:	3dc003e1 	ldr	q1, [sp]
   100004ba8:	4ea0f420 	fmin	v0.4s, v1.4s, v0.4s
   100004bac:	3d8003e0 	str	q0, [sp]
   100004bb0:	f9400a60 	ldr	x0, [x19, #16]
   100004bb4:	f9400008 	ldr	x8, [x0]
   100004bb8:	3cde03a0 	ldur	q0, [x29, #-32]
   100004bbc:	3dc017e1 	ldr	q1, [sp, #80]
   100004bc0:	3cdc03a2 	ldur	q2, [x29, #-64]
   100004bc4:	d63f0100 	blr	x8
   100004bc8:	3dc003e1 	ldr	q1, [sp]
   100004bcc:	4ea0f420 	fmin	v0.4s, v1.4s, v0.4s
   100004bd0:	3d8003e0 	str	q0, [sp]
   100004bd4:	f9400e60 	ldr	x0, [x19, #24]
   100004bd8:	f9400008 	ldr	x8, [x0]
   100004bdc:	3cde03a0 	ldur	q0, [x29, #-32]
   100004be0:	3dc017e1 	ldr	q1, [sp, #80]
   100004be4:	3cdc03a2 	ldur	q2, [x29, #-64]
   100004be8:	d63f0100 	blr	x8
   100004bec:	3dc003e1 	ldr	q1, [sp]
   100004bf0:	4ea0f420 	fmin	v0.4s, v1.4s, v0.4s
   100004bf4:	3dc007e1 	ldr	q1, [sp, #16]
    .y = SGVec_Sub_SGVec(
   100004bf8:	4ea0d420 	fsub	v0.4s, v1.4s, v0.4s
   100004bfc:	3d8007e0 	str	q0, [sp, #16]
   100004c00:	3cdc03a0 	ldur	q0, [x29, #-64]
   100004c04:	3dc013e1 	ldr	q1, [sp, #64]
      generic_distance(objs, (SGVec3D_t) {point.x, SGVec_Add_SGVec(point.y, normal_epsilon), point.z}),
      generic_distance(objs, (SGVec3D_t) {point.x, SGVec_Sub_SGVec(point.y, normal_epsilon), point.z})
    ),
    .z = SGVec_Sub_SGVec(
   100004c08:	4e21d402 	fadd	v2.4s, v0.4s, v1.4s
   100004c0c:	3d8017e2 	str	q2, [sp, #80]
    dists = SGVec_Minimum(dists, objs[i]->distance(objs[i], point));
   100004c10:	f9400260 	ldr	x0, [x19]
   100004c14:	f9400008 	ldr	x8, [x0]
   100004c18:	ad7e83a1 	ldp	q1, q0, [x29, #-48]
   100004c1c:	d63f0100 	blr	x8
   100004c20:	4f040401 	movi	v1.4s, #0x80
   100004c24:	4ea1f400 	fmin	v0.4s, v0.4s, v1.4s
   100004c28:	3d8013e0 	str	q0, [sp, #64]
   100004c2c:	f9400660 	ldr	x0, [x19, #8]
   100004c30:	f9400008 	ldr	x8, [x0]
   100004c34:	ad7e83a1 	ldp	q1, q0, [x29, #-48]
   100004c38:	3dc017e2 	ldr	q2, [sp, #80]
   100004c3c:	d63f0100 	blr	x8
   100004c40:	ad420be1 	ldp	q1, q2, [sp, #64]
   100004c44:	4ea0f420 	fmin	v0.4s, v1.4s, v0.4s
   100004c48:	3d8013e0 	str	q0, [sp, #64]
   100004c4c:	f9400a60 	ldr	x0, [x19, #16]
   100004c50:	f9400008 	ldr	x8, [x0]
   100004c54:	ad7e83a1 	ldp	q1, q0, [x29, #-48]
   100004c58:	d63f0100 	blr	x8
   100004c5c:	ad420be1 	ldp	q1, q2, [sp, #64]
   100004c60:	4ea0f420 	fmin	v0.4s, v1.4s, v0.4s
   100004c64:	3d8013e0 	str	q0, [sp, #64]
   100004c68:	f9400e60 	ldr	x0, [x19, #24]
   100004c6c:	f9400008 	ldr	x8, [x0]
   100004c70:	ad7e83a1 	ldp	q1, q0, [x29, #-48]
   100004c74:	d63f0100 	blr	x8
   100004c78:	3dc013e1 	ldr	q1, [sp, #64]
   100004c7c:	4ea0f420 	fmin	v0.4s, v1.4s, v0.4s
   100004c80:	3d8017e0 	str	q0, [sp, #80]
   100004c84:	3cdc03a0 	ldur	q0, [x29, #-64]
   100004c88:	3dc00fe1 	ldr	q1, [sp, #48]
    .z = SGVec_Sub_SGVec(
   100004c8c:	4e21d402 	fadd	v2.4s, v0.4s, v1.4s
   100004c90:	3c9c03a2 	stur	q2, [x29, #-64]
    dists = SGVec_Minimum(dists, objs[i]->distance(objs[i], point));
   100004c94:	f9400260 	ldr	x0, [x19]
   100004c98:	f9400008 	ldr	x8, [x0]
   100004c9c:	ad7e83a1 	ldp	q1, q0, [x29, #-48]
   100004ca0:	d63f0100 	blr	x8
   100004ca4:	4f040401 	movi	v1.4s, #0x80
   100004ca8:	4ea1f400 	fmin	v0.4s, v0.4s, v1.4s
   100004cac:	3d8013e0 	str	q0, [sp, #64]
   100004cb0:	f9400660 	ldr	x0, [x19, #8]
   100004cb4:	f9400008 	ldr	x8, [x0]
   100004cb8:	ad7e83a1 	ldp	q1, q0, [x29, #-48]
   100004cbc:	3cdc03a2 	ldur	q2, [x29, #-64]
   100004cc0:	d63f0100 	blr	x8
   100004cc4:	3dc013e1 	ldr	q1, [sp, #64]
   100004cc8:	4ea0f420 	fmin	v0.4s, v1.4s, v0.4s
   100004ccc:	3d8013e0 	str	q0, [sp, #64]
   100004cd0:	f9400a60 	ldr	x0, [x19, #16]
   100004cd4:	f9400008 	ldr	x8, [x0]
   100004cd8:	ad7e83a1 	ldp	q1, q0, [x29, #-48]
   100004cdc:	3cdc03a2 	ldur	q2, [x29, #-64]
   100004ce0:	d63f0100 	blr	x8
   100004ce4:	3dc013e1 	ldr	q1, [sp, #64]
   100004ce8:	4ea0f420 	fmin	v0.4s, v1.4s, v0.4s
   100004cec:	3d8013e0 	str	q0, [sp, #64]
   100004cf0:	f9400e60 	ldr	x0, [x19, #24]
   100004cf4:	f9400008 	ldr	x8, [x0]
   100004cf8:	ad7e83a1 	ldp	q1, q0, [x29, #-48]
   100004cfc:	3cdc03a2 	ldur	q2, [x29, #-64]
   100004d00:	d63f0100 	blr	x8
   100004d04:	3dc013e1 	ldr	q1, [sp, #64]
   100004d08:	4ea0f420 	fmin	v0.4s, v1.4s, v0.4s
   100004d0c:	3dc017e1 	ldr	q1, [sp, #80]
    .z = SGVec_Sub_SGVec(
   100004d10:	4ea0d422 	fsub	v2.4s, v1.4s, v0.4s
   100004d14:	ad4087e4 	ldp	q4, q1, [sp, #16]
    SGVec_Recip_Sqrt(
   100004d18:	6e21dc20 	fmul	v0.4s, v1.4s, v1.4s
   100004d1c:	4e24cc80 	fmla	v0.4s, v4.4s, v4.4s
   100004d20:	4e22cc40 	fmla	v0.4s, v2.4s, v2.4s
   100004d24:	6ea1d803 	frsqrte	v3.4s, v0.4s
    .x = SGVec_Mult_SGVec(vec.x, recip_magnitude),
   100004d28:	6e21dc60 	fmul	v0.4s, v3.4s, v1.4s
    .y = SGVec_Mult_SGVec(vec.y, recip_magnitude),
   100004d2c:	6e24dc61 	fmul	v1.4s, v3.4s, v4.4s
    .z = SGVec_Mult_SGVec(vec.z, recip_magnitude)
   100004d30:	6e22dc62 	fmul	v2.4s, v3.4s, v2.4s
      generic_distance(objs, (SGVec3D_t) {point.x, point.y, SGVec_Add_SGVec(point.z, normal_epsilon)}),
      generic_distance(objs, (SGVec3D_t) {point.x, point.y, SGVec_Sub_SGVec(point.z, normal_epsilon)})
    )
  });
}
   100004d34:	a94a7bfd 	ldp	x29, x30, [sp, #160]
   100004d38:	a9494ff4 	ldp	x20, x19, [sp, #144]
   100004d3c:	9102c3ff 	add	sp, sp, #0xb0
   100004d40:	d65f03c0 	ret

0000000100004d44 <_rays_to_pixel>:

#define RAW_PIXEL_BLACK (raw_pixel_t) {.fore = OKLAB_BLACK, .back = OKLAB_BLACK, .shape = 0}

raw_pixel_t rays_to_pixel(SGVec3D_t rays, world_snapshot_t * snapshot) {
   100004d44:	6db923e9 	stp	d9, d8, [sp, #-112]!
   100004d48:	a9016ffc 	stp	x28, x27, [sp, #16]
   100004d4c:	a90267fa 	stp	x26, x25, [sp, #32]
   100004d50:	a9035ff8 	stp	x24, x23, [sp, #48]
   100004d54:	a90457f6 	stp	x22, x21, [sp, #64]
   100004d58:	a9054ff4 	stp	x20, x19, [sp, #80]
   100004d5c:	a9067bfd 	stp	x29, x30, [sp, #96]
   100004d60:	910183fd 	add	x29, sp, #0x60
   100004d64:	d106c3ff 	sub	sp, sp, #0x1b0
   100004d68:	aa0003f4 	mov	x20, x0
   100004d6c:	ad058be1 	stp	q1, q2, [sp, #176]
   100004d70:	3d802be0 	str	q0, [sp, #160]
   100004d74:	aa0803f3 	mov	x19, x8
   100004d78:	52800015 	mov	w21, #0x0                   	// #0
   100004d7c:	d503201f 	nop
   100004d80:	580194c8 	ldr	x8, 100008018 <__PromotedConst.1+0xbf8>
   100004d84:	f9400108 	ldr	x8, [x8]
   100004d88:	f81903a8 	stur	x8, [x29, #-112]
   100004d8c:	529c1c08 	mov	w8, #0xe0e0                	// #57568
  //outgoing march
  march_result_t march_result = ray_march(snapshot->self->origin, rays, snapshot);
   100004d90:	f8686808 	ldr	x8, [x0, x8]
   100004d94:	ad408503 	ldp	q3, q1, [x8, #16]
   100004d98:	3dc00d02 	ldr	q2, [x8, #48]
   100004d9c:	529ae148 	mov	w8, #0xd70a                	// #55050
   100004da0:	72a78468 	movk	w8, #0x3c23, lsl #16
   100004da4:	4e040d00 	dup	v0.4s, w8
   100004da8:	ad030be0 	stp	q0, q2, [sp, #96]
   100004dac:	6f00e406 	movi	v6.2d, #0x0
   100004db0:	6f00e405 	movi	v5.2d, #0x0
   100004db4:	6f00e407 	movi	v7.2d, #0x0
   100004db8:	ad040fe1 	stp	q1, q3, [sp, #128]
   100004dbc:	ad068be5 	stp	q5, q2, [sp, #208]
   100004dc0:	d2800016 	mov	x22, #0x0                   	// #0
   100004dc4:	4f026470 	movi	v16.4s, #0x43, lsl #24
   100004dc8:	ad078fe1 	stp	q1, q3, [sp, #240]
   100004dcc:	14000004 	b	100004ddc <_rays_to_pixel+0x98>
    for(int c = 0; c < CUBE_NUM; c++) {
   100004dd0:	910006d6 	add	x22, x22, #0x1
   100004dd4:	f1006edf 	cmp	x22, #0x1b
   100004dd8:	54000400 	b.eq	100004e58 <_rays_to_pixel+0x114>  // b.none
      for(unsigned int j = 0; j < snapshot->chunks[c]->num_objects; j++) {
   100004ddc:	f8767a88 	ldr	x8, [x20, x22, lsl #3]
   100004de0:	b9400109 	ldr	w9, [x8]
   100004de4:	34ffff69 	cbz	w9, 100004dd0 <_rays_to_pixel+0x8c>
   100004de8:	d2800017 	mov	x23, #0x0                   	// #0
   100004dec:	d2800018 	mov	x24, #0x0                   	// #0
   100004df0:	4e040ec0 	dup	v0.4s, w22
   100004df4:	3c9003a0 	stur	q0, [x29, #-256]
   100004df8:	ad389fb0 	stp	q16, q7, [x29, #-240]
   100004dfc:	3c9303a6 	stur	q6, [x29, #-208]
        object_t * o = snapshot->chunks[c]->objects + j;
   100004e00:	f9400508 	ldr	x8, [x8, #8]
        SGVec dist_candidate = o->distance(o, point);
   100004e04:	8b170100 	add	x0, x8, x23
   100004e08:	f9400008 	ldr	x8, [x0]
   100004e0c:	4ea31c60 	mov	v0.16b, v3.16b
   100004e10:	d63f0100 	blr	x8
   100004e14:	ad789fb0 	ldp	q16, q7, [x29, #-240]
   100004e18:	3cd303a6 	ldur	q6, [x29, #-208]
   100004e1c:	ad4707e2 	ldp	q2, q1, [sp, #224]
   100004e20:	3dc043e3 	ldr	q3, [sp, #256]
        dist_step = SGVec_Minimum(dist_step, dist_candidate);
   100004e24:	4ea0f610 	fmin	v16.4s, v16.4s, v0.4s
        SGVecUInt dist_ternary = SGVec_Less_Than(dist_candidate, dist_step);
   100004e28:	6e30e400 	fcmge	v0.4s, v0.4s, v16.4s
        obj_idx = SGVecUInt_Ternary(dist_ternary, SGVecUInt_Load_Const(j), obj_idx);
   100004e2c:	4e040f04 	dup	v4.4s, w24
   100004e30:	6ee01c86 	bif	v6.16b, v4.16b, v0.16b
   100004e34:	3cd003a4 	ldur	q4, [x29, #-256]
        chunk_idx = SGVecUInt_Ternary(dist_ternary, SGVecUInt_Load_Const(c), chunk_idx);
   100004e38:	6ee01c87 	bif	v7.16b, v4.16b, v0.16b
      for(unsigned int j = 0; j < snapshot->chunks[c]->num_objects; j++) {
   100004e3c:	91000718 	add	x24, x24, #0x1
   100004e40:	f8767a88 	ldr	x8, [x20, x22, lsl #3]
   100004e44:	b9400109 	ldr	w9, [x8]
   100004e48:	910382f7 	add	x23, x23, #0xe0
   100004e4c:	eb09031f 	cmp	x24, x9
   100004e50:	54fffd43 	b.cc	100004df8 <_rays_to_pixel+0xb4>  // b.lo, b.ul, b.last
   100004e54:	17ffffdf 	b	100004dd0 <_rays_to_pixel+0x8c>
   100004e58:	3dc037e5 	ldr	q5, [sp, #208]
    dist_tot = SGVec_Add_SGVec(dist_tot, dist_step);
   100004e5c:	4e25d605 	fadd	v5.4s, v16.4s, v5.4s
   100004e60:	ad4483e3 	ldp	q3, q0, [sp, #144]
      .x = SGVec_Add_Mult_SGVec(origin.x, rays.x, dist_tot),
   100004e64:	4e20cca3 	fmla	v3.4s, v5.4s, v0.4s
   100004e68:	ad4387e2 	ldp	q2, q1, [sp, #112]
   100004e6c:	3dc02fe0 	ldr	q0, [sp, #176]
      .y = SGVec_Add_Mult_SGVec(origin.y, rays.y, dist_tot),
   100004e70:	4e20cca1 	fmla	v1.4s, v5.4s, v0.4s
   100004e74:	3dc033e0 	ldr	q0, [sp, #192]
      .z = SGVec_Add_Mult_SGVec(origin.z, rays.z, dist_tot)
   100004e78:	4e20cca2 	fmla	v2.4s, v5.4s, v0.4s
    SGVecUInt max_dist_test = SGVec_Gtr_Or_Eq_Than(dist_tot, SGVec_Load_Const(MAX_DIST));
   100004e7c:	4f026460 	movi	v0.4s, #0x43, lsl #24
   100004e80:	6e20e4a0 	fcmge	v0.4s, v5.4s, v0.4s
   100004e84:	3dc01be4 	ldr	q4, [sp, #96]
    hit_dist_test = SGVec_Less_Than(dist_step, SGVec_Load_Const(HIT_DIST)); //SGVec_Mult_SGVec(SGVec_Load_Const(dist_tot), SGVec_Load_Const(HIT_DIST));
   100004e88:	6eb0e484 	fcmgt	v4.4s, v4.4s, v16.4s
    SGVecUInt complete_test = SGVecUInt_Or(max_dist_test, hit_dist_test);
   100004e8c:	4ea41c00 	orr	v0.16b, v0.16b, v4.16b
  SGVecShortUInt x_2 = SGVecShortUInt_Fold_Min(SGVecUInt_Bottom_Short(x), SGVecUInt_Top_Short(x));
   100004e90:	6e004004 	ext	v4.16b, v0.16b, v0.16b, #8
   100004e94:	2ea4ac00 	uminp	v0.2s, v0.2s, v4.2s
  return ~SGVecShortUInt_Get_Lane(SGVecShortUInt_Fold_Min(x_2, x_2), 0) == 0;
   100004e98:	2ea0ac00 	uminp	v0.2s, v0.2s, v0.2s
   100004e9c:	1e260008 	fmov	w8, s0
   100004ea0:	3100051f 	cmn	w8, #0x1
   100004ea4:	54000080 	b.eq	100004eb4 <_rays_to_pixel+0x170>  // b.none
   100004ea8:	110006b5 	add	w21, w21, #0x1
   100004eac:	710fa2bf 	cmp	w21, #0x3e8
   100004eb0:	54fff861 	b.ne	100004dbc <_rays_to_pixel+0x78>  // b.any
   100004eb4:	529ae148 	mov	w8, #0xd70a                	// #55050
   100004eb8:	72a78468 	movk	w8, #0x3c23, lsl #16
    hit_dist_test = SGVec_Less_Than(dist_step, SGVec_Load_Const(HIT_DIST)); //SGVec_Mult_SGVec(SGVec_Load_Const(dist_tot), SGVec_Load_Const(HIT_DIST));
   100004ebc:	4e040d00 	dup	v0.4s, w8
   100004ec0:	3d8027e0 	str	q0, [sp, #144]
   100004ec4:	6eb0e405 	fcmgt	v5.4s, v0.4s, v16.4s
}

inline
bool lanes_false(SGVecUInt x) {
  SGVecShortUInt x_2 = SGVecShortUInt_Fold_Max(SGVecUInt_Bottom_Short(x), SGVecUInt_Top_Short(x));
   100004ec8:	6e0540a4 	ext	v4.16b, v5.16b, v5.16b, #8
   100004ecc:	2ea4a4a0 	umaxp	v0.2s, v5.2s, v4.2s
  return SGVecShortUInt_Get_Lane(SGVecShortUInt_Fold_Max(x_2, x_2), 0) == 0;
   100004ed0:	2ea0a400 	umaxp	v0.2s, v0.2s, v0.2s
   100004ed4:	1e260008 	fmov	w8, s0

  if (lanes_false(march_result.validity)) return RAW_PIXEL_BLACK;
   100004ed8:	34002208 	cbz	w8, 100005318 <_rays_to_pixel+0x5d4>
   100004edc:	3d8003e4 	str	q4, [sp]
    .chunk_idx = SGVecUInt_Ternary(valid_hits_ternary, chunk_idx, SGVecUInt_Load_Const(0)),
   100004ee0:	4e251ce0 	and	v0.16b, v7.16b, v5.16b
    .obj_idx = SGVecUInt_Ternary(valid_hits_ternary, obj_idx, SGVecUInt_Load_Const(0)),
   100004ee4:	4e251cc4 	and	v4.16b, v6.16b, v5.16b
  uint32_t obj_idx[4]; SGVecUInt_Store_Array(obj_idx, march_result.obj_idx);
  uint32_t chunk_idx[4]; SGVecUInt_Store_Array(chunk_idx, march_result.chunk_idx);

  object_t * hit_objs[4];
  for(int i = 0; i < 4; i++) {
    hit_objs[i] = snapshot->chunks[chunk_idx[i]]->objects + obj_idx[i];
   100004ee8:	0e0c3c08 	mov	w8, v0.s[1]
   100004eec:	0e143c09 	mov	w9, v0.s[2]
   100004ef0:	0e1c3c0a 	mov	w10, v0.s[3]
   100004ef4:	9e66000b 	fmov	x11, d0
   100004ef8:	f86b5a8b 	ldr	x11, [x20, w11, uxtw #3]
   100004efc:	f940056b 	ldr	x11, [x11, #8]
   100004f00:	0e0c3c8c 	mov	w12, v4.s[1]
   100004f04:	0e143c8d 	mov	w13, v4.s[2]
   100004f08:	0e1c3c8e 	mov	w14, v4.s[3]
   100004f0c:	9e66008f 	fmov	x15, d4
   100004f10:	92407def 	and	x15, x15, #0xffffffff
   100004f14:	52801c10 	mov	w16, #0xe0                  	// #224
   100004f18:	9b102deb 	madd	x11, x15, x16, x11
   100004f1c:	f8685a88 	ldr	x8, [x20, w8, uxtw #3]
   100004f20:	f9400508 	ldr	x8, [x8, #8]
   100004f24:	9bb02188 	umaddl	x8, w12, w16, x8
   100004f28:	a93723ab 	stp	x11, x8, [x29, #-144]
   100004f2c:	f8695a88 	ldr	x8, [x20, w9, uxtw #3]
   100004f30:	f9400508 	ldr	x8, [x8, #8]
   100004f34:	9bb021a8 	umaddl	x8, w13, w16, x8
   100004f38:	f81803a8 	stur	x8, [x29, #-128]
   100004f3c:	f86a5a88 	ldr	x8, [x20, w10, uxtw #3]
   100004f40:	f9400508 	ldr	x8, [x8, #8]
   100004f44:	9bb021c8 	umaddl	x8, w14, w16, x8
   100004f48:	f81883a8 	stur	x8, [x29, #-120]
  }

  //surface normals
  SGVec3D_t normals = normal(hit_objs, march_result.point);
   100004f4c:	d10243a0 	sub	x0, x29, #0x90
   100004f50:	4ea31c60 	mov	v0.16b, v3.16b
   100004f54:	ad078fe1 	stp	q1, q3, [sp, #240]
   100004f58:	3d803be2 	str	q2, [sp, #224]
   100004f5c:	3d8007e5 	str	q5, [sp, #16]
   100004f60:	97fffe87 	bl	10000497c <_normal>
   100004f64:	3dc007f2 	ldr	q18, [sp, #16]
   100004f68:	ad4717e6 	ldp	q6, q5, [sp, #224]
   100004f6c:	3dc043e4 	ldr	q4, [sp, #256]
   100004f70:	ad0303e1 	stp	q1, q0, [sp, #96]
   100004f74:	d2800016 	mov	x22, #0x0                   	// #0
   100004f78:	6f00e400 	movi	v0.2d, #0x0
   100004f7c:	ad020be0 	stp	q0, q2, [sp, #64]
   100004f80:	529ae157 	mov	w23, #0xd70a                	// #55050
   100004f84:	72a79477 	movk	w23, #0x3ca3, lsl #16
   100004f88:	6f00e407 	movi	v7.2d, #0x0
   100004f8c:	6f00e400 	movi	v0.2d, #0x0
   100004f90:	ad011fe0 	stp	q0, q7, [sp, #32]
   100004f94:	14000004 	b	100004fa4 <_rays_to_pixel+0x260>
    .l = SGVec_Load_Const(0.),
    .a = SGVec_Load_Const(0.),
    .b = SGVec_Load_Const(0.)
  };

  for(int c = 0; c < CUBE_NUM; c++) {
   100004f98:	910006d6 	add	x22, x22, #0x1
   100004f9c:	f1006edf 	cmp	x22, #0x1b
   100004fa0:	54001120 	b.eq	1000051c4 <_rays_to_pixel+0x480>  // b.none
    for(int l = 0; l < snapshot->chunks[c]->num_lights; l++) {
   100004fa4:	f8767a88 	ldr	x8, [x20, x22, lsl #3]
   100004fa8:	b9401109 	ldr	w9, [x8, #16]
   100004fac:	34ffff69 	cbz	w9, 100004f98 <_rays_to_pixel+0x254>
   100004fb0:	d2800018 	mov	x24, #0x0                   	// #0
   100004fb4:	14000009 	b	100004fd8 <_rays_to_pixel+0x294>
   100004fb8:	ad4793e5 	ldp	q5, q4, [sp, #240]
   100004fbc:	3dc03be6 	ldr	q6, [sp, #224]
   100004fc0:	3dc007f2 	ldr	q18, [sp, #16]
   100004fc4:	91000718 	add	x24, x24, #0x1
   100004fc8:	f8767a88 	ldr	x8, [x20, x22, lsl #3]
   100004fcc:	b9401109 	ldr	w9, [x8, #16]
   100004fd0:	eb09031f 	cmp	x24, x9
   100004fd4:	54fffe22 	b.cs	100004f98 <_rays_to_pixel+0x254>  // b.hs, b.nlast
      object_t * light = snapshot->chunks[c]->lights[l];
   100004fd8:	f9400d08 	ldr	x8, [x8, #24]
   100004fdc:	f8787915 	ldr	x21, [x8, x24, lsl #3]
      SGVec3D_t ray_to_light = normalize((SGVec3D_t) {
        .x = SGVec_Sub_SGVec(light->origin.x, march_result.point.x),
   100004fe0:	ad4086a0 	ldp	q0, q1, [x21, #16]
   100004fe4:	4ea4d400 	fsub	v0.4s, v0.4s, v4.4s
        .y = SGVec_Sub_SGVec(light->origin.y, march_result.point.y),
   100004fe8:	4ea5d421 	fsub	v1.4s, v1.4s, v5.4s
        .z = SGVec_Sub_SGVec(light->origin.z, march_result.point.z)
   100004fec:	3dc00ea2 	ldr	q2, [x21, #48]
   100004ff0:	4ea6d442 	fsub	v2.4s, v2.4s, v6.4s
    SGVec_Recip_Sqrt(
   100004ff4:	6e20dc03 	fmul	v3.4s, v0.4s, v0.4s
   100004ff8:	4e21cc23 	fmla	v3.4s, v1.4s, v1.4s
   100004ffc:	4e22cc43 	fmla	v3.4s, v2.4s, v2.4s
   100005000:	6ea1d863 	frsqrte	v3.4s, v3.4s
    .x = SGVec_Mult_SGVec(vec.x, recip_magnitude),
   100005004:	6e20dc67 	fmul	v7.4s, v3.4s, v0.4s
    .y = SGVec_Mult_SGVec(vec.y, recip_magnitude),
   100005008:	6e21dc70 	fmul	v16.4s, v3.4s, v1.4s
    .z = SGVec_Mult_SGVec(vec.z, recip_magnitude)
   10000500c:	6e22dc62 	fmul	v2.4s, v3.4s, v2.4s
   100005010:	ad4303e1 	ldp	q1, q0, [sp, #96]
   100005014:	ad059ff0 	stp	q16, q7, [sp, #176]
      });
      SGVecUInt alignment = SGVec_Gtr_Or_Eq_Than(
   100005018:	6e20dce0 	fmul	v0.4s, v7.4s, v0.4s
   10000501c:	4e21ce00 	fmla	v0.4s, v16.4s, v1.4s
   100005020:	3dc017e1 	ldr	q1, [sp, #80]
   100005024:	3d802be2 	str	q2, [sp, #160]
   100005028:	4e21cc40 	fmla	v0.4s, v2.4s, v1.4s
   10000502c:	6ea0c800 	fcmge	v0.4s, v0.4s, #0.0
          normals.z,
          ray_to_light.z
        ),
        SGVec_Load_Const(0.)
      );
      SGVecUInt valid_aligned = SGVecUInt_And(alignment, march_result.validity);
   100005030:	4e321c00 	and	v0.16b, v0.16b, v18.16b
  SGVecShortUInt x_2 = SGVecShortUInt_Fold_Max(SGVecUInt_Bottom_Short(x), SGVecUInt_Top_Short(x));
   100005034:	6e004001 	ext	v1.16b, v0.16b, v0.16b, #8
   100005038:	2ea1a401 	umaxp	v1.2s, v0.2s, v1.2s
  return SGVecShortUInt_Get_Lane(SGVecShortUInt_Fold_Max(x_2, x_2), 0) == 0;
   10000503c:	2ea1a421 	umaxp	v1.2s, v1.2s, v1.2s
   100005040:	1e260028 	fmov	w8, s1
   100005044:	34fffc08 	cbz	w8, 100004fc4 <_rays_to_pixel+0x280>
   100005048:	4ea51ca1 	mov	v1.16b, v5.16b
   10000504c:	4ea61cc2 	mov	v2.16b, v6.16b
   100005050:	0e612808 	xtn	v8.4h, v0.4s
      if (lanes_false(valid_aligned)) continue;

      //we have some rays to bother with!
      SGVec dists = light->distance(light, march_result.point);
   100005054:	f94002a8 	ldr	x8, [x21]
   100005058:	aa1503e0 	mov	x0, x21
   10000505c:	4ea41c80 	mov	v0.16b, v4.16b
   100005060:	d63f0100 	blr	x8
   100005064:	3d8023e0 	str	q0, [sp, #128]
   100005068:	52800019 	mov	w25, #0x0                   	// #0
   10000506c:	6f00e404 	movi	v4.2d, #0x0
   100005070:	ad4707e2 	ldp	q2, q1, [sp, #224]
   100005074:	3dc043e3 	ldr	q3, [sp, #256]
   100005078:	3d8037e4 	str	q4, [sp, #208]
   10000507c:	d280001a 	mov	x26, #0x0                   	// #0
   100005080:	4f026465 	movi	v5.4s, #0x43, lsl #24
   100005084:	ad388fa1 	stp	q1, q3, [x29, #-240]
   100005088:	3c9003a2 	stur	q2, [x29, #-256]
   10000508c:	14000004 	b	10000509c <_rays_to_pixel+0x358>
    for(int c = 0; c < CUBE_NUM; c++) {
   100005090:	9100075a 	add	x26, x26, #0x1
   100005094:	f1006f5f 	cmp	x26, #0x1b
   100005098:	540002c0 	b.eq	1000050f0 <_rays_to_pixel+0x3ac>  // b.none
      for(unsigned int j = 0; j < snapshot->chunks[c]->num_objects; j++) {
   10000509c:	f87a7a88 	ldr	x8, [x20, x26, lsl #3]
   1000050a0:	b9400109 	ldr	w9, [x8]
   1000050a4:	34ffff69 	cbz	w9, 100005090 <_rays_to_pixel+0x34c>
   1000050a8:	d280001b 	mov	x27, #0x0                   	// #0
   1000050ac:	d280001c 	mov	x28, #0x0                   	// #0
   1000050b0:	3c9303a5 	stur	q5, [x29, #-208]
        object_t * o = snapshot->chunks[c]->objects + j;
   1000050b4:	f9400508 	ldr	x8, [x8, #8]
        SGVec dist_candidate = o->distance(o, point);
   1000050b8:	8b1b0100 	add	x0, x8, x27
   1000050bc:	f9400008 	ldr	x8, [x0]
   1000050c0:	4ea31c60 	mov	v0.16b, v3.16b
   1000050c4:	d63f0100 	blr	x8
   1000050c8:	ad7917a3 	ldp	q3, q5, [x29, #-224]
   1000050cc:	ad7807a2 	ldp	q2, q1, [x29, #-256]
        dist_step = SGVec_Minimum(dist_step, dist_candidate);
   1000050d0:	4ea0f4a5 	fmin	v5.4s, v5.4s, v0.4s
      for(unsigned int j = 0; j < snapshot->chunks[c]->num_objects; j++) {
   1000050d4:	9100079c 	add	x28, x28, #0x1
   1000050d8:	f87a7a88 	ldr	x8, [x20, x26, lsl #3]
   1000050dc:	b9400109 	ldr	w9, [x8]
   1000050e0:	9103837b 	add	x27, x27, #0xe0
   1000050e4:	eb09039f 	cmp	x28, x9
   1000050e8:	54fffe43 	b.cc	1000050b0 <_rays_to_pixel+0x36c>  // b.lo, b.ul, b.last
   1000050ec:	17ffffe9 	b	100005090 <_rays_to_pixel+0x34c>
   1000050f0:	3dc037e4 	ldr	q4, [sp, #208]
    dist_tot = SGVec_Add_SGVec(dist_tot, dist_step);
   1000050f4:	4e24d4a4 	fadd	v4.4s, v5.4s, v4.4s
    SGVecUInt max_dist_test = SGVec_Gtr_Or_Eq_Than(dist_tot, SGVec_Load_Const(MAX_DIST));
   1000050f8:	4f026460 	movi	v0.4s, #0x43, lsl #24
   1000050fc:	6e20e480 	fcmge	v0.4s, v4.4s, v0.4s
   100005100:	3dc027e1 	ldr	q1, [sp, #144]
    hit_dist_test = SGVec_Less_Than(dist_step, SGVec_Load_Const(HIT_DIST)); //SGVec_Mult_SGVec(SGVec_Load_Const(dist_tot), SGVec_Load_Const(HIT_DIST));
   100005104:	6ea5e421 	fcmgt	v1.4s, v1.4s, v5.4s
    SGVecUInt complete_test = SGVecUInt_Or(max_dist_test, hit_dist_test);
   100005108:	4ea11c00 	orr	v0.16b, v0.16b, v1.16b
  SGVecShortUInt x_2 = SGVecShortUInt_Fold_Min(SGVecUInt_Bottom_Short(x), SGVecUInt_Top_Short(x));
   10000510c:	6e004001 	ext	v1.16b, v0.16b, v0.16b, #8
   100005110:	2ea1ac00 	uminp	v0.2s, v0.2s, v1.2s
  return ~SGVecShortUInt_Get_Lane(SGVecShortUInt_Fold_Min(x_2, x_2), 0) == 0;
   100005114:	2ea0ac00 	uminp	v0.2s, v0.2s, v0.2s
   100005118:	1e260008 	fmov	w8, s0
   10000511c:	3100051f 	cmn	w8, #0x1
   100005120:	54000180 	b.eq	100005150 <_rays_to_pixel+0x40c>  // b.none
   100005124:	ad478fe1 	ldp	q1, q3, [sp, #240]
   100005128:	3dc033e0 	ldr	q0, [sp, #192]
   10000512c:	4e20cc83 	fmla	v3.4s, v4.4s, v0.4s
   100005130:	3dc02fe0 	ldr	q0, [sp, #176]
   100005134:	4e20cc81 	fmla	v1.4s, v4.4s, v0.4s
   100005138:	3dc03be2 	ldr	q2, [sp, #224]
   10000513c:	3dc02be0 	ldr	q0, [sp, #160]
   100005140:	4e20cc82 	fmla	v2.4s, v4.4s, v0.4s
   100005144:	11000739 	add	w25, w25, #0x1
   100005148:	710fa33f 	cmp	w25, #0x3e8
   10000514c:	54fff961 	b.ne	100005078 <_rays_to_pixel+0x334>  // b.any
   100005150:	3dc023e0 	ldr	q0, [sp, #128]
      march_result_t light_march = ray_march(march_result.point, ray_to_light, snapshot);
      SGVecUInt unobstructed_rays = SGVecUInt_And(
   100005154:	4ea4d402 	fsub	v2.4s, v0.4s, v4.4s
   100005158:	4e040ee1 	dup	v1.4s, w23
   10000515c:	6ea2e421 	fcmgt	v1.4s, v1.4s, v2.4s
   100005160:	0e612821 	xtn	v1.4h, v1.4s
   100005164:	0e281c21 	and	v1.8b, v1.8b, v8.8b
   100005168:	2f10a421 	uxtl	v1.4s, v1.4h
   10000516c:	4f3f5421 	shl	v1.4s, v1.4s, #31
   100005170:	4f210422 	sshr	v2.4s, v1.4s, #31
  SGVecShortUInt x_2 = SGVecShortUInt_Fold_Max(SGVecUInt_Bottom_Short(x), SGVecUInt_Top_Short(x));
   100005174:	6e024041 	ext	v1.16b, v2.16b, v2.16b, #8
   100005178:	2ea1a441 	umaxp	v1.2s, v2.2s, v1.2s
  return SGVecShortUInt_Get_Lane(SGVecShortUInt_Fold_Max(x_2, x_2), 0) == 0;
   10000517c:	2ea1a421 	umaxp	v1.2s, v1.2s, v1.2s
   100005180:	1e260028 	fmov	w8, s1
          ),
          SGVec_Load_Const(2. * HIT_DIST)
        ),
        valid_aligned
      );
      if (lanes_false(unobstructed_rays)) continue;
   100005184:	34fff1a8 	cbz	w8, 100004fb8 <_rays_to_pixel+0x274>

      SGVecOKLAB_t star_color = light->star.get_lighting(&(light->star), dists);
   100005188:	910102a0 	add	x0, x21, #0x40
   10000518c:	f9402aa8 	ldr	x8, [x21, #80]
   100005190:	3c9303a2 	stur	q2, [x29, #-208]
   100005194:	d63f0100 	blr	x8
   100005198:	3cd303a3 	ldur	q3, [x29, #-208]
      SGVec sub_pixel_luminence =  SGVecUInt_Ternary(unobstructed_rays, star_color.l, SGVec_Load_Const(0.));
   10000519c:	4e231c00 	and	v0.16b, v0.16b, v3.16b
   1000051a0:	3dc00be3 	ldr	q3, [sp, #32]
      color = (SGVecOKLAB_t) {
        .l = SGVec_Add_SGVec(color.l,      sub_pixel_luminence),
   1000051a4:	4e20d464 	fadd	v4.4s, v3.4s, v0.4s
   1000051a8:	3dc00fe3 	ldr	q3, [sp, #48]
        .a = SGVec_Add_Mult_SGVec(color.a, sub_pixel_luminence, star_color.a),
   1000051ac:	4e20cc23 	fmla	v3.4s, v1.4s, v0.4s
   1000051b0:	ad010fe4 	stp	q4, q3, [sp, #32]
   1000051b4:	3dc013e1 	ldr	q1, [sp, #64]
        .b = SGVec_Add_Mult_SGVec(color.b, sub_pixel_luminence, star_color.b)
   1000051b8:	4e20cc41 	fmla	v1.4s, v2.4s, v0.4s
   1000051bc:	3d8013e1 	str	q1, [sp, #64]
   1000051c0:	17ffff7e 	b	100004fb8 <_rays_to_pixel+0x274>
   1000051c4:	ad4197e6 	ldp	q6, q5, [sp, #48]
  return color_index;
}

inline
SGVecOKLAB_t normalize_SGVecOKLAB(SGVecOKLAB_t color) {
  SGVec ab_max = SGVec_Maximum(SGVec_Absolute(color.a), SGVec_Absolute(color.b));
   1000051c8:	4ea0f8c0 	fabs	v0.4s, v6.4s
   1000051cc:	4ea0f8a1 	fabs	v1.4s, v5.4s
   1000051d0:	52a85908 	mov	w8, #0x42c80000            	// #1120403456
  SGVecUInt out_of_range = SGVec_Gtr_Than(ab_max, SGVec_Load_Const(100.));
   1000051d4:	4e040d02 	dup	v2.4s, w8
  SGVec ab_max = SGVec_Maximum(SGVec_Absolute(color.a), SGVec_Absolute(color.b));
   1000051d8:	4e21f400 	fmax	v0.4s, v0.4s, v1.4s
  SGVecUInt out_of_range = SGVec_Gtr_Than(ab_max, SGVec_Load_Const(100.));
   1000051dc:	5e0c0401 	mov	s1, v0.s[1]
   1000051e0:	1e270103 	fmov	s3, w8
   1000051e4:	1e232020 	fcmp	s1, s3
   1000051e8:	5a9fc3e8 	csetm	w8, le
   1000051ec:	1e232000 	fcmp	s0, s3
   1000051f0:	5a9fc3e9 	csetm	w9, le
   1000051f4:	1e270121 	fmov	s1, w9
   1000051f8:	4e0c1d01 	mov	v1.s[1], w8
   1000051fc:	5e140404 	mov	s4, v0.s[2]
   100005200:	1e232080 	fcmp	s4, s3
   100005204:	5a9fc3e8 	csetm	w8, le
   100005208:	4e141d01 	mov	v1.s[2], w8
   10000520c:	5e1c0404 	mov	s4, v0.s[3]
   100005210:	1e232080 	fcmp	s4, s3
   100005214:	5a9fc3e8 	csetm	w8, le
   100005218:	4e1c1d01 	mov	v1.s[3], w8
   10000521c:	6ea2e402 	fcmgt	v2.4s, v0.4s, v2.4s
   100005220:	529ae148 	mov	w8, #0xd70a                	// #55050
   100005224:	72a78468 	movk	w8, #0x3c23, lsl #16
  SGVec ab_multiplier = SGVec_Ternary(out_of_range, SGVec_Reciprocal(SGVec_Mult_Float(ab_max, 0.01)), SGVec_Load_Const(1.));
   100005228:	4e040d03 	dup	v3.4s, w8
   10000522c:	6e23dc00 	fmul	v0.4s, v0.4s, v3.4s
   100005230:	4ea1d800 	frecpe	v0.4s, v0.4s
   100005234:	4e221c00 	and	v0.16b, v0.16b, v2.16b
   100005238:	4f03f602 	fmov	v2.4s, #1.000000000000000000e+00
   10000523c:	4e221c21 	and	v1.16b, v1.16b, v2.16b
   100005240:	4ea01c20 	orr	v0.16b, v1.16b, v0.16b
}

inline
SGVec SGVec_Clamp(SGVec x, float min, float max) {
  return SGVec_Minimum(SGVec_Maximum(x, SGVec_Load_Const(min)), SGVec_Load_Const(max));
   100005244:	6f00e401 	movi	v1.2d, #0x0
   100005248:	3dc00be3 	ldr	q3, [sp, #32]
   10000524c:	4e21f461 	fmax	v1.4s, v3.4s, v1.4s
   100005250:	4ea2f431 	fmin	v17.4s, v1.4s, v2.4s

  return (SGVecOKLAB_t) {
    .l = SGVec_Clamp(color.l, 0., 1.),
    .a = SGVec_Mult_SGVec(color.a, ab_multiplier),
   100005254:	6e20dcc1 	fmul	v1.4s, v6.4s, v0.4s
    .b = SGVec_Mult_SGVec(color.b, ab_multiplier)
   100005258:	6e20dca0 	fmul	v0.4s, v5.4s, v0.4s
  }

  color = normalize_SGVecOKLAB(color);


  float color_l[4];  SGVec_Store_Array(color_l, color.l);
   10000525c:	ad3ac7a1 	stp	q1, q17, [x29, #-176]
  float color_a[4];  SGVec_Store_Array(color_a, color.a);
  float color_b[4];  SGVec_Store_Array(color_b, color.b);
   100005260:	3c9403a0 	stur	q0, [x29, #-192]
   100005264:	3dc003e2 	ldr	q2, [sp]
  SGVecShortUInt x_2 = SGVecShortUInt_Fold_Min(SGVecUInt_Bottom_Short(x), SGVecUInt_Top_Short(x));
   100005268:	2ea2ae42 	uminp	v2.2s, v18.2s, v2.2s
  return ~SGVecShortUInt_Get_Lane(SGVecShortUInt_Fold_Min(x_2, x_2), 0) == 0;
   10000526c:	2ea2ac42 	uminp	v2.2s, v2.2s, v2.2s
   100005270:	1e260048 	fmov	w8, s2

  unsigned int shape = 0;
  oklab_t fore = OKLAB_BLACK;
  oklab_t back = OKLAB_BLACK;

  if (lanes_true(march_result.validity)) { //all pixels colored
   100005274:	5e0c0633 	mov	s19, v17.s[1]
   100005278:	5e0c0435 	mov	s21, v1.s[1]
   10000527c:	5e0c0414 	mov	s20, v0.s[1]
   100005280:	5e140624 	mov	s4, v17.s[2]
   100005284:	5e140430 	mov	s16, v1.s[2]
   100005288:	5e140406 	mov	s6, v0.s[2]
   10000528c:	3100051f 	cmn	w8, #0x1
   100005290:	540004c0 	b.eq	100005328 <_rays_to_pixel+0x5e4>  // b.none
      }
    }
  } else { //some black, prioritize edges over color accuracy
    uint32_t validity[4]; SGVecUInt_Store_Array(validity, march_result.validity);
    for (int i = 0; i < 4; i++) {
      if (validity[i]) {
   100005294:	1e260248 	fmov	w8, s18
   100005298:	0e0c3e49 	mov	w9, v18.s[1]
   10000529c:	6e31dc27 	fmul	v7.4s, v1.4s, v17.4s
   1000052a0:	6e31dc05 	fmul	v5.4s, v0.4s, v17.4s
   1000052a4:	34000928 	cbz	w8, 1000053c8 <_rays_to_pixel+0x684>
   1000052a8:	52800028 	mov	w8, #0x1                   	// #1
   1000052ac:	4ea51ca0 	mov	v0.16b, v5.16b
   1000052b0:	4ea71ce1 	mov	v1.16b, v7.16b
   1000052b4:	4eb11e22 	mov	v2.16b, v17.16b
   1000052b8:	0e143e4a 	mov	w10, v18.s[2]
   1000052bc:	340000a9 	cbz	w9, 1000052d0 <_rays_to_pixel+0x58c>
        shape |= 1 << i;
   1000052c0:	321f0108 	orr	w8, w8, #0x2

        float i_l = color_l[i];
        fore.l += i_l;
   1000052c4:	1e222a62 	fadd	s2, s19, s2
        fore.a += color_a[i] * i_l;
   1000052c8:	1f1306a1 	fmadd	s1, s21, s19, s1
        fore.b += color_b[i] * i_l;
   1000052cc:	1f130280 	fmadd	s0, s20, s19, s0
   1000052d0:	0e1c3e49 	mov	w9, v18.s[3]
   1000052d4:	340000aa 	cbz	w10, 1000052e8 <_rays_to_pixel+0x5a4>
        shape |= 1 << i;
   1000052d8:	321e0108 	orr	w8, w8, #0x4
        fore.l += i_l;
   1000052dc:	1e222882 	fadd	s2, s4, s2
        fore.a += color_a[i] * i_l;
   1000052e0:	1f040601 	fmadd	s1, s16, s4, s1
        fore.b += color_b[i] * i_l;
   1000052e4:	1f0400c0 	fmadd	s0, s6, s4, s0
   1000052e8:	2f00e403 	movi	d3, #0x0
      if (validity[i]) {
   1000052ec:	34000109 	cbz	w9, 10000530c <_rays_to_pixel+0x5c8>
   1000052f0:	5e1c0624 	mov	s4, v17.s[3]
        shape |= 1 << i;
   1000052f4:	321d0108 	orr	w8, w8, #0x8
        fore.l += i_l;
   1000052f8:	1e222882 	fadd	s2, s4, s2
        fore.a += color_a[i] * i_l;
   1000052fc:	5e1c04e4 	mov	s4, v7.s[3]
   100005300:	1e212881 	fadd	s1, s4, s1
        fore.b += color_b[i] * i_l;
   100005304:	5e1c04a4 	mov	s4, v5.s[3]
   100005308:	1e202880 	fadd	s0, s4, s0
   10000530c:	2f00e405 	movi	d5, #0x0
   100005310:	2f00e407 	movi	d7, #0x0
   100005314:	14000045 	b	100005428 <_rays_to_pixel+0x6e4>
  if (lanes_false(march_result.validity)) return RAW_PIXEL_BLACK;
   100005318:	a9007e7f 	stp	xzr, xzr, [x19]
   10000531c:	b9001a7f 	str	wzr, [x19, #24]
   100005320:	f9000a7f 	str	xzr, [x19, #16]
   100005324:	14000045 	b	100005438 <_rays_to_pixel+0x6f4>
    SGVecShort max_l_temp = SGVecShort_Fold_Max(SGVec_Bottom_Short(color.l), SGVec_Top_Short(color.l));
   100005328:	6e114222 	ext	v2.16b, v17.16b, v17.16b, #8
   10000532c:	2e22f623 	fmaxp	v3.2s, v17.2s, v2.2s
    float max_l = SGVecShort_Get_Lane(SGVecShort_Fold_Max(max_l_temp, max_l_temp), 0);
   100005330:	2e23f463 	fmaxp	v3.2s, v3.2s, v3.2s
    SGVecShort min_l_temp = SGVecShort_Fold_Min(SGVec_Bottom_Short(color.l), SGVec_Top_Short(color.l));
   100005334:	2ea2f622 	fminp	v2.2s, v17.2s, v2.2s
    float min_l = SGVecShort_Get_Lane(SGVecShort_Fold_Min(min_l_temp, min_l_temp), 0);
   100005338:	2ea2f442 	fminp	v2.2s, v2.2s, v2.2s
    float avg_l = (min_l + max_l) / (float) 2.;
   10000533c:	0e23d442 	fadd	v2.2s, v2.2s, v3.2s
   100005340:	1e2c1003 	fmov	s3, #5.000000000000000000e-01
   100005344:	5f829072 	fmul	s18, s3, v2.s[0]
      if (i_l >= avg_l) {
   100005348:	1e312240 	fcmp	s18, s17
   10000534c:	1a9fc7e8 	cset	w8, le
   100005350:	6e31dc21 	fmul	v1.4s, v1.4s, v17.4s
   100005354:	6e31dc00 	fmul	v0.4s, v0.4s, v17.4s
   100005358:	2f00e402 	movi	d2, #0x0
   10000535c:	1e22cc03 	fcsel	s3, s0, s2, gt
   100005360:	1e22cc25 	fcsel	s5, s1, s2, gt
   100005364:	1e22ce27 	fcsel	s7, s17, s2, gt
   100005368:	1e20cc40 	fcsel	s0, s2, s0, gt
   10000536c:	1e21cc41 	fcsel	s1, s2, s1, gt
   100005370:	1e31cc42 	fcsel	s2, s2, s17, gt
   100005374:	1e322260 	fcmp	s19, s18
   100005378:	5400034a 	b.ge	1000053e0 <_rays_to_pixel+0x69c>  // b.tcont
        back.l += i_l;
   10000537c:	1e272a67 	fadd	s7, s19, s7
        back.a += color_a[i] * i_l;
   100005380:	1f1316a5 	fmadd	s5, s21, s19, s5
        back.b += color_b[i] * i_l;
   100005384:	1f130e83 	fmadd	s3, s20, s19, s3
      if (i_l >= avg_l) {
   100005388:	1e322080 	fcmp	s4, s18
   10000538c:	5400036b 	b.lt	1000053f8 <_rays_to_pixel+0x6b4>  // b.tstop
        shape |= 1 << i;
   100005390:	321e0108 	orr	w8, w8, #0x4
        fore.l += i_l;
   100005394:	1e222882 	fadd	s2, s4, s2
        fore.a += color_a[i] * i_l;
   100005398:	1f040601 	fmadd	s1, s16, s4, s1
        fore.b += color_b[i] * i_l;
   10000539c:	1f0400c0 	fmadd	s0, s6, s4, s0
      float i_l = color_l[i];
   1000053a0:	bc56c3a4 	ldur	s4, [x29, #-148]
      if (i_l >= avg_l) {
   1000053a4:	1e322080 	fcmp	s4, s18
   1000053a8:	5400036b 	b.lt	100005414 <_rays_to_pixel+0x6d0>  // b.tstop
        shape |= 1 << i;
   1000053ac:	321d0108 	orr	w8, w8, #0x8
        fore.l += i_l;
   1000053b0:	1e222882 	fadd	s2, s4, s2
        fore.a += color_a[i] * i_l;
   1000053b4:	bc55c3a6 	ldur	s6, [x29, #-164]
   1000053b8:	1f0404c1 	fmadd	s1, s6, s4, s1
        fore.b += color_b[i] * i_l;
   1000053bc:	bc54c3a6 	ldur	s6, [x29, #-180]
   1000053c0:	1f0400c0 	fmadd	s0, s6, s4, s0
   1000053c4:	14000019 	b	100005428 <_rays_to_pixel+0x6e4>
   1000053c8:	2f00e400 	movi	d0, #0x0
   1000053cc:	2f00e401 	movi	d1, #0x0
   1000053d0:	2f00e402 	movi	d2, #0x0
   1000053d4:	0e143e4a 	mov	w10, v18.s[2]
      if (validity[i]) {
   1000053d8:	35fff749 	cbnz	w9, 1000052c0 <_rays_to_pixel+0x57c>
   1000053dc:	17ffffbd 	b	1000052d0 <_rays_to_pixel+0x58c>
        shape |= 1 << i;
   1000053e0:	321f0108 	orr	w8, w8, #0x2
        fore.l += i_l;
   1000053e4:	1e222a62 	fadd	s2, s19, s2
        fore.a += color_a[i] * i_l;
   1000053e8:	1f1306a1 	fmadd	s1, s21, s19, s1
        fore.b += color_b[i] * i_l;
   1000053ec:	1f130280 	fmadd	s0, s20, s19, s0
      if (i_l >= avg_l) {
   1000053f0:	1e322080 	fcmp	s4, s18
   1000053f4:	54fffcea 	b.ge	100005390 <_rays_to_pixel+0x64c>  // b.tcont
        back.l += i_l;
   1000053f8:	1e272887 	fadd	s7, s4, s7
        back.a += color_a[i] * i_l;
   1000053fc:	bc5583b0 	ldur	s16, [x29, #-168]
   100005400:	1f041605 	fmadd	s5, s16, s4, s5
        back.b += color_b[i] * i_l;
   100005404:	1f040cc3 	fmadd	s3, s6, s4, s3
      float i_l = color_l[i];
   100005408:	bc56c3a4 	ldur	s4, [x29, #-148]
      if (i_l >= avg_l) {
   10000540c:	1e322080 	fcmp	s4, s18
   100005410:	54fffcea 	b.ge	1000053ac <_rays_to_pixel+0x668>  // b.tcont
        back.l += i_l;
   100005414:	1e272887 	fadd	s7, s4, s7
        back.a += color_a[i] * i_l;
   100005418:	bc55c3a6 	ldur	s6, [x29, #-164]
   10000541c:	1f0414c5 	fmadd	s5, s6, s4, s5
        back.b += color_b[i] * i_l;
   100005420:	bc54c3a6 	ldur	s6, [x29, #-180]
   100005424:	1f040cc3 	fmadd	s3, s6, s4, s3
      }
    }
  }

  return (raw_pixel_t) {
    .fore = fore,
   100005428:	2d000662 	stp	s2, s1, [x19]
   10000542c:	2d011e60 	stp	s0, s7, [x19, #8]
    .back = back,
   100005430:	2d020e65 	stp	s5, s3, [x19, #16]
  return (raw_pixel_t) {
   100005434:	b9001a68 	str	w8, [x19, #24]
   100005438:	f85903a8 	ldur	x8, [x29, #-112]
   10000543c:	d503201f 	nop
   100005440:	58015ec9 	ldr	x9, 100008018 <__PromotedConst.1+0xbf8>
   100005444:	f9400129 	ldr	x9, [x9]
   100005448:	eb08013f 	cmp	x9, x8
   10000544c:	54000141 	b.ne	100005474 <_rays_to_pixel+0x730>  // b.any
    .shape = shape
  };
}
   100005450:	9106c3ff 	add	sp, sp, #0x1b0
   100005454:	a9467bfd 	ldp	x29, x30, [sp, #96]
   100005458:	a9454ff4 	ldp	x20, x19, [sp, #80]
   10000545c:	a94457f6 	ldp	x22, x21, [sp, #64]
   100005460:	a9435ff8 	ldp	x24, x23, [sp, #48]
   100005464:	a94267fa 	ldp	x26, x25, [sp, #32]
   100005468:	a9416ffc 	ldp	x28, x27, [sp, #16]
   10000546c:	6cc723e9 	ldp	d9, d8, [sp], #112
   100005470:	d65f03c0 	ret
   100005474:	940006ff 	bl	100007070 <_request_snapshot+0x568>

0000000100005478 <_aspect_ratio_properties>:
#define DEG2RAD(X) (((float) M_PI / (float) 180.) * (float) (X))

static
const float FOV_RAD = DEG2RAD(FOV);

void aspect_ratio_properties(int width, int height) {
   100005478:	a9be4ff4 	stp	x20, x19, [sp, #-32]!
   10000547c:	a9017bfd 	stp	x29, x30, [sp, #16]
   100005480:	910043fd 	add	x29, sp, #0x10
  render_client.width = width;
   100005484:	10041f33 	adr	x19, 10000d868 <_render_client+0x258>
   100005488:	d503201f 	nop
   10000548c:	29000660 	stp	w0, w1, [x19]
  render_client.height = height;
  const int largest_dim = width > (2 * height) ? width : (2 * height);
   100005490:	531f7828 	lsl	w8, w1, #1
  const float x_ratio = (float) width / (float) largest_dim;
   100005494:	1e220000 	scvtf	s0, w0
  const int largest_dim = width > (2 * height) ? width : (2 * height);
   100005498:	6b00011f 	cmp	w8, w0
   10000549c:	1a88b008 	csel	w8, w0, w8, lt  // lt = tstop
  const float x_ratio = (float) width / (float) largest_dim;
   1000054a0:	1e220101 	scvtf	s1, w8
   1000054a4:	1e211802 	fdiv	s2, s0, s1
  const float y_ratio = ((float) 2. * (float) height) / largest_dim;
   1000054a8:	1e220023 	scvtf	s3, w1
   1000054ac:	1e232864 	fadd	s4, s3, s3
   1000054b0:	1e211881 	fdiv	s1, s4, s1
   1000054b4:	5281fb68 	mov	w8, #0xfdb                 	// #4059
   1000054b8:	72a7e928 	movk	w8, #0x3f49, lsl #16
   1000054bc:	1e270104 	fmov	s4, w8

  render_client.rot_finder_x = (x_ratio * FOV_RAD) / (float) width;
   1000054c0:	1e240845 	fmul	s5, s2, s4
   1000054c4:	1e2018a0 	fdiv	s0, s5, s0
  render_client.rot_finder_y = (y_ratio * FOV_RAD) / (float) height;
   1000054c8:	1e240824 	fmul	s4, s1, s4
   1000054cc:	1e231883 	fdiv	s3, s4, s3
  render_client.rot_finder_x = (x_ratio * FOV_RAD) / (float) width;
   1000054d0:	2d020e60 	stp	s0, s3, [x19, #16]
   1000054d4:	1e2a1004 	fmov	s4, #2.500000000000000000e-01
  render_client.quarter_rot_x = render_client.rot_finder_x / (float) 4.;
   1000054d8:	1e240800 	fmul	s0, s0, s4
  render_client.quarter_rot_y = render_client.rot_finder_y / (float) 4.;
   1000054dc:	1e240863 	fmul	s3, s3, s4
  render_client.quarter_rot_x = render_client.rot_finder_x / (float) 4.;
   1000054e0:	2d010e60 	stp	s0, s3, [x19, #8]
   1000054e4:	5281fb68 	mov	w8, #0xfdb                 	// #4059
   1000054e8:	72a7d928 	movk	w8, #0x3ec9, lsl #16
   1000054ec:	1e270100 	fmov	s0, w8
  render_client.half_fov_x = x_ratio * (FOV_RAD / (float) 2.);
   1000054f0:	1e200842 	fmul	s2, s2, s0
  render_client.half_fov_y = y_ratio * (FOV_RAD / (float) 2.);
   1000054f4:	1e200820 	fmul	s0, s1, s0
  render_client.half_fov_x = x_ratio * (FOV_RAD / (float) 2.);
   1000054f8:	2d030262 	stp	s2, s0, [x19, #24]

  render_client.framebuffer = malloc(width * height * sizeof(pixel_t));
   1000054fc:	1b007c34 	mul	w20, w1, w0
   100005500:	52800188 	mov	w8, #0xc                   	// #12
   100005504:	9b287e80 	smull	x0, w20, w8
   100005508:	940006ec 	bl	1000070b8 <_request_snapshot+0x5b0>
   10000550c:	f9001260 	str	x0, [x19, #32]
   100005510:	52800328 	mov	w8, #0x19                  	// #25
  render_client.stream_buffer = malloc(MAX_FRAMEBUFFER_SIZE(width, height) * sizeof(char));
   100005514:	1b087e88 	mul	w8, w20, w8
   100005518:	11002500 	add	w0, w8, #0x9
   10000551c:	940006e7 	bl	1000070b8 <_request_snapshot+0x5b0>
   100005520:	f9001660 	str	x0, [x19, #40]
}
   100005524:	a9417bfd 	ldp	x29, x30, [sp, #16]
   100005528:	a8c24ff4 	ldp	x20, x19, [sp], #32
   10000552c:	d65f03c0 	ret

0000000100005530 <_render_daemon>:

void render_daemon(int width, int height, unsigned int max_colors, ssh_channel channel, unsigned int id) {
   100005530:	d10143ff 	sub	sp, sp, #0x50
   100005534:	a9015ff8 	stp	x24, x23, [sp, #16]
   100005538:	a90257f6 	stp	x22, x21, [sp, #32]
   10000553c:	a9034ff4 	stp	x20, x19, [sp, #48]
   100005540:	a9047bfd 	stp	x29, x30, [sp, #64]
   100005544:	910103fd 	add	x29, sp, #0x40
   100005548:	aa0303f4 	mov	x20, x3
   10000554c:	aa0203f3 	mov	x19, x2
  const int largest_dim = width > (2 * height) ? width : (2 * height);
   100005550:	531f7828 	lsl	w8, w1, #1
  render_client.id = id;
   100005554:	10040615 	adr	x21, 10000d614 <_render_client+0x4>
   100005558:	d503201f 	nop
   10000555c:	b90002a4 	str	w4, [x21]
  render_client.width = width;
   100005560:	b90256a0 	str	w0, [x21, #596]
  render_client.height = height;
   100005564:	b9025aa1 	str	w1, [x21, #600]
  const float x_ratio = (float) width / (float) largest_dim;
   100005568:	1e220000 	scvtf	s0, w0
  const int largest_dim = width > (2 * height) ? width : (2 * height);
   10000556c:	6b00011f 	cmp	w8, w0
   100005570:	1a88b008 	csel	w8, w0, w8, lt  // lt = tstop
  const float x_ratio = (float) width / (float) largest_dim;
   100005574:	1e220101 	scvtf	s1, w8
   100005578:	1e211802 	fdiv	s2, s0, s1
  const float y_ratio = ((float) 2. * (float) height) / largest_dim;
   10000557c:	1e220023 	scvtf	s3, w1
   100005580:	1e232864 	fadd	s4, s3, s3
   100005584:	1e211881 	fdiv	s1, s4, s1
   100005588:	5281fb68 	mov	w8, #0xfdb                 	// #4059
   10000558c:	72a7e928 	movk	w8, #0x3f49, lsl #16
   100005590:	1e270104 	fmov	s4, w8
  render_client.rot_finder_x = (x_ratio * FOV_RAD) / (float) width;
   100005594:	1e240845 	fmul	s5, s2, s4
   100005598:	1e2018a0 	fdiv	s0, s5, s0
   10000559c:	bd0266a0 	str	s0, [x21, #612]
  render_client.rot_finder_y = (y_ratio * FOV_RAD) / (float) height;
   1000055a0:	1e240824 	fmul	s4, s1, s4
   1000055a4:	1e231883 	fdiv	s3, s4, s3
   1000055a8:	bd026aa3 	str	s3, [x21, #616]
   1000055ac:	1e2a1004 	fmov	s4, #2.500000000000000000e-01
  render_client.quarter_rot_x = render_client.rot_finder_x / (float) 4.;
   1000055b0:	1e240800 	fmul	s0, s0, s4
   1000055b4:	bd025ea0 	str	s0, [x21, #604]
  render_client.quarter_rot_y = render_client.rot_finder_y / (float) 4.;
   1000055b8:	1e240860 	fmul	s0, s3, s4
   1000055bc:	bd0262a0 	str	s0, [x21, #608]
   1000055c0:	5281fb68 	mov	w8, #0xfdb                 	// #4059
   1000055c4:	72a7d928 	movk	w8, #0x3ec9, lsl #16
   1000055c8:	1e270100 	fmov	s0, w8
  render_client.half_fov_x = x_ratio * (FOV_RAD / (float) 2.);
   1000055cc:	1e200842 	fmul	s2, s2, s0
   1000055d0:	bd026ea2 	str	s2, [x21, #620]
  render_client.half_fov_y = y_ratio * (FOV_RAD / (float) 2.);
   1000055d4:	1e200820 	fmul	s0, s1, s0
   1000055d8:	bd0272a0 	str	s0, [x21, #624]
  render_client.framebuffer = malloc(width * height * sizeof(pixel_t));
   1000055dc:	1b007c36 	mul	w22, w1, w0
   1000055e0:	52800197 	mov	w23, #0xc                   	// #12
   1000055e4:	9b377ec0 	smull	x0, w22, w23
   1000055e8:	940006b4 	bl	1000070b8 <_request_snapshot+0x5b0>
   1000055ec:	9109d2a8 	add	x8, x21, #0x274
   1000055f0:	f9000100 	str	x0, [x8]
   1000055f4:	52800328 	mov	w8, #0x19                  	// #25
  render_client.stream_buffer = malloc(MAX_FRAMEBUFFER_SIZE(width, height) * sizeof(char));
   1000055f8:	1b087ec8 	mul	w8, w22, w8
   1000055fc:	11002500 	add	w0, w8, #0x9
   100005600:	940006ae 	bl	1000070b8 <_request_snapshot+0x5b0>
   100005604:	9109f2a8 	add	x8, x21, #0x27c
   100005608:	f9000100 	str	x0, [x8]
   10000560c:	529c7188 	mov	w8, #0xe38c                	// #58252
  aspect_ratio_properties(width, height);

  render_client.channel = channel;
   100005610:	f8286ab4 	str	x20, [x21, x8]

  render_client.num_colors = 0;
   100005614:	b90286bf 	str	wzr, [x21, #644]
  render_client.colors = malloc(max_colors * sizeof(oklab_t));
   100005618:	9bb77e60 	umull	x0, w19, w23
   10000561c:	940006a7 	bl	1000070b8 <_request_snapshot+0x5b0>
   100005620:	910a32a8 	add	x8, x21, #0x28c
   100005624:	f9000100 	str	x0, [x8]

  //INSTALL COLORS HERE
  for (int i = 0; i < 16; i++) {
   100005628:	340004b3 	cbz	w19, 1000056bc <_render_daemon+0x18c>
   10000562c:	52800021 	mov	w1, #0x1                   	// #1
}

inline
bool install_color(oklab_t color, unsigned int max_colors, oklab_t * color_storage, unsigned int * num_colors) {
  if(*num_colors >= max_colors) return false;
  color_storage[(*num_colors)++] = color;
   100005630:	90000048 	adrp	x8, 10000d000 <_nblessings_header+0x1000>
   100005634:	b9089901 	str	w1, [x8, #2200]
   100005638:	f900001f 	str	xzr, [x0]
   10000563c:	b900081f 	str	wzr, [x0, #8]
  if(*num_colors >= max_colors) return false;
   100005640:	7100067f 	cmp	w19, #0x1
   100005644:	54000401 	b.ne	1000056c4 <_render_daemon+0x194>  // b.any
   100005648:	6b13003f 	cmp	w1, w19
   10000564c:	540004c3 	b.cc	1000056e4 <_render_daemon+0x1b4>  // b.lo, b.ul, b.last
   100005650:	6b13003f 	cmp	w1, w19
   100005654:	540005c3 	b.cc	10000570c <_render_daemon+0x1dc>  // b.lo, b.ul, b.last
   100005658:	6b13003f 	cmp	w1, w19
   10000565c:	540006c3 	b.cc	100005734 <_render_daemon+0x204>  // b.lo, b.ul, b.last
   100005660:	6b13003f 	cmp	w1, w19
   100005664:	540007c3 	b.cc	10000575c <_render_daemon+0x22c>  // b.lo, b.ul, b.last
   100005668:	6b13003f 	cmp	w1, w19
   10000566c:	540008c3 	b.cc	100005784 <_render_daemon+0x254>  // b.lo, b.ul, b.last
   100005670:	6b13003f 	cmp	w1, w19
   100005674:	540009c3 	b.cc	1000057ac <_render_daemon+0x27c>  // b.lo, b.ul, b.last
   100005678:	6b13003f 	cmp	w1, w19
   10000567c:	54000ac3 	b.cc	1000057d4 <_render_daemon+0x2a4>  // b.lo, b.ul, b.last
   100005680:	6b13003f 	cmp	w1, w19
   100005684:	54000bc3 	b.cc	1000057fc <_render_daemon+0x2cc>  // b.lo, b.ul, b.last
   100005688:	6b13003f 	cmp	w1, w19
   10000568c:	54000cc3 	b.cc	100005824 <_render_daemon+0x2f4>  // b.lo, b.ul, b.last
   100005690:	6b13003f 	cmp	w1, w19
   100005694:	54000dc3 	b.cc	10000584c <_render_daemon+0x31c>  // b.lo, b.ul, b.last
   100005698:	6b13003f 	cmp	w1, w19
   10000569c:	54000ec3 	b.cc	100005874 <_render_daemon+0x344>  // b.lo, b.ul, b.last
   1000056a0:	6b13003f 	cmp	w1, w19
   1000056a4:	54000fc3 	b.cc	10000589c <_render_daemon+0x36c>  // b.lo, b.ul, b.last
   1000056a8:	6b13003f 	cmp	w1, w19
   1000056ac:	540010c3 	b.cc	1000058c4 <_render_daemon+0x394>  // b.lo, b.ul, b.last
   1000056b0:	6b13003f 	cmp	w1, w19
   1000056b4:	540011c3 	b.cc	1000058ec <_render_daemon+0x3bc>  // b.lo, b.ul, b.last
   1000056b8:	14000095 	b	10000590c <_render_daemon+0x3dc>
   1000056bc:	52800001 	mov	w1, #0x0                   	// #0
   1000056c0:	14000093 	b	10000590c <_render_daemon+0x3dc>
   1000056c4:	52800041 	mov	w1, #0x2                   	// #2
  color_storage[(*num_colors)++] = color;
   1000056c8:	b9089901 	str	w1, [x8, #2200]
   1000056cc:	d503201f 	nop
   1000056d0:	5c00e300 	ldr	d0, 100007330 <_pixel_selector_byte+0x10>
   1000056d4:	fc00c000 	stur	d0, [x0, #12]
   1000056d8:	b900141f 	str	wzr, [x0, #20]
  if(*num_colors >= max_colors) return false;
   1000056dc:	6b13003f 	cmp	w1, w19
   1000056e0:	54fffb82 	b.cs	100005650 <_render_daemon+0x120>  // b.hs, b.nlast
  color_storage[(*num_colors)++] = color;
   1000056e4:	52800189 	mov	w9, #0xc                   	// #12
   1000056e8:	9ba90029 	umaddl	x9, w1, w9, x0
   1000056ec:	11000421 	add	w1, w1, #0x1
   1000056f0:	b9089901 	str	w1, [x8, #2200]
   1000056f4:	d503201f 	nop
   1000056f8:	5c00e200 	ldr	d0, 100007338 <_pixel_selector_byte+0x18>
   1000056fc:	fd000120 	str	d0, [x9]
   100005700:	b900093f 	str	wzr, [x9, #8]
  if(*num_colors >= max_colors) return false;
   100005704:	6b13003f 	cmp	w1, w19
   100005708:	54fffa82 	b.cs	100005658 <_render_daemon+0x128>  // b.hs, b.nlast
  color_storage[(*num_colors)++] = color;
   10000570c:	52800189 	mov	w9, #0xc                   	// #12
   100005710:	9ba90029 	umaddl	x9, w1, w9, x0
   100005714:	11000421 	add	w1, w1, #0x1
   100005718:	b9089901 	str	w1, [x8, #2200]
   10000571c:	d503201f 	nop
   100005720:	5c00e100 	ldr	d0, 100007340 <_pixel_selector_byte+0x20>
   100005724:	fd000120 	str	d0, [x9]
   100005728:	b900093f 	str	wzr, [x9, #8]
  if(*num_colors >= max_colors) return false;
   10000572c:	6b13003f 	cmp	w1, w19
   100005730:	54fff982 	b.cs	100005660 <_render_daemon+0x130>  // b.hs, b.nlast
  color_storage[(*num_colors)++] = color;
   100005734:	52800189 	mov	w9, #0xc                   	// #12
   100005738:	9ba90029 	umaddl	x9, w1, w9, x0
   10000573c:	11000421 	add	w1, w1, #0x1
   100005740:	b9089901 	str	w1, [x8, #2200]
   100005744:	d503201f 	nop
   100005748:	5c00e000 	ldr	d0, 100007348 <_pixel_selector_byte+0x28>
   10000574c:	fd000120 	str	d0, [x9]
   100005750:	b900093f 	str	wzr, [x9, #8]
  if(*num_colors >= max_colors) return false;
   100005754:	6b13003f 	cmp	w1, w19
   100005758:	54fff882 	b.cs	100005668 <_render_daemon+0x138>  // b.hs, b.nlast
  color_storage[(*num_colors)++] = color;
   10000575c:	52800189 	mov	w9, #0xc                   	// #12
   100005760:	9ba90029 	umaddl	x9, w1, w9, x0
   100005764:	11000421 	add	w1, w1, #0x1
   100005768:	b9089901 	str	w1, [x8, #2200]
   10000576c:	d503201f 	nop
   100005770:	5c00df00 	ldr	d0, 100007350 <_pixel_selector_byte+0x30>
   100005774:	fd000120 	str	d0, [x9]
   100005778:	b900093f 	str	wzr, [x9, #8]
  if(*num_colors >= max_colors) return false;
   10000577c:	6b13003f 	cmp	w1, w19
   100005780:	54fff782 	b.cs	100005670 <_render_daemon+0x140>  // b.hs, b.nlast
  color_storage[(*num_colors)++] = color;
   100005784:	52800189 	mov	w9, #0xc                   	// #12
   100005788:	9ba90029 	umaddl	x9, w1, w9, x0
   10000578c:	11000421 	add	w1, w1, #0x1
   100005790:	b9089901 	str	w1, [x8, #2200]
   100005794:	d503201f 	nop
   100005798:	5c00de00 	ldr	d0, 100007358 <_pixel_selector_byte+0x38>
   10000579c:	fd000120 	str	d0, [x9]
   1000057a0:	b900093f 	str	wzr, [x9, #8]
  if(*num_colors >= max_colors) return false;
   1000057a4:	6b13003f 	cmp	w1, w19
   1000057a8:	54fff682 	b.cs	100005678 <_render_daemon+0x148>  // b.hs, b.nlast
  color_storage[(*num_colors)++] = color;
   1000057ac:	52800189 	mov	w9, #0xc                   	// #12
   1000057b0:	9ba90029 	umaddl	x9, w1, w9, x0
   1000057b4:	11000421 	add	w1, w1, #0x1
   1000057b8:	b9089901 	str	w1, [x8, #2200]
   1000057bc:	d503201f 	nop
   1000057c0:	5c00dd00 	ldr	d0, 100007360 <_pixel_selector_byte+0x40>
   1000057c4:	fd000120 	str	d0, [x9]
   1000057c8:	b900093f 	str	wzr, [x9, #8]
  if(*num_colors >= max_colors) return false;
   1000057cc:	6b13003f 	cmp	w1, w19
   1000057d0:	54fff582 	b.cs	100005680 <_render_daemon+0x150>  // b.hs, b.nlast
  color_storage[(*num_colors)++] = color;
   1000057d4:	52800189 	mov	w9, #0xc                   	// #12
   1000057d8:	9ba90029 	umaddl	x9, w1, w9, x0
   1000057dc:	11000421 	add	w1, w1, #0x1
   1000057e0:	b9089901 	str	w1, [x8, #2200]
   1000057e4:	d503201f 	nop
   1000057e8:	5c00dc00 	ldr	d0, 100007368 <_pixel_selector_byte+0x48>
   1000057ec:	fd000120 	str	d0, [x9]
   1000057f0:	b900093f 	str	wzr, [x9, #8]
  if(*num_colors >= max_colors) return false;
   1000057f4:	6b13003f 	cmp	w1, w19
   1000057f8:	54fff482 	b.cs	100005688 <_render_daemon+0x158>  // b.hs, b.nlast
  color_storage[(*num_colors)++] = color;
   1000057fc:	52800189 	mov	w9, #0xc                   	// #12
   100005800:	9ba90029 	umaddl	x9, w1, w9, x0
   100005804:	11000421 	add	w1, w1, #0x1
   100005808:	b9089901 	str	w1, [x8, #2200]
   10000580c:	d503201f 	nop
   100005810:	5c00db00 	ldr	d0, 100007370 <_pixel_selector_byte+0x50>
   100005814:	fd000120 	str	d0, [x9]
   100005818:	b900093f 	str	wzr, [x9, #8]
  if(*num_colors >= max_colors) return false;
   10000581c:	6b13003f 	cmp	w1, w19
   100005820:	54fff382 	b.cs	100005690 <_render_daemon+0x160>  // b.hs, b.nlast
  color_storage[(*num_colors)++] = color;
   100005824:	52800189 	mov	w9, #0xc                   	// #12
   100005828:	9ba90029 	umaddl	x9, w1, w9, x0
   10000582c:	11000421 	add	w1, w1, #0x1
   100005830:	b9089901 	str	w1, [x8, #2200]
   100005834:	d503201f 	nop
   100005838:	5c00da00 	ldr	d0, 100007378 <_pixel_selector_byte+0x58>
   10000583c:	fd000120 	str	d0, [x9]
   100005840:	b900093f 	str	wzr, [x9, #8]
  if(*num_colors >= max_colors) return false;
   100005844:	6b13003f 	cmp	w1, w19
   100005848:	54fff282 	b.cs	100005698 <_render_daemon+0x168>  // b.hs, b.nlast
  color_storage[(*num_colors)++] = color;
   10000584c:	52800189 	mov	w9, #0xc                   	// #12
   100005850:	9ba90029 	umaddl	x9, w1, w9, x0
   100005854:	11000421 	add	w1, w1, #0x1
   100005858:	b9089901 	str	w1, [x8, #2200]
   10000585c:	d503201f 	nop
   100005860:	5c00d900 	ldr	d0, 100007380 <_pixel_selector_byte+0x60>
   100005864:	fd000120 	str	d0, [x9]
   100005868:	b900093f 	str	wzr, [x9, #8]
  if(*num_colors >= max_colors) return false;
   10000586c:	6b13003f 	cmp	w1, w19
   100005870:	54fff182 	b.cs	1000056a0 <_render_daemon+0x170>  // b.hs, b.nlast
  color_storage[(*num_colors)++] = color;
   100005874:	52800189 	mov	w9, #0xc                   	// #12
   100005878:	9ba90029 	umaddl	x9, w1, w9, x0
   10000587c:	11000421 	add	w1, w1, #0x1
   100005880:	b9089901 	str	w1, [x8, #2200]
   100005884:	d503201f 	nop
   100005888:	5c00d800 	ldr	d0, 100007388 <_pixel_selector_byte+0x68>
   10000588c:	fd000120 	str	d0, [x9]
   100005890:	b900093f 	str	wzr, [x9, #8]
  if(*num_colors >= max_colors) return false;
   100005894:	6b13003f 	cmp	w1, w19
   100005898:	54fff082 	b.cs	1000056a8 <_render_daemon+0x178>  // b.hs, b.nlast
  color_storage[(*num_colors)++] = color;
   10000589c:	52800189 	mov	w9, #0xc                   	// #12
   1000058a0:	9ba90029 	umaddl	x9, w1, w9, x0
   1000058a4:	11000421 	add	w1, w1, #0x1
   1000058a8:	b9089901 	str	w1, [x8, #2200]
   1000058ac:	d503201f 	nop
   1000058b0:	5c00d700 	ldr	d0, 100007390 <_pixel_selector_byte+0x70>
   1000058b4:	fd000120 	str	d0, [x9]
   1000058b8:	b900093f 	str	wzr, [x9, #8]
  if(*num_colors >= max_colors) return false;
   1000058bc:	6b13003f 	cmp	w1, w19
   1000058c0:	54ffef82 	b.cs	1000056b0 <_render_daemon+0x180>  // b.hs, b.nlast
  color_storage[(*num_colors)++] = color;
   1000058c4:	52800189 	mov	w9, #0xc                   	// #12
   1000058c8:	9ba90029 	umaddl	x9, w1, w9, x0
   1000058cc:	11000421 	add	w1, w1, #0x1
   1000058d0:	b9089901 	str	w1, [x8, #2200]
   1000058d4:	d503201f 	nop
   1000058d8:	5c00d600 	ldr	d0, 100007398 <_pixel_selector_byte+0x78>
   1000058dc:	fd000120 	str	d0, [x9]
   1000058e0:	b900093f 	str	wzr, [x9, #8]
  if(*num_colors >= max_colors) return false;
   1000058e4:	6b13003f 	cmp	w1, w19
   1000058e8:	54000122 	b.cs	10000590c <_render_daemon+0x3dc>  // b.hs, b.nlast
  color_storage[(*num_colors)++] = color;
   1000058ec:	52800189 	mov	w9, #0xc                   	// #12
   1000058f0:	9ba90029 	umaddl	x9, w1, w9, x0
   1000058f4:	11000421 	add	w1, w1, #0x1
   1000058f8:	b9089901 	str	w1, [x8, #2200]
   1000058fc:	d503201f 	nop
   100005900:	5c00d500 	ldr	d0, 1000073a0 <_pixel_selector_byte+0x80>
   100005904:	fd000120 	str	d0, [x9]
   100005908:	b900093f 	str	wzr, [x9, #8]
      .b = 0.
    }, max_colors, render_client.colors, &(render_client.num_colors));
  }

  unsigned int header_len;
  unsigned char * header_data = nblessings_header_data(render_client.colors, render_client.num_colors, &header_len);
   10000590c:	910033e2 	add	x2, sp, #0xc
   100005910:	97fffa0e 	bl	100004148 <_nblessings_header_data>
   100005914:	aa0003e1 	mov	x1, x0

  // printf("max_colors: %u, num_colors: %u\n", max_colors, render_client.num_colors);
  // printf("header_len: %u, header: %s\n", header_len, header_data);

  ssh_channel_write(render_client.channel, header_data, header_len);
   100005918:	1003f853 	adr	x19, 10000d820 <_render_client+0x210>
   10000591c:	d503201f 	nop
   100005920:	529c3008 	mov	w8, #0xe180                	// #57728
   100005924:	f8686a60 	ldr	x0, [x19, x8]
   100005928:	b9400fe2 	ldr	w2, [sp, #12]
   10000592c:	94000631 	bl	1000071f0 <_request_snapshot+0x6e8>

  render_client.pixel_jobs = NULL;
   100005930:	f900467f 	str	xzr, [x19, #136]

  MTX_INIT(render_client.mtx);
   100005934:	91002260 	add	x0, x19, #0x8
   100005938:	d2800001 	mov	x1, #0x0                   	// #0
   10000593c:	940005fa 	bl	100007124 <_request_snapshot+0x61c>
  SEM_INIT(render_client.sem, 2);
   100005940:	52800000 	mov	w0, #0x0                   	// #0
   100005944:	52800041 	mov	w1, #0x2                   	// #2
   100005948:	5280f002 	mov	w2, #0x780                 	// #1920
   10000594c:	94000608 	bl	10000716c <_request_snapshot+0x664>
   100005950:	b9000260 	str	w0, [x19]
  SEM_SETVAL(render_client.sem, 0, 0);
   100005954:	d503201f 	nop
   100005958:	5800d294 	ldr	x20, 1000073a8 <_pixel_selector_byte+0x88>
   10000595c:	f90003f4 	str	x20, [sp]
   100005960:	52800001 	mov	w1, #0x0                   	// #0
   100005964:	52800102 	mov	w2, #0x8                   	// #8
   100005968:	940005fe 	bl	100007160 <_request_snapshot+0x658>
  SEM_SETVAL(render_client.sem, 1, 0);
   10000596c:	b9400260 	ldr	w0, [x19]
   100005970:	f90003f4 	str	x20, [sp]
   100005974:	52800021 	mov	w1, #0x1                   	// #1
   100005978:	52800102 	mov	w2, #0x8                   	// #8
   10000597c:	940005f9 	bl	100007160 <_request_snapshot+0x658>
   100005980:	d2800015 	mov	x21, #0x0                   	// #0
   100005984:	1003e474 	adr	x20, 10000d610 <_render_client>
   100005988:	d503201f 	nop
   10000598c:	10000333 	adr	x19, 1000059f0 <_pixel_task>
   100005990:	d503201f 	nop
  for (int i = 0; i < NUM_THREADS; i++) pthread_create(render_client.pixel_worker_pids + i, NULL, pixel_task, (void *) NULL);
   100005994:	8b150288 	add	x8, x20, x21
   100005998:	91004100 	add	x0, x8, #0x10
   10000599c:	d2800001 	mov	x1, #0x0                   	// #0
   1000059a0:	aa1303e2 	mov	x2, x19
   1000059a4:	d2800003 	mov	x3, #0x0                   	// #0
   1000059a8:	940005d9 	bl	10000710c <_request_snapshot+0x604>
   1000059ac:	910022b5 	add	x21, x21, #0x8
   1000059b0:	f10802bf 	cmp	x21, #0x200
   1000059b4:	54ffff01 	b.ne	100005994 <_render_daemon+0x464>  // b.any
  pthread_create(&(render_client.pid), NULL, render_task, (void *) NULL);
   1000059b8:	91002280 	add	x0, x20, #0x8
   1000059bc:	10001782 	adr	x2, 100005cac <_render_task>
   1000059c0:	d503201f 	nop
   1000059c4:	d2800001 	mov	x1, #0x0                   	// #0
   1000059c8:	d2800003 	mov	x3, #0x0                   	// #0
   1000059cc:	940005d0 	bl	10000710c <_request_snapshot+0x604>
   1000059d0:	52800028 	mov	w8, #0x1                   	// #1

  render_client.active = true;
   1000059d4:	39000288 	strb	w8, [x20]
}
   1000059d8:	a9447bfd 	ldp	x29, x30, [sp, #64]
   1000059dc:	a9434ff4 	ldp	x20, x19, [sp, #48]
   1000059e0:	a94257f6 	ldp	x22, x21, [sp, #32]
   1000059e4:	a9415ff8 	ldp	x24, x23, [sp, #16]
   1000059e8:	910143ff 	add	sp, sp, #0x50
   1000059ec:	d65f03c0 	ret

00000001000059f0 <_pixel_task>:
void * pixel_task(void * nothing) {
   1000059f0:	d102c3ff 	sub	sp, sp, #0xb0
   1000059f4:	a9056ffc 	stp	x28, x27, [sp, #80]
   1000059f8:	a90667fa 	stp	x26, x25, [sp, #96]
   1000059fc:	a9075ff8 	stp	x24, x23, [sp, #112]
   100005a00:	a90857f6 	stp	x22, x21, [sp, #128]
   100005a04:	a9094ff4 	stp	x20, x19, [sp, #144]
   100005a08:	a90a7bfd 	stp	x29, x30, [sp, #160]
   100005a0c:	910283fd 	add	x29, sp, #0xa0
   100005a10:	1000cd08 	adr	x8, 1000073b0 <_pixel_selector_byte+0x90>
   100005a14:	d503201f 	nop
   100005a18:	b9400116 	ldr	w22, [x8]
   100005a1c:	79400917 	ldrh	w23, [x8, #4]
   100005a20:	1003f018 	adr	x24, 10000d820 <_render_client+0x210>
   100005a24:	d503201f 	nop
   100005a28:	7000ffb3 	adr	x19, 100007a1f <__PromotedConst.1+0x5ff>
   100005a2c:	d503201f 	nop
   100005a30:	5000cc28 	adr	x8, 1000073b6 <_pixel_selector_byte+0x96>
   100005a34:	d503201f 	nop
   100005a38:	b940011b 	ldr	w27, [x8]
   100005a3c:	7940091c 	ldrh	w28, [x8, #4]
   100005a40:	1400001b 	b	100005aac <_pixel_task+0xbc>
   100005a44:	52800015 	mov	w21, #0x0                   	// #0
   100005a48:	52800019 	mov	w25, #0x0                   	// #0
      .shape = raw_pixel.shape
   100005a4c:	b9404bfa 	ldr	w26, [sp, #72]
   100005a50:	12001f48 	and	w8, w26, #0xff
    printf("pixel [y: %.2u, x: %.2u]: fore: %u, back: %u, shape: %u\n", job->y, job->x, pixel.fore, pixel.back, pixel.shape);
   100005a54:	2948268a 	ldp	w10, w9, [x20, #64]
   100005a58:	a901a3f9 	stp	x25, x8, [sp, #24]
   100005a5c:	a900d7ea 	stp	x10, x21, [sp, #8]
   100005a60:	f90003e9 	str	x9, [sp]
   100005a64:	aa1303e0 	mov	x0, x19
   100005a68:	940005a3 	bl	1000070f4 <_request_snapshot+0x5ec>
    render_client.framebuffer[job->y * render_client.width + job->x] = pixel;
   100005a6c:	f9403708 	ldr	x8, [x24, #104]
   100005a70:	b9404b09 	ldr	w9, [x24, #72]
   100005a74:	29482a8b 	ldp	w11, w10, [x20, #64]
   100005a78:	1b0a2d29 	madd	w9, w9, w10, w11
   100005a7c:	5280018a 	mov	w10, #0xc                   	// #12
   100005a80:	9baa2128 	umaddl	x8, w9, w10, x8
   100005a84:	29006515 	stp	w21, w25, [x8]
   100005a88:	3900211a 	strb	w26, [x8, #8]
    free(job);
   100005a8c:	aa1403e0 	mov	x0, x20
   100005a90:	94000587 	bl	1000070ac <_request_snapshot+0x5a4>
    SEM_POST(render_client.sem, 1);
   100005a94:	b9002bfb 	str	w27, [sp, #40]
   100005a98:	79005bfc 	strh	w28, [sp, #44]
   100005a9c:	b9400300 	ldr	w0, [x24]
   100005aa0:	9100a3e1 	add	x1, sp, #0x28
   100005aa4:	52800022 	mov	w2, #0x1                   	// #1
   100005aa8:	940005b4 	bl	100007178 <_request_snapshot+0x670>
    SEM_WAIT(render_client.sem, 0);
   100005aac:	b90033f6 	str	w22, [sp, #48]
   100005ab0:	79006bf7 	strh	w23, [sp, #52]
   100005ab4:	b9400300 	ldr	w0, [x24]
   100005ab8:	9100c3e1 	add	x1, sp, #0x30
   100005abc:	52800022 	mov	w2, #0x1                   	// #1
   100005ac0:	940005ae 	bl	100007178 <_request_snapshot+0x670>
    MTX_LOCK(render_client.mtx);
   100005ac4:	91002315 	add	x21, x24, #0x8
   100005ac8:	aa1503e0 	mov	x0, x21
   100005acc:	94000599 	bl	100007130 <_request_snapshot+0x628>
    job = render_client.pixel_jobs;
   100005ad0:	f9404714 	ldr	x20, [x24, #136]
    render_client.pixel_jobs = render_client.pixel_jobs->next;
   100005ad4:	f9402688 	ldr	x8, [x20, #72]
   100005ad8:	f9004708 	str	x8, [x24, #136]
    MTX_UNLOCK(render_client.mtx);
   100005adc:	aa1503e0 	mov	x0, x21
   100005ae0:	94000597 	bl	10000713c <_request_snapshot+0x634>
    SGVec3D_t rays = create_rays(render_client.snapshot.self->ship.orientation, job->rot_x_sin, job->rot_x_cos, job->rot_y_sin, job->rot_y_cos);
   100005ae4:	529c2e08 	mov	w8, #0xe170                	// #57712
   100005ae8:	f8686b08 	ldr	x8, [x24, x8]
   100005aec:	91024300 	add	x0, x24, #0x90
   100005af0:	ad410680 	ldp	q0, q1, [x20, #32]
   100005af4:	ad400e82 	ldp	q2, q3, [x20]
   100005af8:	ad421504 	ldp	q4, q5, [x8, #64]
   100005afc:	ad431d06 	ldp	q6, q7, [x8, #96]
   100005b00:	ad444510 	ldp	q16, q17, [x8, #128]
   100005b04:	ad454d12 	ldp	q18, q19, [x8, #160]
   100005b08:	3dc03114 	ldr	q20, [x8, #192]
SGVec3D_t;

inline
SGVec3D_t rot_vec3d(SGVec rots_sin, SGVec rots_cos, SGVec3D_t axis, SGVec3D_t p) {
  //Q
  SGVec q_x = SGVec_Mult_SGVec(axis.x, rots_sin);
   100005b0c:	6e20de52 	fmul	v18.4s, v18.4s, v0.4s
  SGVec q_y = SGVec_Mult_SGVec(axis.y, rots_sin);
   100005b10:	6e20de73 	fmul	v19.4s, v19.4s, v0.4s
  SGVec q_z = SGVec_Mult_SGVec(axis.z, rots_sin);
   100005b14:	6e20de80 	fmul	v0.4s, v20.4s, v0.4s
  SGVec qXp_y_1 = SGVec_Mult_SGVec(p.y, q_s);
  SGVec qXp_z_1 = SGVec_Mult_SGVec(p.z, q_s);

  //qXp_[xyz]_2 is 0 since p_s = 0

  SGVec qXp_x_3 = SGVec_Sub_SGVec(
   100005b18:	6e26de74 	fmul	v20.4s, v19.4s, v6.4s
   100005b1c:	4ea5cc14 	fmls	v20.4s, v0.4s, v5.4s
                    SGVec_Mult_SGVec(q_y, p.z),
                    SGVec_Mult_SGVec(q_z, p.y)
                  );
  SGVec qXp_y_3 = SGVec_Sub_SGVec(
   100005b20:	6e24dc15 	fmul	v21.4s, v0.4s, v4.4s
   100005b24:	4ea6ce55 	fmls	v21.4s, v18.4s, v6.4s
                    SGVec_Mult_SGVec(q_z, p.x),
                    SGVec_Mult_SGVec(q_x, p.z)
                  );
  SGVec qXp_z_3 = SGVec_Sub_SGVec(
   100005b28:	6e25de56 	fmul	v22.4s, v18.4s, v5.4s
   100005b2c:	4ea4ce76 	fmls	v22.4s, v19.4s, v4.4s
                    SGVec_Mult_SGVec(q_x, p.y),
                    SGVec_Mult_SGVec(q_y, p.x)
                  );

  SGVec qXp_x = SGVec_Add_SGVec(qXp_x_1, qXp_x_3);
   100005b30:	4e21cc94 	fmla	v20.4s, v4.4s, v1.4s
  SGVec qXp_y = SGVec_Add_SGVec(qXp_y_1, qXp_y_3);
   100005b34:	4e21ccb5 	fmla	v21.4s, v5.4s, v1.4s
  SGVec qXp_z = SGVec_Add_SGVec(qXp_z_1, qXp_z_3);
   100005b38:	4e21ccd6 	fmla	v22.4s, v6.4s, v1.4s
  SGVec qXp_s = SGVec_Negate(
   100005b3c:	6e24de44 	fmul	v4.4s, v18.4s, v4.4s
   100005b40:	4e25ce64 	fmla	v4.4s, v19.4s, v5.4s
   100005b44:	4e26cc04 	fmla	v4.4s, v0.4s, v6.4s
  SGVec nq_y = SGVec_Negate(q_y);
  SGVec nq_z = SGVec_Negate(q_z);
  //nq_s = q_s

  SGVec qXpXnq_x_1 = SGVec_Mult_SGVec(nq_x, qXp_s);
  SGVec qXpXnq_y_1 = SGVec_Mult_SGVec(nq_y, qXp_s);
   100005b48:	6e33dc85 	fmul	v5.4s, v4.4s, v19.4s
  SGVec qXpXnq_z_1 = SGVec_Mult_SGVec(nq_z, qXp_s);
   100005b4c:	6e20dc86 	fmul	v6.4s, v4.4s, v0.4s

  SGVec qXpXnq_x_2 = SGVec_Mult_SGVec(qXp_x, q_s);
  SGVec qXpXnq_y_2 = SGVec_Mult_SGVec(qXp_y, q_s);
  SGVec qXpXnq_z_2 = SGVec_Mult_SGVec(qXp_z, q_s);

  SGVec qXpXnq_x_3 = SGVec_Sub_SGVec(
   100005b50:	6e33ded7 	fmul	v23.4s, v22.4s, v19.4s
  SGVec qXpXnq_z_3 = SGVec_Sub_SGVec(
                       SGVec_Mult_SGVec(qXp_x, nq_y),
                       SGVec_Mult_SGVec(qXp_y, nq_x)
                     );

  SGVec r_x = SGVec_Add_SGVec(
   100005b54:	4e32cc97 	fmla	v23.4s, v4.4s, v18.4s
  SGVec qXpXnq_x_3 = SGVec_Sub_SGVec(
   100005b58:	4e21ce97 	fmla	v23.4s, v20.4s, v1.4s
  SGVec r_x = SGVec_Add_SGVec(
   100005b5c:	4eb5cc17 	fmls	v23.4s, v0.4s, v21.4s
                  qXpXnq_x_1,
                  qXpXnq_x_2
                ),
                qXpXnq_x_3
              );
  SGVec r_y = SGVec_Add_SGVec(
   100005b60:	4eb6ce45 	fmls	v5.4s, v18.4s, v22.4s
  SGVec qXpXnq_y_3 = SGVec_Sub_SGVec(
   100005b64:	4e20ce85 	fmla	v5.4s, v20.4s, v0.4s
  SGVec r_y = SGVec_Add_SGVec(
   100005b68:	4e21cea5 	fmla	v5.4s, v21.4s, v1.4s
                  qXpXnq_y_1,
                  qXpXnq_y_2
                ),
                qXpXnq_y_3
              );
  SGVec r_z = SGVec_Add_SGVec(
   100005b6c:	4e21cec6 	fmla	v6.4s, v22.4s, v1.4s
  SGVec qXpXnq_z_3 = SGVec_Sub_SGVec(
   100005b70:	4e32cea6 	fmla	v6.4s, v21.4s, v18.4s
  SGVec r_z = SGVec_Add_SGVec(
   100005b74:	4eb4ce66 	fmls	v6.4s, v19.4s, v20.4s
  SGVec q_x = SGVec_Mult_SGVec(axis.x, rots_sin);
   100005b78:	6e22dce4 	fmul	v4.4s, v7.4s, v2.4s
  SGVec q_y = SGVec_Mult_SGVec(axis.y, rots_sin);
   100005b7c:	6e22de07 	fmul	v7.4s, v16.4s, v2.4s
  SGVec q_z = SGVec_Mult_SGVec(axis.z, rots_sin);
   100005b80:	6e22de30 	fmul	v16.4s, v17.4s, v2.4s
  SGVec qXp_x_3 = SGVec_Sub_SGVec(
   100005b84:	6e27dcd1 	fmul	v17.4s, v6.4s, v7.4s
   100005b88:	4eb0ccb1 	fmls	v17.4s, v5.4s, v16.4s
  SGVec qXp_y_3 = SGVec_Sub_SGVec(
   100005b8c:	6e30def2 	fmul	v18.4s, v23.4s, v16.4s
   100005b90:	4ea4ccd2 	fmls	v18.4s, v6.4s, v4.4s
  SGVec qXp_z_3 = SGVec_Sub_SGVec(
   100005b94:	6e24dcb3 	fmul	v19.4s, v5.4s, v4.4s
   100005b98:	4ea7cef3 	fmls	v19.4s, v23.4s, v7.4s
  SGVec qXp_x = SGVec_Add_SGVec(qXp_x_1, qXp_x_3);
   100005b9c:	4e23cef1 	fmla	v17.4s, v23.4s, v3.4s
  SGVec qXp_y = SGVec_Add_SGVec(qXp_y_1, qXp_y_3);
   100005ba0:	4e23ccb2 	fmla	v18.4s, v5.4s, v3.4s
  SGVec qXp_z = SGVec_Add_SGVec(qXp_z_1, qXp_z_3);
   100005ba4:	4e23ccd3 	fmla	v19.4s, v6.4s, v3.4s
  SGVec qXp_s = SGVec_Negate(
   100005ba8:	6e24def4 	fmul	v20.4s, v23.4s, v4.4s
   100005bac:	4e27ccb4 	fmla	v20.4s, v5.4s, v7.4s
   100005bb0:	4e30ccd4 	fmla	v20.4s, v6.4s, v16.4s
  SGVec qXpXnq_x_3 = SGVec_Sub_SGVec(
   100005bb4:	6e27de60 	fmul	v0.4s, v19.4s, v7.4s
  SGVec qXpXnq_y_3 = SGVec_Sub_SGVec(
   100005bb8:	6e30de21 	fmul	v1.4s, v17.4s, v16.4s
  SGVec qXpXnq_z_3 = SGVec_Sub_SGVec(
   100005bbc:	6e24de42 	fmul	v2.4s, v18.4s, v4.4s
  SGVec r_x = SGVec_Add_SGVec(
   100005bc0:	4e24ce80 	fmla	v0.4s, v20.4s, v4.4s
  SGVec qXpXnq_x_3 = SGVec_Sub_SGVec(
   100005bc4:	4e23ce20 	fmla	v0.4s, v17.4s, v3.4s
  SGVec r_x = SGVec_Add_SGVec(
   100005bc8:	4eb2ce00 	fmls	v0.4s, v16.4s, v18.4s
  SGVec r_y = SGVec_Add_SGVec(
   100005bcc:	4e27ce81 	fmla	v1.4s, v20.4s, v7.4s
  SGVec qXpXnq_y_3 = SGVec_Sub_SGVec(
   100005bd0:	4e23ce41 	fmla	v1.4s, v18.4s, v3.4s
  SGVec r_y = SGVec_Add_SGVec(
   100005bd4:	4eb3cc81 	fmls	v1.4s, v4.4s, v19.4s
  SGVec r_z = SGVec_Add_SGVec(
   100005bd8:	4e30ce82 	fmla	v2.4s, v20.4s, v16.4s
  SGVec qXpXnq_z_3 = SGVec_Sub_SGVec(
   100005bdc:	4e23ce62 	fmla	v2.4s, v19.4s, v3.4s
  SGVec r_z = SGVec_Add_SGVec(
   100005be0:	4eb1cce2 	fmls	v2.4s, v7.4s, v17.4s
    raw_pixel_t raw_pixel = rays_to_pixel(rays, &(render_client.snapshot));
   100005be4:	9100c3e8 	add	x8, sp, #0x30
   100005be8:	97fffc57 	bl	100004d44 <_rays_to_pixel>
      .fore = closest_color_index(raw_pixel.fore, render_client.colors, render_client.num_colors),
   100005bec:	b9407b08 	ldr	w8, [x24, #120]
  for (int i = 0; i < num_colors; i++) {
   100005bf0:	34fff2a8 	cbz	w8, 100005a44 <_pixel_task+0x54>
   100005bf4:	d280000a 	mov	x10, #0x0                   	// #0
   100005bf8:	52800015 	mov	w21, #0x0                   	// #0
   100005bfc:	f9404309 	ldr	x9, [x24, #128]
   100005c00:	bd4033e0 	ldr	s0, [sp, #48]
   100005c04:	fc4343e1 	ldur	d1, [sp, #52]
   100005c08:	91001129 	add	x9, x9, #0x4
   100005c0c:	12b0100b 	mov	w11, #0x7f7fffff            	// #2139095039
   100005c10:	1e270162 	fmov	s2, w11
   100005c14:	aa0903eb 	mov	x11, x9
    float color_delta = delta_E(colors[i], color);
   100005c18:	bc5fc163 	ldur	s3, [x11, #-4]
   100005c1c:	fc40c564 	ldr	d4, [x11], #12

#define OKLAB_BLACK (oklab_t) {.l = 0., .a = 0., .b = 0.}

inline
float delta_E(oklab_t x, oklab_t y) {
  float delta_l = x.l - y.l;
   100005c20:	1e203863 	fsub	s3, s3, s0
  float c1 = sqrtf(x.a * x.a + x.b * x.b);
  float c2 = sqrtf(y.a * y.a + y.b * y.b);
  float delta_c = c1 - c2;
  float delta_a = x.a - y.a;
   100005c24:	0ea1d484 	fsub	v4.2s, v4.2s, v1.2s
  float delta_b = x.b - y.b;
  float delta_h = sqrtf(delta_a * delta_a + delta_b * delta_b - delta_c * delta_c);
   100005c28:	2e24dc84 	fmul	v4.2s, v4.2s, v4.2s
   100005c2c:	1f031063 	fmadd	s3, s3, s3, s4
  float delta_E_OK = sqrtf(delta_l * delta_l + delta_c * delta_c + delta_h * delta_h);
   100005c30:	5e0c0484 	mov	s4, v4.s[1]
   100005c34:	1e242863 	fadd	s3, s3, s4
   100005c38:	1e21c063 	fsqrt	s3, s3
    if (color_delta < delta) {
   100005c3c:	1e222060 	fcmp	s3, s2
   100005c40:	1a95b155 	csel	w21, w10, w21, lt  // lt = tstop
   100005c44:	1e227862 	fminnm	s2, s3, s2
  for (int i = 0; i < num_colors; i++) {
   100005c48:	9100054a 	add	x10, x10, #0x1
   100005c4c:	eb0a011f 	cmp	x8, x10
   100005c50:	54fffe41 	b.ne	100005c18 <_pixel_task+0x228>  // b.any
   100005c54:	d280000a 	mov	x10, #0x0                   	// #0
   100005c58:	52800019 	mov	w25, #0x0                   	// #0
      .back = closest_color_index(raw_pixel.back, render_client.colors, render_client.num_colors),
   100005c5c:	bd403fe0 	ldr	s0, [sp, #60]
   100005c60:	fd4023e1 	ldr	d1, [sp, #64]
   100005c64:	12b0100b 	mov	w11, #0x7f7fffff            	// #2139095039
   100005c68:	1e270162 	fmov	s2, w11
    float color_delta = delta_E(colors[i], color);
   100005c6c:	bc5fc123 	ldur	s3, [x9, #-4]
   100005c70:	fc40c524 	ldr	d4, [x9], #12
  float delta_l = x.l - y.l;
   100005c74:	1e203863 	fsub	s3, s3, s0
  float delta_a = x.a - y.a;
   100005c78:	0ea1d484 	fsub	v4.2s, v4.2s, v1.2s
  float delta_h = sqrtf(delta_a * delta_a + delta_b * delta_b - delta_c * delta_c);
   100005c7c:	2e24dc84 	fmul	v4.2s, v4.2s, v4.2s
   100005c80:	1f031063 	fmadd	s3, s3, s3, s4
  float delta_E_OK = sqrtf(delta_l * delta_l + delta_c * delta_c + delta_h * delta_h);
   100005c84:	5e0c0484 	mov	s4, v4.s[1]
   100005c88:	1e242863 	fadd	s3, s3, s4
   100005c8c:	1e21c063 	fsqrt	s3, s3
    if (color_delta < delta) {
   100005c90:	1e222060 	fcmp	s3, s2
   100005c94:	1a99b159 	csel	w25, w10, w25, lt  // lt = tstop
   100005c98:	1e227862 	fminnm	s2, s3, s2
  for (int i = 0; i < num_colors; i++) {
   100005c9c:	9100054a 	add	x10, x10, #0x1
   100005ca0:	eb0a011f 	cmp	x8, x10
   100005ca4:	54fffe41 	b.ne	100005c6c <_pixel_task+0x27c>  // b.any
   100005ca8:	17ffff69 	b	100005a4c <_pixel_task+0x5c>

0000000100005cac <_render_task>:
void * render_task(void * nothing) {
   100005cac:	a9ba6ffc 	stp	x28, x27, [sp, #-96]!
   100005cb0:	a90167fa 	stp	x26, x25, [sp, #16]
   100005cb4:	a9025ff8 	stp	x24, x23, [sp, #32]
   100005cb8:	a90357f6 	stp	x22, x21, [sp, #48]
   100005cbc:	a9044ff4 	stp	x20, x19, [sp, #64]
   100005cc0:	a9057bfd 	stp	x29, x30, [sp, #80]
   100005cc4:	910143fd 	add	x29, sp, #0x50
   100005cc8:	529c2e09 	mov	w9, #0xe170                	// #57712
   100005ccc:	d503201f 	nop
   100005cd0:	58011990 	ldr	x16, 100008000 <__PromotedConst.1+0xbe0>
   100005cd4:	d63f0200 	blr	x16
   100005cd8:	d1403bff 	sub	sp, sp, #0xe, lsl #12
   100005cdc:	d105c3ff 	sub	sp, sp, #0x170
   100005ce0:	1003da1a 	adr	x26, 10000d820 <_render_client+0x210>
   100005ce4:	d503201f 	nop
   100005ce8:	1003c95b 	adr	x27, 10000d610 <_render_client>
   100005cec:	d503201f 	nop
   100005cf0:	1003dc3c 	adr	x28, 10000d874 <_render_client+0x264>
   100005cf4:	d503201f 	nop
   100005cf8:	1000b6c8 	adr	x8, 1000073d0 <_fps_ts+0x10>
   100005cfc:	d503201f 	nop
   100005d00:	b9400119 	ldr	w25, [x8]
   100005d04:	79400913 	ldrh	w19, [x8, #4]
   100005d08:	90000054 	adrp	x20, 10000d000 <_nblessings_header+0x1000>
   100005d0c:	1003c855 	adr	x21, 10000d614 <_render_client+0x4>
   100005d10:	d503201f 	nop
    render_client.snapshot = request_snapshot(render_client.id);
   100005d14:	b94002a0 	ldr	w0, [x21]
   100005d18:	9101c3e8 	add	x8, sp, #0x70
   100005d1c:	9400037b 	bl	100006b08 <_request_snapshot>
   100005d20:	910a72a0 	add	x0, x21, #0x29c
   100005d24:	9101c3e1 	add	x1, sp, #0x70
   100005d28:	529c1e02 	mov	w2, #0xe0f0                	// #57584
   100005d2c:	940004e6 	bl	1000070c4 <_request_snapshot+0x5bc>
  if (render_client.pixel_jobs != NULL) {
   100005d30:	910a52a8 	add	x8, x21, #0x294
   100005d34:	f9400108 	ldr	x8, [x8]
   100005d38:	b4000088 	cbz	x8, 100005d48 <_render_task+0x9c>
    printf("Alert: Unfinished framebuffer? Jobs remaining\n");
   100005d3c:	1000e8e0 	adr	x0, 100007a58 <__PromotedConst.1+0x638>
   100005d40:	d503201f 	nop
   100005d44:	94000504 	bl	100007154 <_request_snapshot+0x64c>
   100005d48:	1003d908 	adr	x8, 10000d868 <_render_client+0x258>
   100005d4c:	d503201f 	nop
  for (int y = 0; y < render_client.height; y++) {
   100005d50:	29405915 	ldp	w21, w22, [x8]
   100005d54:	710006df 	cmp	w22, #0x1
   100005d58:	7a41aaa8 	ccmp	w21, #0x1, #0x8, ge  // ge = tcont
   100005d5c:	540004ca 	b.ge	100005df4 <_render_task+0x148>  // b.tcont
    nanosleep(&fps_ts, NULL);
   100005d60:	1000b300 	adr	x0, 1000073c0 <_fps_ts>
   100005d64:	d503201f 	nop
   100005d68:	d2800001 	mov	x1, #0x0                   	// #0
   100005d6c:	940004df 	bl	1000070e8 <_request_snapshot+0x5e0>
  SEM_WAITVAL(render_client.sem, 1, render_client.width * render_client.height);
   100005d70:	52800028 	mov	w8, #0x1                   	// #1
   100005d74:	7900e3e8 	strh	w8, [sp, #112]
   100005d78:	29492748 	ldp	w8, w9, [x26, #72]
   100005d7c:	1b08fd28 	mneg	w8, w9, w8
   100005d80:	7900e7e8 	strh	w8, [sp, #114]
   100005d84:	7900ebff 	strh	wzr, [sp, #116]
   100005d88:	b9400340 	ldr	w0, [x26]
   100005d8c:	9101c3e1 	add	x1, sp, #0x70
   100005d90:	52800022 	mov	w2, #0x1                   	// #1
   100005d94:	940004f9 	bl	100007178 <_request_snapshot+0x670>
  unsigned int len = rasterize_frame(render_client.framebuffer, render_client.width * render_client.height, render_client.stream_buffer);
   100005d98:	29492748 	ldp	w8, w9, [x26, #72]
   100005d9c:	1b087d21 	mul	w1, w9, w8
   100005da0:	a9468b40 	ldp	x0, x2, [x26, #104]
   100005da4:	97fff9a4 	bl	100004434 <_rasterize_frame>
   100005da8:	aa0003e2 	mov	x2, x0
  ssh_channel_write(render_client.channel, render_client.stream_buffer, len);
   100005dac:	529c3008 	mov	w8, #0xe180                	// #57728
   100005db0:	f8686b40 	ldr	x0, [x26, x8]
   100005db4:	f9403b41 	ldr	x1, [x26, #112]
   100005db8:	9400050e 	bl	1000071f0 <_request_snapshot+0x6e8>
   100005dbc:	d2800015 	mov	x21, #0x0                   	// #0
      free(render_client.snapshot.chunks[i]->objects);
   100005dc0:	8b150376 	add	x22, x27, x21
   100005dc4:	f94152c8 	ldr	x8, [x22, #672]
   100005dc8:	f9400500 	ldr	x0, [x8, #8]
   100005dcc:	940004b8 	bl	1000070ac <_request_snapshot+0x5a4>
      free(render_client.snapshot.chunks[i]->lights);
   100005dd0:	f94152c8 	ldr	x8, [x22, #672]
   100005dd4:	f9400d00 	ldr	x0, [x8, #24]
   100005dd8:	940004b5 	bl	1000070ac <_request_snapshot+0x5a4>
      free(render_client.snapshot.chunks[i]);
   100005ddc:	f94152c0 	ldr	x0, [x22, #672]
   100005de0:	940004b3 	bl	1000070ac <_request_snapshot+0x5a4>
    for(int i = 0; i < CUBE_NUM; i++) {
   100005de4:	910022b5 	add	x21, x21, #0x8
   100005de8:	f10362bf 	cmp	x21, #0xd8
   100005dec:	54fffea1 	b.ne	100005dc0 <_render_task+0x114>  // b.any
   100005df0:	17ffffc7 	b	100005d0c <_render_task+0x60>
   100005df4:	52800018 	mov	w24, #0x0                   	// #0
   100005df8:	14000004 	b	100005e08 <_render_task+0x15c>
  for (int y = 0; y < render_client.height; y++) {
   100005dfc:	11000718 	add	w24, w24, #0x1
   100005e00:	6b16031f 	cmp	w24, w22
   100005e04:	54fffaea 	b.ge	100005d60 <_render_task+0xb4>  // b.tcont
    const float rot_y = y * render_client.rot_finder_y - render_client.half_fov_y;
   100005e08:	1e220300 	scvtf	s0, w24
   100005e0c:	bd400b81 	ldr	s1, [x28, #8]
   100005e10:	bd401382 	ldr	s2, [x28, #16]
   100005e14:	1f208820 	fnmsub	s0, s1, s0, s2
    const float rot_y_neg = rot_y - render_client.quarter_rot_y;
   100005e18:	bd400381 	ldr	s1, [x28]
   100005e1c:	0ea1d402 	fsub	v2.2s, v0.2s, v1.2s
   100005e20:	0e21d400 	fadd	v0.2s, v0.2s, v1.2s
   100005e24:	0e040400 	dup	v0.2s, v0.s[0]
   100005e28:	6e040440 	mov	v0.s[0], v2.s[0]
   100005e2c:	3d8017e0 	str	q0, [sp, #80]
    const float rot_y_neg_sin = sinf(rot_y_neg);
   100005e30:	5e0c0400 	mov	s0, v0.s[1]
   100005e34:	9400048c 	bl	100007064 <_request_snapshot+0x55c>
   100005e38:	fd0013e0 	str	d0, [sp, #32]
   100005e3c:	fd001be1 	str	d1, [sp, #48]
   100005e40:	3dc017e0 	ldr	q0, [sp, #80]
   100005e44:	94000488 	bl	100007064 <_request_snapshot+0x55c>
    for (int x = 0; x < render_client.width; x++) {
   100005e48:	710006bf 	cmp	w21, #0x1
   100005e4c:	54fffd8b 	b.lt	100005dfc <_render_task+0x150>  // b.tstop
   100005e50:	4ea11c22 	mov	v2.16b, v1.16b
   100005e54:	52800017 	mov	w23, #0x0                   	// #0
   100005e58:	3dc00be4 	ldr	q4, [sp, #32]
   100005e5c:	6e0c0480 	mov	v0.s[1], v4.s[0]
   100005e60:	910143e8 	add	x8, sp, #0x50
   100005e64:	4c00ad00 	st1	{v0.2d, v1.2d}, [x8]
   100005e68:	3dc00fe0 	ldr	q0, [sp, #48]
   100005e6c:	6e0c0402 	mov	v2.s[1], v0.s[0]
   100005e70:	9100c3e8 	add	x8, sp, #0x30
   100005e74:	4c00ad02 	st1	{v2.2d, v3.2d}, [x8]
      const float rot_x = x * render_client.rot_finder_x - render_client.half_fov_x;
   100005e78:	1e2202e0 	scvtf	s0, w23
   100005e7c:	bd405b41 	ldr	s1, [x26, #88]
   100005e80:	bd406342 	ldr	s2, [x26, #96]
   100005e84:	1f208820 	fnmsub	s0, s1, s0, s2
      const float rot_x_neg = rot_x - render_client.quarter_rot_x;
   100005e88:	bd405341 	ldr	s1, [x26, #80]
   100005e8c:	0ea1d402 	fsub	v2.2s, v0.2s, v1.2s
   100005e90:	0e21d400 	fadd	v0.2s, v0.2s, v1.2s
   100005e94:	0e040400 	dup	v0.2s, v0.s[0]
   100005e98:	6e040440 	mov	v0.s[0], v2.s[0]
   100005e9c:	3d8003e0 	str	q0, [sp]
      const float rot_x_neg_sin = sinf(rot_x_neg);
   100005ea0:	94000471 	bl	100007064 <_request_snapshot+0x55c>
   100005ea4:	fd0013e0 	str	d0, [sp, #32]
   100005ea8:	fd000be1 	str	d1, [sp, #16]
   100005eac:	3dc003e0 	ldr	q0, [sp]
   100005eb0:	5e0c0400 	mov	s0, v0.s[1]
   100005eb4:	9400046c 	bl	100007064 <_request_snapshot+0x55c>
   100005eb8:	3dc00be3 	ldr	q3, [sp, #32]
   100005ebc:	4ea31c62 	mov	v2.16b, v3.16b
   100005ec0:	6e0c0402 	mov	v2.s[1], v0.s[0]
   100005ec4:	6e140462 	mov	v2.s[2], v3.s[0]
   100005ec8:	6e1c0402 	mov	v2.s[3], v0.s[0]
   100005ecc:	3d800be2 	str	q2, [sp, #32]
   100005ed0:	3dc007e0 	ldr	q0, [sp, #16]
      const float rot_x_neg_cos = cosf(rot_x_neg);
   100005ed4:	4ea01c02 	mov	v2.16b, v0.16b
   100005ed8:	6e0c0422 	mov	v2.s[1], v1.s[0]
   100005edc:	6e140402 	mov	v2.s[2], v0.s[0]
   100005ee0:	6e1c0422 	mov	v2.s[3], v1.s[0]
   100005ee4:	3d8007e2 	str	q2, [sp, #16]
      pixel_job_t * job = malloc(sizeof(pixel_job_t));
   100005ee8:	52800a00 	mov	w0, #0x50                  	// #80
   100005eec:	94000473 	bl	1000070b8 <_request_snapshot+0x5b0>
   100005ef0:	aa0003f5 	mov	x21, x0
   100005ef4:	910143e8 	add	x8, sp, #0x50
   100005ef8:	4c40ad00 	ld1	{v0.2d, v1.2d}, [x8]
      *job = (pixel_job_t) {
   100005efc:	4ea01c01 	mov	v1.16b, v0.16b
   100005f00:	aa0003e8 	mov	x8, x0
   100005f04:	910143e9 	add	x9, sp, #0x50
   100005f08:	4c00ad20 	st1	{v0.2d, v1.2d}, [x9]
   100005f0c:	0c9f8900 	st2	{v0.2s, v1.2s}, [x8], #16
   100005f10:	9100c3e9 	add	x9, sp, #0x30
   100005f14:	4c40ad20 	ld1	{v0.2d, v1.2d}, [x9]
   100005f18:	4ea01c01 	mov	v1.16b, v0.16b
   100005f1c:	9100c3e9 	add	x9, sp, #0x30
   100005f20:	4c00ad20 	st1	{v0.2d, v1.2d}, [x9]
   100005f24:	0c008900 	st2	{v0.2s, v1.2s}, [x8]
   100005f28:	ad408be0 	ldp	q0, q2, [sp, #16]
   100005f2c:	ad010002 	stp	q2, q0, [x0, #32]
   100005f30:	29086017 	stp	w23, w24, [x0, #64]
   100005f34:	f900241f 	str	xzr, [x0, #72]
      MTX_LOCK(render_client.mtx);
   100005f38:	91002356 	add	x22, x26, #0x8
   100005f3c:	aa1603e0 	mov	x0, x22
   100005f40:	9400047c 	bl	100007130 <_request_snapshot+0x628>
      job->next = render_client.pixel_jobs;
   100005f44:	f9404748 	ldr	x8, [x26, #136]
   100005f48:	f90026a8 	str	x8, [x21, #72]
      render_client.pixel_jobs = job;
   100005f4c:	f9004755 	str	x21, [x26, #136]
      MTX_UNLOCK(render_client.mtx);
   100005f50:	aa1603e0 	mov	x0, x22
   100005f54:	9400047a 	bl	10000713c <_request_snapshot+0x634>
      SEM_POST(render_client.sem, 0);
   100005f58:	b90073f9 	str	w25, [sp, #112]
   100005f5c:	7900ebf3 	strh	w19, [sp, #116]
   100005f60:	b9400340 	ldr	w0, [x26]
   100005f64:	9101c3e1 	add	x1, sp, #0x70
   100005f68:	52800022 	mov	w2, #0x1                   	// #1
   100005f6c:	94000483 	bl	100007178 <_request_snapshot+0x670>
    for (int x = 0; x < render_client.width; x++) {
   100005f70:	110006f7 	add	w23, w23, #0x1
   100005f74:	b9404b55 	ldr	w21, [x26, #72]
   100005f78:	6b1502ff 	cmp	w23, w21
   100005f7c:	54fff7eb 	b.lt	100005e78 <_render_task+0x1cc>  // b.tstop
  for (int y = 0; y < render_client.height; y++) {
   100005f80:	b9486e96 	ldr	w22, [x20, #2156]
   100005f84:	17ffff9e 	b	100005dfc <_render_task+0x150>

0000000100005f88 <_end_render_daemon>:

void end_render_daemon() {
   100005f88:	a9bd57f6 	stp	x22, x21, [sp, #-48]!
   100005f8c:	a9014ff4 	stp	x20, x19, [sp, #16]
   100005f90:	a9027bfd 	stp	x29, x30, [sp, #32]
   100005f94:	910083fd 	add	x29, sp, #0x20
  if (!render_client.active) return;
   100005f98:	90000053 	adrp	x19, 10000d000 <_nblessings_header+0x1000>
   100005f9c:	39584268 	ldrb	w8, [x19, #1552]
   100005fa0:	34000488 	cbz	w8, 100006030 <_end_render_daemon+0xa8>

  pthread_cancel(render_client.pid);
   100005fa4:	d503201f 	nop
   100005fa8:	5803b380 	ldr	x0, 10000d618 <_render_client+0x8>
   100005fac:	94000455 	bl	100007100 <_request_snapshot+0x5f8>
   100005fb0:	d2800014 	mov	x20, #0x0                   	// #0
   100005fb4:	1003b2f5 	adr	x21, 10000d610 <_render_client>
   100005fb8:	d503201f 	nop
  for (int i = 0; i < NUM_THREADS; i++) pthread_cancel(render_client.pixel_worker_pids[i]);
   100005fbc:	8b1402a8 	add	x8, x21, x20
   100005fc0:	f9400900 	ldr	x0, [x8, #16]
   100005fc4:	9400044f 	bl	100007100 <_request_snapshot+0x5f8>
   100005fc8:	91002294 	add	x20, x20, #0x8
   100005fcc:	f108029f 	cmp	x20, #0x200
   100005fd0:	54ffff61 	b.ne	100005fbc <_end_render_daemon+0x34>  // b.any
  SEM_DESTROY(render_client.sem);
   100005fd4:	1003c274 	adr	x20, 10000d820 <_render_client+0x210>
   100005fd8:	d503201f 	nop
   100005fdc:	b9400280 	ldr	w0, [x20]
   100005fe0:	52800001 	mov	w1, #0x0                   	// #0
   100005fe4:	52800002 	mov	w2, #0x0                   	// #0
   100005fe8:	9400045e 	bl	100007160 <_request_snapshot+0x658>
  MTX_DESTROY(render_client.mtx);
   100005fec:	91002280 	add	x0, x20, #0x8
   100005ff0:	9400044a 	bl	100007118 <_request_snapshot+0x610>

  free(render_client.colors);
   100005ff4:	f9404280 	ldr	x0, [x20, #128]
   100005ff8:	9400042d 	bl	1000070ac <_request_snapshot+0x5a4>
  free(render_client.framebuffer);
   100005ffc:	f9403680 	ldr	x0, [x20, #104]
   100006000:	9400042b 	bl	1000070ac <_request_snapshot+0x5a4>
  free(render_client.stream_buffer);
   100006004:	f9403a80 	ldr	x0, [x20, #112]
   100006008:	94000429 	bl	1000070ac <_request_snapshot+0x5a4>
  while(render_client.pixel_jobs) {
   10000600c:	f9404680 	ldr	x0, [x20, #136]
   100006010:	b40000e0 	cbz	x0, 10000602c <_end_render_daemon+0xa4>
   100006014:	f0000034 	adrp	x20, 10000d000 <_nblessings_header+0x1000>
    pixel_job_t * job = render_client.pixel_jobs;
    render_client.pixel_jobs = job->next;
   100006018:	f9402408 	ldr	x8, [x0, #72]
   10000601c:	f9045688 	str	x8, [x20, #2216]
    free(job);
   100006020:	94000423 	bl	1000070ac <_request_snapshot+0x5a4>
  while(render_client.pixel_jobs) {
   100006024:	f9445680 	ldr	x0, [x20, #2216]
   100006028:	b5ffff80 	cbnz	x0, 100006018 <_end_render_daemon+0x90>
  // TODO
  // unsigned int footer_len;
  // unsigned char * footer_data = nblessings_footer_data(, &header_len);
  // ssh_channel_write(render_client.channel, footer_data, footer_len);

  render_client.active = false;
   10000602c:	3918427f 	strb	wzr, [x19, #1552]
}
   100006030:	a9427bfd 	ldp	x29, x30, [sp, #32]
   100006034:	a9414ff4 	ldp	x20, x19, [sp, #16]
   100006038:	a8c357f6 	ldp	x22, x21, [sp], #48
   10000603c:	d65f03c0 	ret

0000000100006040 <_ssh_daemon>:
  reset_ssh_client(ssh_client);

  return EXIT_SUCCESS;
}

void ssh_daemon(void) {
   100006040:	d10243ff 	sub	sp, sp, #0x90
   100006044:	a9036ffc 	stp	x28, x27, [sp, #48]
   100006048:	a90467fa 	stp	x26, x25, [sp, #64]
   10000604c:	a9055ff8 	stp	x24, x23, [sp, #80]
   100006050:	a90657f6 	stp	x22, x21, [sp, #96]
   100006054:	a9074ff4 	stp	x20, x19, [sp, #112]
   100006058:	a9087bfd 	stp	x29, x30, [sp, #128]
   10000605c:	910203fd 	add	x29, sp, #0x80
   100006060:	52820014 	mov	w20, #0x1000                	// #4096
   100006064:	72a00034 	movk	w20, #0x1, lsl #16
  // signal(SIGCHLD, SIG_IGN);

  ssh_db_t * ssh_db = (ssh_db_t *) mmap(NULL, sizeof(ssh_db_t), PROT_READ | PROT_WRITE, MAP_SHARED | MAP_ANONYMOUS, -1, 0);
   100006068:	b2780281 	orr	x1, x20, #0x100
   10000606c:	d2800000 	mov	x0, #0x0                   	// #0
   100006070:	52800062 	mov	w2, #0x3                   	// #3
   100006074:	52820023 	mov	w3, #0x1001                	// #4097
   100006078:	12800004 	mov	w4, #0xffffffff            	// #-1
   10000607c:	d2800005 	mov	x5, #0x0                   	// #0
   100006080:	94000414 	bl	1000070d0 <_request_snapshot+0x5c8>
   100006084:	aa0003f3 	mov	x19, x0
   100006088:	d2800008 	mov	x8, #0x0                   	// #0
   10000608c:	52802009 	mov	w9, #0x100                 	// #256
   100006090:	10010c8a 	adr	x10, 100008220 <_session_callbacks>
   100006094:	d503201f 	nop
   100006098:	ad400540 	ldp	q0, q1, [x10]
   10000609c:	ad410d42 	ldp	q2, q3, [x10, #32]
   1000060a0:	3dc01144 	ldr	q4, [x10, #64]
   1000060a4:	f940294a 	ldr	x10, [x10, #80]
   1000060a8:	1001078e 	adr	x14, 100008198 <_channel_callbacks>
   1000060ac:	d503201f 	nop
   1000060b0:	ad4019c5 	ldp	q5, q6, [x14]
   1000060b4:	ad4141c7 	ldp	q7, q16, [x14, #32]
   1000060b8:	ad4249d1 	ldp	q17, q18, [x14, #64]
   1000060bc:	ad4351d3 	ldp	q19, q20, [x14, #96]
   1000060c0:	52800b0b 	mov	w11, #0x58                  	// #88
   1000060c4:	5280110c 	mov	w12, #0x88                  	// #136
   1000060c8:	5282000d 	mov	w13, #0x1000                	// #4096
   1000060cc:	72a0002d 	movk	w13, #0x1, lsl #16
   1000060d0:	f94041ce 	ldr	x14, [x14, #128]

  for(size_t i = 0; i < MAX_CLIENTS; i++) {
    ssh_client_t * this_slot = ssh_db->slots + i;
    *this_slot = (ssh_client_t) {
      .id = i,
   1000060d4:	8b08026f 	add	x15, x19, x8
      .pid = 0,
      .active = ssh_db->active + i,
   1000060d8:	0b0d0290 	add	w16, w20, w13
   1000060dc:	51408a10 	sub	w16, w16, #0x22, lsl #12
    *this_slot = (ssh_client_t) {
   1000060e0:	29007df0 	stp	w16, wzr, [x15]
   1000060e4:	8b0d0270 	add	x16, x19, x13
   1000060e8:	f90005f0 	str	x16, [x15, #8]
   1000060ec:	790021e9 	strh	w9, [x15, #16]
   1000060f0:	390049ff 	strb	wzr, [x15, #18]
   1000060f4:	b90015ff 	str	wzr, [x15, #20]
   1000060f8:	f9000dff 	str	xzr, [x15, #24]
   1000060fc:	ad0105e0 	stp	q0, q1, [x15, #32]
   100006100:	ad0291e3 	stp	q3, q4, [x15, #80]
   100006104:	3d8011e2 	str	q2, [x15, #64]
   100006108:	a9077dea 	stp	x10, xzr, [x15, #112]
   10000610c:	ad0541e7 	stp	q7, q16, [x15, #160]
   100006110:	ad0419e5 	stp	q5, q6, [x15, #128]
   100006114:	ad0751f3 	stp	q19, q20, [x15, #224]
   100006118:	ad0649f1 	stp	q17, q18, [x15, #192]
   10000611c:	a9107dee 	stp	x14, xzr, [x15, #256]
      .ssh_client_channel_callbacks = channel_callbacks,

      .event = NULL,
    };

    atomic_store(this_slot->active, false);
   100006120:	089ffe1f 	stlrb	wzr, [x16]

    this_slot->ssh_client_session_callbacks.userdata = (void *) this_slot;
   100006124:	a9023deb 	stp	x11, x15, [x15, #32]
  for(size_t i = 0; i < MAX_CLIENTS; i++) {
   100006128:	91044108 	add	x8, x8, #0x110
   10000612c:	910005ad 	add	x13, x13, #0x1
    ssh_callbacks_init(&(this_slot->ssh_client_session_callbacks));

    ssh_db->slots[i].ssh_client_channel_callbacks.userdata = (void *) this_slot;
   100006130:	a9083dec 	stp	x12, x15, [x15, #128]
  for(size_t i = 0; i < MAX_CLIENTS; i++) {
   100006134:	eb14011f 	cmp	x8, x20
   100006138:	54fffce1 	b.ne	1000060d4 <_ssh_daemon+0x94>  // b.any
    ssh_callbacks_init(&(this_slot->ssh_client_channel_callbacks));
  }

  ssh_bind bind;

  if (ssh_init() < 0) {
   10000613c:	9400044b 	bl	100007268 <_request_snapshot+0x760>
   100006140:	37f80660 	tbnz	w0, #31, 10000620c <_ssh_daemon+0x1cc>
      printf("ssh_init failed\n");
      return;
  }

  bind = ssh_bind_new();
   100006144:	9400041c 	bl	1000071b4 <_request_snapshot+0x6ac>
  if (bind == NULL) {
   100006148:	b4000680 	cbz	x0, 100006218 <_ssh_daemon+0x1d8>
   10000614c:	aa0003f4 	mov	x20, x0
   100006150:	52800028 	mov	w8, #0x1                   	// #1
      printf("ssh_bind_new failed\n");
      return;
  }

  const int log_level = SSH_LOG_WARNING;
   100006154:	b9002be8 	str	w8, [sp, #40]
  if(
    ssh_bind_options_set(bind, SSH_BIND_OPTIONS_LOG_VERBOSITY, &log_level)
   100006158:	9100a3e2 	add	x2, sp, #0x28
   10000615c:	528000e1 	mov	w1, #0x7                   	// #7
   100006160:	94000418 	bl	1000071c0 <_request_snapshot+0x6b8>
    || ssh_bind_options_set(bind, SSH_BIND_OPTIONS_BINDADDR, BINDADDR)
   100006164:	350003e0 	cbnz	w0, 1000061e0 <_ssh_daemon+0x1a0>
   100006168:	5000c8e2 	adr	x2, 100007a86 <__PromotedConst.1+0x666>
   10000616c:	d503201f 	nop
   100006170:	aa1403e0 	mov	x0, x20
   100006174:	52800001 	mov	w1, #0x0                   	// #0
   100006178:	94000412 	bl	1000071c0 <_request_snapshot+0x6b8>
    || ssh_bind_options_set(bind, SSH_BIND_OPTIONS_BINDPORT_STR, BINDPORT)
   10000617c:	35000320 	cbnz	w0, 1000061e0 <_ssh_daemon+0x1a0>
   100006180:	1000c882 	adr	x2, 100007a90 <__PromotedConst.1+0x670>
   100006184:	d503201f 	nop
   100006188:	aa1403e0 	mov	x0, x20
   10000618c:	52800041 	mov	w1, #0x2                   	// #2
   100006190:	9400040c 	bl	1000071c0 <_request_snapshot+0x6b8>
    || ssh_bind_options_set(bind, SSH_BIND_OPTIONS_RSAKEY,   KEYS_FOLDER "rsa-key")
   100006194:	35000260 	cbnz	w0, 1000061e0 <_ssh_daemon+0x1a0>
   100006198:	3000c7e2 	adr	x2, 100007a95 <__PromotedConst.1+0x675>
   10000619c:	d503201f 	nop
   1000061a0:	aa1403e0 	mov	x0, x20
   1000061a4:	528000a1 	mov	w1, #0x5                   	// #5
   1000061a8:	94000406 	bl	1000071c0 <_request_snapshot+0x6b8>
    || ssh_bind_options_set(bind, SSH_BIND_OPTIONS_ECDSAKEY, KEYS_FOLDER "ecdsa-key")
   1000061ac:	350001a0 	cbnz	w0, 1000061e0 <_ssh_daemon+0x1a0>
   1000061b0:	5000c7a2 	adr	x2, 100007aa6 <__PromotedConst.1+0x686>
   1000061b4:	d503201f 	nop
   1000061b8:	aa1403e0 	mov	x0, x20
   1000061bc:	52800121 	mov	w1, #0x9                   	// #9
   1000061c0:	94000400 	bl	1000071c0 <_request_snapshot+0x6b8>
    || ssh_bind_options_set(bind, SSH_BIND_OPTIONS_BANNER, "Welcome to spaceGame")
   1000061c4:	350000e0 	cbnz	w0, 1000061e0 <_ssh_daemon+0x1a0>
   1000061c8:	3000c782 	adr	x2, 100007ab9 <__PromotedConst.1+0x699>
   1000061cc:	d503201f 	nop
   1000061d0:	aa1403e0 	mov	x0, x20
   1000061d4:	528000c1 	mov	w1, #0x6                   	// #6
   1000061d8:	940003fa 	bl	1000071c0 <_request_snapshot+0x6b8>
    ssh_bind_options_set(bind, SSH_BIND_OPTIONS_LOG_VERBOSITY, &log_level)
   1000061dc:	34000320 	cbz	w0, 100006240 <_ssh_daemon+0x200>
  ) {
    printf("ssh_daemon had an issue setting the configuration preferences\n");
   1000061e0:	7000e2a0 	adr	x0, 100007e37 <__PromotedConst.1+0xa17>
   1000061e4:	d503201f 	nop
   1000061e8:	940003db 	bl	100007154 <_request_snapshot+0x64c>
  }

  ssh_bind_free(bind);
  ssh_finalize();
  munmap(ssh_db, sizeof(ssh_db_t));
}
   1000061ec:	a9487bfd 	ldp	x29, x30, [sp, #128]
   1000061f0:	a9474ff4 	ldp	x20, x19, [sp, #112]
   1000061f4:	a94657f6 	ldp	x22, x21, [sp, #96]
   1000061f8:	a9455ff8 	ldp	x24, x23, [sp, #80]
   1000061fc:	a94467fa 	ldp	x26, x25, [sp, #64]
   100006200:	a9436ffc 	ldp	x28, x27, [sp, #48]
   100006204:	910243ff 	add	sp, sp, #0x90
   100006208:	d65f03c0 	ret
      printf("ssh_init failed\n");
   10000620c:	3000e3e0 	adr	x0, 100007e89 <__PromotedConst.1+0xa69>
   100006210:	d503201f 	nop
   100006214:	14000003 	b	100006220 <_ssh_daemon+0x1e0>
      printf("ssh_bind_new failed\n");
   100006218:	3000e2e0 	adr	x0, 100007e75 <__PromotedConst.1+0xa55>
   10000621c:	d503201f 	nop
   100006220:	a9487bfd 	ldp	x29, x30, [sp, #128]
   100006224:	a9474ff4 	ldp	x20, x19, [sp, #112]
   100006228:	a94657f6 	ldp	x22, x21, [sp, #96]
   10000622c:	a9455ff8 	ldp	x24, x23, [sp, #80]
   100006230:	a94467fa 	ldp	x26, x25, [sp, #64]
   100006234:	a9436ffc 	ldp	x28, x27, [sp, #48]
   100006238:	910243ff 	add	sp, sp, #0x90
   10000623c:	140003c6 	b	100007154 <_request_snapshot+0x64c>
  if(ssh_bind_listen(bind) < 0) {
   100006240:	aa1403e0 	mov	x0, x20
   100006244:	940003d9 	bl	1000071a8 <_request_snapshot+0x6a0>
   100006248:	36f80140 	tbz	w0, #31, 100006270 <_ssh_daemon+0x230>
      printf("Fatal. Unable to start the spaceGame server. Error: ");
   10000624c:	5000c400 	adr	x0, 100007ace <__PromotedConst.1+0x6ae>
   100006250:	d503201f 	nop
   100006254:	940003a8 	bl	1000070f4 <_request_snapshot+0x5ec>
      printf("%s\n", ssh_get_error(bind));
   100006258:	aa1403e0 	mov	x0, x20
   10000625c:	940003fd 	bl	100007250 <_request_snapshot+0x748>
   100006260:	940003bd 	bl	100007154 <_request_snapshot+0x64c>
      ssh_bind_free(bind);
   100006264:	aa1403e0 	mov	x0, x20
   100006268:	940003cd 	bl	10000719c <_request_snapshot+0x694>
   10000626c:	17ffffe0 	b	1000061ec <_ssh_daemon+0x1ac>
   100006270:	d2800019 	mov	x25, #0x0                   	// #0
  const struct timespec retry_after_ts = (struct timespec) {
   100006274:	d503201f 	nop
   100006278:	d503201f 	nop
   10000627c:	9c008b20 	ldr	q0, 1000073e0 <_fps_ts+0x20>
   100006280:	5280221b 	mov	w27, #0x110                 	// #272
   100006284:	3d8007e0 	str	q0, [sp, #16]
   100006288:	5280003c 	mov	w28, #0x1                   	// #1
   10000628c:	1000c536 	adr	x22, 100007b30 <__PromotedConst.1+0x710>
   100006290:	d503201f 	nop
   100006294:	7000c798 	adr	x24, 100007b87 <__PromotedConst.1+0x767>
   100006298:	d503201f 	nop
   10000629c:	14000007 	b	1000062b8 <_ssh_daemon+0x278>
      printf("[ssh_client %u]: Failed to allocate session\n", ssh_client->id);
   1000062a0:	b9400348 	ldr	w8, [x26]
   1000062a4:	f90003e8 	str	x8, [sp]
   1000062a8:	7000c2c0 	adr	x0, 100007b03 <__PromotedConst.1+0x6e3>
   1000062ac:	d503201f 	nop
   1000062b0:	94000391 	bl	1000070f4 <_request_snapshot+0x5ec>
   1000062b4:	d2800019 	mov	x25, #0x0                   	// #0
    if (atomic_load(ssh_db->active + i) == false) {
   1000062b8:	8b190268 	add	x8, x19, x25
   1000062bc:	91404508 	add	x8, x8, #0x11, lsl #12
   1000062c0:	08dffd08 	ldarb	w8, [x8]
   1000062c4:	370001c8 	tbnz	w8, #0, 1000062fc <_ssh_daemon+0x2bc>
   1000062c8:	92407f35 	and	x21, x25, #0xffffffff
      if(ssh_db->slots[i].pid) {
   1000062cc:	9b1b4eb7 	madd	x23, x21, x27, x19
   1000062d0:	b8404ee0 	ldr	w0, [x23, #4]!
   1000062d4:	340003e0 	cbz	w0, 100006350 <_ssh_daemon+0x310>
        waitpid(ssh_db->slots[i].pid, &status, 0);
   1000062d8:	9100b3e1 	add	x1, sp, #0x2c
   1000062dc:	52800002 	mov	w2, #0x0                   	// #0
   1000062e0:	940003f1 	bl	1000072a4 <_request_snapshot+0x79c>
        if(WIFEXITED(status)) {
   1000062e4:	b9402fe8 	ldr	w8, [sp, #44]
   1000062e8:	7200191f 	tst	w8, #0x7f
   1000062ec:	540001e0 	b.eq	100006328 <_ssh_daemon+0x2e8>  // b.none
          printf("[ssh_server]: Warning. ssh_client %u terminated outside of a normal exit route.\n", i);
   1000062f0:	f90003f9 	str	x25, [sp]
   1000062f4:	aa1803e0 	mov	x0, x24
   1000062f8:	14000015 	b	10000634c <_ssh_daemon+0x30c>
  for(unsigned int i = 0; i < MAX_CLIENTS; i++) {
   1000062fc:	91000739 	add	x25, x25, #0x1
   100006300:	f104033f 	cmp	x25, #0x100
   100006304:	54fffda1 	b.ne	1000062b8 <_ssh_daemon+0x278>  // b.any
      printf("no ssh_clients available to connect to, try again later\n");
   100006308:	7000d7a0 	adr	x0, 100007dff <__PromotedConst.1+0x9df>
   10000630c:	d503201f 	nop
   100006310:	94000391 	bl	100007154 <_request_snapshot+0x64c>
      nanosleep(&retry_after_ts, NULL);
   100006314:	910043e0 	add	x0, sp, #0x10
   100006318:	d2800001 	mov	x1, #0x0                   	// #0
   10000631c:	94000373 	bl	1000070e8 <_request_snapshot+0x5e0>
   100006320:	d2800019 	mov	x25, #0x0                   	// #0
   100006324:	17ffffe5 	b	1000062b8 <_ssh_daemon+0x278>
          printf("[ssh_server]: ssh_client %u exited with %s\n", i, WEXITSTATUS(status) == EXIT_SUCCESS ? "SUCCESS" : "FAILURE");
   100006328:	72181d1f 	tst	w8, #0xff00
   10000632c:	7000c288 	adr	x8, 100007b7f <__PromotedConst.1+0x75f>
   100006330:	d503201f 	nop
   100006334:	7000c209 	adr	x9, 100007b77 <__PromotedConst.1+0x757>
   100006338:	d503201f 	nop
   10000633c:	9a880128 	csel	x8, x9, x8, eq  // eq = none
   100006340:	a90023f9 	stp	x25, x8, [sp]
   100006344:	7000c020 	adr	x0, 100007b4b <__PromotedConst.1+0x72b>
   100006348:	d503201f 	nop
   10000634c:	9400036a 	bl	1000070f4 <_request_snapshot+0x5ec>
      return ssh_db->slots + i;
   100006350:	9b1b4eba 	madd	x26, x21, x27, x19
    ssh_client->session = ssh_new();
   100006354:	940003c8 	bl	100007274 <_request_snapshot+0x76c>
   100006358:	f9000f40 	str	x0, [x26, #24]
    if (!ssh_client->session) {
   10000635c:	b4fffa20 	cbz	x0, 1000062a0 <_ssh_daemon+0x260>
   100006360:	aa0003e1 	mov	x1, x0
    if(ssh_bind_accept(bind, ssh_client->session) != SSH_ERROR) {
   100006364:	aa1403e0 	mov	x0, x20
   100006368:	9400038a 	bl	100007190 <_request_snapshot+0x688>
   10000636c:	d2800019 	mov	x25, #0x0                   	// #0
   100006370:	3100041f 	cmn	w0, #0x1
   100006374:	54fffa20 	b.eq	1000062b8 <_ssh_daemon+0x278>  // b.none
      atomic_store(ssh_client->active, true);
   100006378:	9b1b4ea8 	madd	x8, x21, x27, x19
   10000637c:	f9400508 	ldr	x8, [x8, #8]
   100006380:	089ffd1c 	stlrb	w28, [x8]
      printf("[ssh_client %u]: Spawning\n", ssh_client->id);
   100006384:	b9400348 	ldr	w8, [x26]
   100006388:	f90003e8 	str	x8, [sp]
   10000638c:	aa1603e0 	mov	x0, x22
   100006390:	94000359 	bl	1000070f4 <_request_snapshot+0x5ec>
      int pid = fork();
   100006394:	94000343 	bl	1000070a0 <_request_snapshot+0x598>
      if(!pid) {
   100006398:	34000080 	cbz	w0, 1000063a8 <_ssh_daemon+0x368>
   10000639c:	d2800019 	mov	x25, #0x0                   	// #0
        ssh_client->pid = pid;
   1000063a0:	b90002e0 	str	w0, [x23]
   1000063a4:	17ffffc5 	b	1000062b8 <_ssh_daemon+0x278>
        ssh_bind_free(bind);
   1000063a8:	aa1403e0 	mov	x0, x20
   1000063ac:	9400037c 	bl	10000719c <_request_snapshot+0x694>
          ssh_client_task(ssh_client)
   1000063b0:	aa1a03e0 	mov	x0, x26
   1000063b4:	94000002 	bl	1000063bc <_ssh_client_task>
        exit(
   1000063b8:	94000337 	bl	100007094 <_request_snapshot+0x58c>

00000001000063bc <_ssh_client_task>:
int ssh_client_task(ssh_client_t * ssh_client) {
   1000063bc:	d10103ff 	sub	sp, sp, #0x40
   1000063c0:	a90157f6 	stp	x22, x21, [sp, #16]
   1000063c4:	a9024ff4 	stp	x20, x19, [sp, #32]
   1000063c8:	a9037bfd 	stp	x29, x30, [sp, #48]
   1000063cc:	9100c3fd 	add	x29, sp, #0x30
   1000063d0:	aa0003f3 	mov	x19, x0
  ssh_client->event = ssh_event_new();
   1000063d4:	94000396 	bl	10000722c <_request_snapshot+0x724>
   1000063d8:	f9008660 	str	x0, [x19, #264]
  if (!ssh_client->event) {
   1000063dc:	b4000240 	cbz	x0, 100006424 <_ssh_client_task+0x68>
  ssh_set_server_callbacks(ssh_client->session, &(ssh_client->ssh_client_session_callbacks));
   1000063e0:	f9400e60 	ldr	x0, [x19, #24]
   1000063e4:	91008261 	add	x1, x19, #0x20
   1000063e8:	940003a9 	bl	10000728c <_request_snapshot+0x784>
  if (ssh_handle_key_exchange(ssh_client->session) != SSH_OK) {
   1000063ec:	f9400e60 	ldr	x0, [x19, #24]
   1000063f0:	9400039b 	bl	10000725c <_request_snapshot+0x754>
   1000063f4:	340002a0 	cbz	w0, 100006448 <_ssh_client_task+0x8c>
      printf("[ssh_client %u]: %s\n", ssh_client->id, ssh_get_error(ssh_client->session));
   1000063f8:	f9400e60 	ldr	x0, [x19, #24]
   1000063fc:	b9400274 	ldr	w20, [x19]
   100006400:	94000394 	bl	100007250 <_request_snapshot+0x748>
   100006404:	a90003f4 	stp	x20, x0, [sp]
   100006408:	10008240 	adr	x0, 100007450 <__PromotedConst.1+0x30>
   10000640c:	d503201f 	nop
   100006410:	94000339 	bl	1000070f4 <_request_snapshot+0x5ec>
   100006414:	52800035 	mov	w21, #0x1                   	// #1
   100006418:	7000c074 	adr	x20, 100007c27 <__PromotedConst.1+0x807>
   10000641c:	d503201f 	nop
   100006420:	14000037 	b	1000064fc <_ssh_client_task+0x140>
    printf("[ssh_client %u]: Could not create polling context\n", ssh_client->id);
   100006424:	b9400268 	ldr	w8, [x19]
   100006428:	f90003e8 	str	x8, [sp]
   10000642c:	1000bd60 	adr	x0, 100007bd8 <__PromotedConst.1+0x7b8>
   100006430:	d503201f 	nop
   100006434:	94000330 	bl	1000070f4 <_request_snapshot+0x5ec>
   100006438:	52800035 	mov	w21, #0x1                   	// #1
   10000643c:	7000be74 	adr	x20, 100007c0b <__PromotedConst.1+0x7eb>
   100006440:	d503201f 	nop
   100006444:	1400002e 	b	1000064fc <_ssh_client_task+0x140>
  ssh_event_add_session(ssh_client->event, ssh_client->session);
   100006448:	f9408660 	ldr	x0, [x19, #264]
   10000644c:	f9400e61 	ldr	x1, [x19, #24]
   100006450:	9400036e 	bl	100007208 <_request_snapshot+0x700>
  printf("[ssh_client %u]: Completed setup successfully\n", ssh_client->id);
   100006454:	b9400268 	ldr	w8, [x19]
   100006458:	f90003e8 	str	x8, [sp]
   10000645c:	7000bf20 	adr	x0, 100007c43 <__PromotedConst.1+0x823>
   100006460:	d503201f 	nop
   100006464:	94000324 	bl	1000070f4 <_request_snapshot+0x5ec>
    if (ssh_event_dopoll(ssh_client->event, -1) == SSH_ERROR) {
   100006468:	f9408660 	ldr	x0, [x19, #264]
   10000646c:	12800001 	mov	w1, #0xffffffff            	// #-1
   100006470:	94000369 	bl	100007214 <_request_snapshot+0x70c>
   100006474:	3100041f 	cmn	w0, #0x1
   100006478:	540002e0 	b.eq	1000064d4 <_ssh_client_task+0x118>  // b.none
   10000647c:	5000c1b4 	adr	x20, 100007cb2 <__PromotedConst.1+0x892>
   100006480:	d503201f 	nop
   100006484:	14000006 	b	10000649c <_ssh_client_task+0xe0>
   100006488:	f9408660 	ldr	x0, [x19, #264]
   10000648c:	12800001 	mov	w1, #0xffffffff            	// #-1
   100006490:	94000361 	bl	100007214 <_request_snapshot+0x70c>
   100006494:	3100041f 	cmn	w0, #0x1
   100006498:	540001e0 	b.eq	1000064d4 <_ssh_client_task+0x118>  // b.none
    (ssh_channel_is_open(ssh_client->channel) || ssh_client->pre_channel)
   10000649c:	f9403e60 	ldr	x0, [x19, #120]
   1000064a0:	9400034e 	bl	1000071d8 <_request_snapshot+0x6d0>
   1000064a4:	35000060 	cbnz	w0, 1000064b0 <_ssh_client_task+0xf4>
   1000064a8:	39404668 	ldrb	w8, [x19, #17]
    && !ssh_client->pleaseKill
   1000064ac:	34000108 	cbz	w8, 1000064cc <_ssh_client_task+0x110>
   1000064b0:	39404268 	ldrb	w8, [x19, #16]
    && (ssh_client->authenticated || ssh_client->auth_attempts < MAX_AUTH_ATTEMPTS));
   1000064b4:	350000c8 	cbnz	w8, 1000064cc <_ssh_client_task+0x110>
   1000064b8:	39404a68 	ldrb	w8, [x19, #18]
   1000064bc:	35fffe68 	cbnz	w8, 100006488 <_ssh_client_task+0xcc>
   1000064c0:	b9401668 	ldr	w8, [x19, #20]
  } while(
   1000064c4:	7100091f 	cmp	w8, #0x2
   1000064c8:	54fffe09 	b.ls	100006488 <_ssh_client_task+0xcc>  // b.plast
   1000064cc:	52800015 	mov	w21, #0x0                   	// #0
   1000064d0:	1400000b 	b	1000064fc <_ssh_client_task+0x140>
      printf("[ssh_client %u]: Closed. Error: %s\n", ssh_client->id, ssh_get_error(ssh_client->session));
   1000064d4:	f9400e60 	ldr	x0, [x19, #24]
   1000064d8:	b9400274 	ldr	w20, [x19]
   1000064dc:	9400035d 	bl	100007250 <_request_snapshot+0x748>
   1000064e0:	a90003f4 	stp	x20, x0, [sp]
   1000064e4:	5000bc60 	adr	x0, 100007c72 <__PromotedConst.1+0x852>
   1000064e8:	d503201f 	nop
   1000064ec:	94000302 	bl	1000070f4 <_request_snapshot+0x5ec>
   1000064f0:	52800035 	mov	w21, #0x1                   	// #1
   1000064f4:	5000bd14 	adr	x20, 100007c96 <__PromotedConst.1+0x876>
   1000064f8:	d503201f 	nop
   1000064fc:	b9400268 	ldr	w8, [x19]
   100006500:	f90003e8 	str	x8, [sp]
   100006504:	aa1403e0 	mov	x0, x20
   100006508:	940002fb 	bl	1000070f4 <_request_snapshot+0x5ec>
   10000650c:	aa1303e0 	mov	x0, x19
   100006510:	94000007 	bl	10000652c <_reset_ssh_client>
}
   100006514:	aa1503e0 	mov	x0, x21
   100006518:	a9437bfd 	ldp	x29, x30, [sp, #48]
   10000651c:	a9424ff4 	ldp	x20, x19, [sp, #32]
   100006520:	a94157f6 	ldp	x22, x21, [sp, #16]
   100006524:	910103ff 	add	sp, sp, #0x40
   100006528:	d65f03c0 	ret

000000010000652c <_reset_ssh_client>:
void reset_ssh_client(ssh_client_t * ssh_client) {
   10000652c:	d100c3ff 	sub	sp, sp, #0x30
   100006530:	a9014ff4 	stp	x20, x19, [sp, #16]
   100006534:	a9027bfd 	stp	x29, x30, [sp, #32]
   100006538:	910083fd 	add	x29, sp, #0x20
   10000653c:	aa0003f3 	mov	x19, x0
  printf("[ssh_client %u]: reset: params\n", ssh_client->id);
   100006540:	b9400008 	ldr	w8, [x0]
   100006544:	f90003e8 	str	x8, [sp]
   100006548:	5000bc20 	adr	x0, 100007cce <__PromotedConst.1+0x8ae>
   10000654c:	d503201f 	nop
   100006550:	940002e9 	bl	1000070f4 <_request_snapshot+0x5ec>
  ssh_client->authenticated = false;
   100006554:	39004a7f 	strb	wzr, [x19, #18]
  ssh_client->auth_attempts = false;
   100006558:	b900167f 	str	wzr, [x19, #20]
   10000655c:	52802008 	mov	w8, #0x100                 	// #256
  ssh_client->pleaseKill = false;
   100006560:	79002268 	strh	w8, [x19, #16]
  printf("[ssh_client %u]: reset: renderer\n", ssh_client->id);
   100006564:	b9400268 	ldr	w8, [x19]
   100006568:	f90003e8 	str	x8, [sp]
   10000656c:	5000bc00 	adr	x0, 100007cee <__PromotedConst.1+0x8ce>
   100006570:	d503201f 	nop
   100006574:	940002e0 	bl	1000070f4 <_request_snapshot+0x5ec>
  end_render_daemon();
   100006578:	97fffe84 	bl	100005f88 <_end_render_daemon>
  printf("[ssh_client %u]: reset: remove player from world_db\n", ssh_client->id);
   10000657c:	b9400268 	ldr	w8, [x19]
   100006580:	f90003e8 	str	x8, [sp]
   100006584:	1000bc60 	adr	x0, 100007d10 <__PromotedConst.1+0x8f0>
   100006588:	d503201f 	nop
   10000658c:	940002da 	bl	1000070f4 <_request_snapshot+0x5ec>
  request_player_end(ssh_client->id);
   100006590:	b9400260 	ldr	w0, [x19]
   100006594:	940000d2 	bl	1000068dc <_request_player_end>
  printf("[ssh_client %u]: reset: channel\n", ssh_client->id);
   100006598:	b9400268 	ldr	w8, [x19]
   10000659c:	f90003e8 	str	x8, [sp]
   1000065a0:	3000bd20 	adr	x0, 100007d45 <__PromotedConst.1+0x925>
   1000065a4:	d503201f 	nop
   1000065a8:	940002d3 	bl	1000070f4 <_request_snapshot+0x5ec>
  if(ssh_client->channel) {
   1000065ac:	f9403e60 	ldr	x0, [x19, #120]
   1000065b0:	b4000060 	cbz	x0, 1000065bc <_reset_ssh_client+0x90>
    ssh_channel_free(ssh_client->channel);
   1000065b4:	94000306 	bl	1000071cc <_request_snapshot+0x6c4>
    ssh_client->channel = NULL;
   1000065b8:	f9003e7f 	str	xzr, [x19, #120]
  printf("[ssh_client %u]: reset: session\n", ssh_client->id);
   1000065bc:	b9400268 	ldr	w8, [x19]
   1000065c0:	f90003e8 	str	x8, [sp]
   1000065c4:	5000bd00 	adr	x0, 100007d66 <__PromotedConst.1+0x946>
   1000065c8:	d503201f 	nop
   1000065cc:	940002ca 	bl	1000070f4 <_request_snapshot+0x5ec>
  if(ssh_client->session) {
   1000065d0:	f9400e61 	ldr	x1, [x19, #24]
   1000065d4:	b4000101 	cbz	x1, 1000065f4 <_reset_ssh_client+0xc8>
    ssh_event_remove_session(ssh_client->event, ssh_client->session);
   1000065d8:	f9408660 	ldr	x0, [x19, #264]
   1000065dc:	94000317 	bl	100007238 <_request_snapshot+0x730>
    ssh_disconnect(ssh_client->session);
   1000065e0:	f9400e60 	ldr	x0, [x19, #24]
   1000065e4:	94000306 	bl	1000071fc <_request_snapshot+0x6f4>
    ssh_free(ssh_client->session);
   1000065e8:	f9400e60 	ldr	x0, [x19, #24]
   1000065ec:	94000316 	bl	100007244 <_request_snapshot+0x73c>
    ssh_client->session = NULL;
   1000065f0:	f9000e7f 	str	xzr, [x19, #24]
  printf("[ssh_client %u]: reset: event\n", ssh_client->id);
   1000065f4:	b9400268 	ldr	w8, [x19]
   1000065f8:	f90003e8 	str	x8, [sp]
   1000065fc:	7000bc40 	adr	x0, 100007d87 <__PromotedConst.1+0x967>
   100006600:	d503201f 	nop
   100006604:	940002bc 	bl	1000070f4 <_request_snapshot+0x5ec>
  if(ssh_client->event) {
   100006608:	f9408660 	ldr	x0, [x19, #264]
   10000660c:	b4000060 	cbz	x0, 100006618 <_reset_ssh_client+0xec>
    ssh_event_free(ssh_client->event);
   100006610:	94000304 	bl	100007220 <_request_snapshot+0x718>
    ssh_client->event = NULL;
   100006614:	f900867f 	str	xzr, [x19, #264]
  printf("[ssh_client %u]: !last! reset: active\n", ssh_client->id);
   100006618:	b9400268 	ldr	w8, [x19]
   10000661c:	f90003e8 	str	x8, [sp]
   100006620:	5000bc20 	adr	x0, 100007da6 <__PromotedConst.1+0x986>
   100006624:	d503201f 	nop
   100006628:	940002b3 	bl	1000070f4 <_request_snapshot+0x5ec>
  atomic_store(ssh_client->active, false);
   10000662c:	f9400668 	ldr	x8, [x19, #8]
   100006630:	089ffd1f 	stlrb	wzr, [x8]
  printf("[ssh_client %u]: Completed shutdown successfully\n", ssh_client->id);
   100006634:	b9400268 	ldr	w8, [x19]
   100006638:	f90003e8 	str	x8, [sp]
   10000663c:	3000bc80 	adr	x0, 100007dcd <__PromotedConst.1+0x9ad>
   100006640:	d503201f 	nop
   100006644:	940002ac 	bl	1000070f4 <_request_snapshot+0x5ec>
}
   100006648:	a9427bfd 	ldp	x29, x30, [sp, #32]
   10000664c:	a9414ff4 	ldp	x20, x19, [sp, #16]
   100006650:	9100c3ff 	add	sp, sp, #0x30
   100006654:	d65f03c0 	ret

0000000100006658 <_push_fast_list>:
#include <sys/mman.h>

#include "world_db.h"

void push_fast_list(fast_list_t * fast_list, unsigned int data) {
  fast_list->data[fast_list->num++] = data;
   100006658:	b9400008 	ldr	w8, [x0]
   10000665c:	11000509 	add	w9, w8, #0x1
   100006660:	b9000009 	str	w9, [x0]
   100006664:	8b080808 	add	x8, x0, x8, lsl #2
   100006668:	b9000501 	str	w1, [x8, #4]
}
   10000666c:	d65f03c0 	ret

0000000100006670 <_pop_fast_list>:

void pop_fast_list(fast_list_t * fast_list, unsigned int data) {
   100006670:	b9400008 	ldr	w8, [x0]
  for (int i = 0; i < fast_list->num; i++) {
   100006674:	34000128 	cbz	w8, 100006698 <_pop_fast_list+0x28>
   100006678:	91001009 	add	x9, x0, #0x4
   10000667c:	aa0803ea 	mov	x10, x8
    if (fast_list->data[i] == data) {
   100006680:	b940012b 	ldr	w11, [x9]
   100006684:	6b01017f 	cmp	w11, w1
   100006688:	540000a0 	b.eq	10000669c <_pop_fast_list+0x2c>  // b.none
  for (int i = 0; i < fast_list->num; i++) {
   10000668c:	91001129 	add	x9, x9, #0x4
   100006690:	f100054a 	subs	x10, x10, #0x1
   100006694:	54ffff61 	b.ne	100006680 <_pop_fast_list+0x10>  // b.any
      fast_list->data[i] = fast_list->data[--fast_list->num];
      return;
    }
  }
}
   100006698:	d65f03c0 	ret
      fast_list->data[i] = fast_list->data[--fast_list->num];
   10000669c:	51000508 	sub	w8, w8, #0x1
   1000066a0:	b9000008 	str	w8, [x0]
   1000066a4:	8b284808 	add	x8, x0, w8, uxtw #2
   1000066a8:	b9400508 	ldr	w8, [x8, #4]
   1000066ac:	b9000128 	str	w8, [x9]
}
   1000066b0:	d65f03c0 	ret

00000001000066b4 <_start_world_db>:

static
world_db_t * world_db = NULL;

void start_world_db() {
   1000066b4:	a9bd57f6 	stp	x22, x21, [sp, #-48]!
   1000066b8:	a9014ff4 	stp	x20, x19, [sp, #16]
   1000066bc:	a9027bfd 	stp	x29, x30, [sp, #32]
   1000066c0:	910083fd 	add	x29, sp, #0x20
  if (world_db != NULL) {
   1000066c4:	b00000b3 	adrp	x19, 10001b000 <_render_client+0xd9f0>
   1000066c8:	f944da68 	ldr	x8, [x19, #2480]
   1000066cc:	b40000e8 	cbz	x8, 1000066e8 <_start_world_db+0x34>
    printf("WORLD_DB: Already instantiated, not double-mallocing\n");
   1000066d0:	3000be40 	adr	x0, 100007e99 <__PromotedConst.1+0xa79>
   1000066d4:	d503201f 	nop
   1000066d8:	a9427bfd 	ldp	x29, x30, [sp, #32]
   1000066dc:	a9414ff4 	ldp	x20, x19, [sp, #16]
   1000066e0:	a8c357f6 	ldp	x22, x21, [sp], #48
   1000066e4:	1400029c 	b	100007154 <_request_snapshot+0x64c>
    return;
  }
  world_db = (world_db_t *) mmap(NULL, sizeof(world_db_t), PROT_READ | PROT_WRITE, MAP_SHARED | MAP_ANONYMOUS, -1, 0);
   1000066e8:	d2800000 	mov	x0, #0x0                   	// #0
   1000066ec:	528c8a01 	mov	w1, #0x6450                	// #25680
   1000066f0:	72a00021 	movk	w1, #0x1, lsl #16
   1000066f4:	52800062 	mov	w2, #0x3                   	// #3
   1000066f8:	52820023 	mov	w3, #0x1001                	// #4097
   1000066fc:	12800004 	mov	w4, #0xffffffff            	// #-1
   100006700:	d2800005 	mov	x5, #0x0                   	// #0
   100006704:	94000273 	bl	1000070d0 <_request_snapshot+0x5c8>
   100006708:	f904da60 	str	x0, [x19, #2480]
  MTX_INIT(world_db->active_ids_mtx);
   10000670c:	91102000 	add	x0, x0, #0x408
   100006710:	d2800001 	mov	x1, #0x0                   	// #0
   100006714:	94000284 	bl	100007124 <_request_snapshot+0x61c>
   100006718:	52808914 	mov	w20, #0x448                 	// #1096
   10000671c:	52888915 	mov	w21, #0x4448                	// #17480
  for (int i = 0; i < MAX_CLIENTS; i++) MTX_INIT(world_db->player_mtxs[i]);
   100006720:	f944da68 	ldr	x8, [x19, #2480]
   100006724:	8b140100 	add	x0, x8, x20
   100006728:	d2800001 	mov	x1, #0x0                   	// #0
   10000672c:	9400027e 	bl	100007124 <_request_snapshot+0x61c>
   100006730:	91010294 	add	x20, x20, #0x40
   100006734:	eb15029f 	cmp	x20, x21
   100006738:	54ffff41 	b.ne	100006720 <_start_world_db+0x6c>  // b.any
}
   10000673c:	a9427bfd 	ldp	x29, x30, [sp, #32]
   100006740:	a9414ff4 	ldp	x20, x19, [sp, #16]
   100006744:	a8c357f6 	ldp	x22, x21, [sp], #48
   100006748:	d65f03c0 	ret

000000010000674c <_point_to_chunk_id>:

void point_to_chunk_id(SGVec3D_t point, unsigned int * id, SGVec3D_t * origin) {
  SGVecUInt point_origin_x = SGVecUInt_Shift_Right(SGVecUInt_Cast_SGVec(point.x), CHUNK_POW);
   10000674c:	6ea1b800 	fcvtzu	v0.4s, v0.4s
   100006750:	6f3a0400 	ushr	v0.4s, v0.4s, #6
  origin->x = SGVec_Cast_SGVecUInt(point_origin_x);
   100006754:	6e21d803 	ucvtf	v3.4s, v0.4s
  SGVecUInt point_origin_y = SGVecUInt_Shift_Right(SGVecUInt_Cast_SGVec(point.y), CHUNK_POW);
   100006758:	6ea1b821 	fcvtzu	v1.4s, v1.4s
   10000675c:	6f3a0421 	ushr	v1.4s, v1.4s, #6
  origin->y = SGVec_Cast_SGVecUInt(point_origin_y);
   100006760:	6e21d824 	ucvtf	v4.4s, v1.4s
  origin->x = SGVec_Cast_SGVecUInt(point_origin_x);
   100006764:	ad001023 	stp	q3, q4, [x1]
  SGVecUInt point_origin_z = SGVecUInt_Shift_Right(SGVecUInt_Cast_SGVec(point.z), CHUNK_POW);
   100006768:	6ea1b842 	fcvtzu	v2.4s, v2.4s
   10000676c:	6f3a0442 	ushr	v2.4s, v2.4s, #6
  origin->z = SGVec_Cast_SGVecUInt(point_origin_z);
   100006770:	6e21d843 	ucvtf	v3.4s, v2.4s
   100006774:	3d800823 	str	q3, [x1, #32]

  *id = SGVecUInt_Get_Lane(
   100006778:	6f265441 	sli	v1.4s, v2.4s, #6
   10000677c:	6f265420 	sli	v0.4s, v1.4s, #6
   100006780:	bd000000 	str	s0, [x0]
      ),
      CHUNK_POW
    ),
    0
  );
}
   100006784:	d65f03c0 	ret

0000000100006788 <_request_player>:

void request_player(unsigned int id) {
   100006788:	d10483ff 	sub	sp, sp, #0x120
   10000678c:	a90e6ffc 	stp	x28, x27, [sp, #224]
   100006790:	a90f57f6 	stp	x22, x21, [sp, #240]
   100006794:	a9104ff4 	stp	x20, x19, [sp, #256]
   100006798:	a9117bfd 	stp	x29, x30, [sp, #272]
   10000679c:	910443fd 	add	x29, sp, #0x110
   1000067a0:	aa0003f3 	mov	x19, x0
  MTX_LOCK(world_db->active_ids_mtx);
   1000067a4:	b00000b5 	adrp	x21, 10001b000 <_render_client+0xd9f0>
   1000067a8:	f944daa8 	ldr	x8, [x21, #2480]
   1000067ac:	91102100 	add	x0, x8, #0x408
   1000067b0:	94000260 	bl	100007130 <_request_snapshot+0x628>
  push_fast_list(&(world_db->active_ids), id);
   1000067b4:	f944daa8 	ldr	x8, [x21, #2480]
  fast_list->data[fast_list->num++] = data;
   1000067b8:	b9400109 	ldr	w9, [x8]
   1000067bc:	1100052a 	add	w10, w9, #0x1
   1000067c0:	b900010a 	str	w10, [x8]
   1000067c4:	8b090909 	add	x9, x8, x9, lsl #2
   1000067c8:	b9000533 	str	w19, [x9, #4]
  MTX_UNLOCK(world_db->active_ids_mtx);
   1000067cc:	91102100 	add	x0, x8, #0x408
   1000067d0:	9400025b 	bl	10000713c <_request_snapshot+0x634>

  MTX_LOCK(world_db->player_mtxs[id]);
   1000067d4:	f944daa8 	ldr	x8, [x21, #2480]
   1000067d8:	2a1303f6 	mov	w22, w19
   1000067dc:	d37ae6d4 	lsl	x20, x22, #6
   1000067e0:	8b140108 	add	x8, x8, x20
   1000067e4:	91112100 	add	x0, x8, #0x448
   1000067e8:	94000252 	bl	100007130 <_request_snapshot+0x628>
  world_db->players[id].self = create_ship((SGVec3D_t) {
   1000067ec:	f944daa8 	ldr	x8, [x21, #2480]
   1000067f0:	8b334ec9 	add	x9, x22, w19, uxtw #3
   1000067f4:	d37be933 	lsl	x19, x9, #5
   1000067f8:	8b130116 	add	x22, x8, x19
   1000067fc:	910003e8 	mov	x8, sp
   100006800:	6f00e400 	movi	v0.2d, #0x0
   100006804:	6f00e401 	movi	v1.2d, #0x0
   100006808:	6f00e402 	movi	v2.2d, #0x0
   10000680c:	97fff1fc 	bl	100002ffc <_create_ship>
   100006810:	ad4007e0 	ldp	q0, q1, [sp]
   100006814:	3d911ac1 	str	q1, [x22, #17504]
   100006818:	3d9116c0 	str	q0, [x22, #17488]
   10000681c:	ad4107e0 	ldp	q0, q1, [sp, #32]
   100006820:	ad420fe2 	ldp	q2, q3, [sp, #64]
   100006824:	3d912ac3 	str	q3, [x22, #17568]
   100006828:	3d9126c2 	str	q2, [x22, #17552]
   10000682c:	3d9122c1 	str	q1, [x22, #17536]
   100006830:	3d911ec0 	str	q0, [x22, #17520]
   100006834:	ad4307e0 	ldp	q0, q1, [sp, #96]
   100006838:	ad440fe2 	ldp	q2, q3, [sp, #128]
   10000683c:	3d913ac3 	str	q3, [x22, #17632]
   100006840:	3d9136c2 	str	q2, [x22, #17616]
   100006844:	3d9132c1 	str	q1, [x22, #17600]
   100006848:	3d912ec0 	str	q0, [x22, #17584]
   10000684c:	ad4507e0 	ldp	q0, q1, [sp, #160]
   100006850:	ad460fe2 	ldp	q2, q3, [sp, #192]
   100006854:	3d914ac3 	str	q3, [x22, #17696]
   100006858:	3d9146c2 	str	q2, [x22, #17680]
   10000685c:	3d9142c1 	str	q1, [x22, #17664]
   100006860:	3d913ec0 	str	q0, [x22, #17648]
    .x = SGVec_Load_Const(0.),
    .y = SGVec_Load_Const(0.),
    .z = SGVec_Load_Const(0.)
  });
  point_to_chunk_id(world_db->players[id].self.origin, &(world_db->players[id].chunk_id), &(world_db->players[id].chunk_origin));
   100006864:	f944daa8 	ldr	x8, [x21, #2480]
   100006868:	8b130109 	add	x9, x8, x19
   10000686c:	3dd11920 	ldr	q0, [x9, #17504]
   100006870:	3dd11d21 	ldr	q1, [x9, #17520]
   100006874:	3dd12122 	ldr	q2, [x9, #17536]
  SGVecUInt point_origin_x = SGVecUInt_Shift_Right(SGVecUInt_Cast_SGVec(point.x), CHUNK_POW);
   100006878:	6ea1b800 	fcvtzu	v0.4s, v0.4s
   10000687c:	6f3a0400 	ushr	v0.4s, v0.4s, #6
  origin->x = SGVec_Cast_SGVecUInt(point_origin_x);
   100006880:	6e21d803 	ucvtf	v3.4s, v0.4s
   100006884:	3d915123 	str	q3, [x9, #17728]
  SGVecUInt point_origin_y = SGVecUInt_Shift_Right(SGVecUInt_Cast_SGVec(point.y), CHUNK_POW);
   100006888:	6ea1b821 	fcvtzu	v1.4s, v1.4s
   10000688c:	6f3a0421 	ushr	v1.4s, v1.4s, #6
  origin->y = SGVec_Cast_SGVecUInt(point_origin_y);
   100006890:	6e21d823 	ucvtf	v3.4s, v1.4s
   100006894:	3d915523 	str	q3, [x9, #17744]
  SGVecUInt point_origin_z = SGVecUInt_Shift_Right(SGVecUInt_Cast_SGVec(point.z), CHUNK_POW);
   100006898:	6ea1b842 	fcvtzu	v2.4s, v2.4s
   10000689c:	6f3a0442 	ushr	v2.4s, v2.4s, #6
  origin->z = SGVec_Cast_SGVecUInt(point_origin_z);
   1000068a0:	6e21d843 	ucvtf	v3.4s, v2.4s
   1000068a4:	3d915923 	str	q3, [x9, #17760]
  *id = SGVecUInt_Get_Lane(
   1000068a8:	6f265441 	sli	v1.4s, v2.4s, #6
   1000068ac:	6f265420 	sli	v0.4s, v1.4s, #6
   1000068b0:	5288a60a 	mov	w10, #0x4530                	// #17712
   1000068b4:	bc2a6920 	str	s0, [x9, x10]
  MTX_UNLOCK(world_db->player_mtxs[id]);
   1000068b8:	8b140108 	add	x8, x8, x20
   1000068bc:	91112100 	add	x0, x8, #0x448
   1000068c0:	9400021f 	bl	10000713c <_request_snapshot+0x634>
}
   1000068c4:	a9517bfd 	ldp	x29, x30, [sp, #272]
   1000068c8:	a9504ff4 	ldp	x20, x19, [sp, #256]
   1000068cc:	a94f57f6 	ldp	x22, x21, [sp, #240]
   1000068d0:	a94e6ffc 	ldp	x28, x27, [sp, #224]
   1000068d4:	910483ff 	add	sp, sp, #0x120
   1000068d8:	d65f03c0 	ret

00000001000068dc <_request_player_end>:

void request_player_end(unsigned int id) {
   1000068dc:	a9be4ff4 	stp	x20, x19, [sp, #-32]!
   1000068e0:	a9017bfd 	stp	x29, x30, [sp, #16]
   1000068e4:	910043fd 	add	x29, sp, #0x10
   1000068e8:	aa0003f3 	mov	x19, x0
  MTX_LOCK(world_db->active_ids_mtx);
   1000068ec:	b00000b4 	adrp	x20, 10001b000 <_render_client+0xd9f0>
   1000068f0:	f944da88 	ldr	x8, [x20, #2480]
   1000068f4:	91102100 	add	x0, x8, #0x408
   1000068f8:	9400020e 	bl	100007130 <_request_snapshot+0x628>
  pop_fast_list(&(world_db->active_ids), id);
   1000068fc:	f944da88 	ldr	x8, [x20, #2480]
   100006900:	b9400109 	ldr	w9, [x8]
  for (int i = 0; i < fast_list->num; i++) {
   100006904:	34000129 	cbz	w9, 100006928 <_request_player_end+0x4c>
   100006908:	9100110a 	add	x10, x8, #0x4
   10000690c:	aa0903eb 	mov	x11, x9
    if (fast_list->data[i] == data) {
   100006910:	b940014c 	ldr	w12, [x10]
   100006914:	6b13019f 	cmp	w12, w19
   100006918:	54000100 	b.eq	100006938 <_request_player_end+0x5c>  // b.none
  for (int i = 0; i < fast_list->num; i++) {
   10000691c:	9100114a 	add	x10, x10, #0x4
   100006920:	f100056b 	subs	x11, x11, #0x1
   100006924:	54ffff61 	b.ne	100006910 <_request_player_end+0x34>  // b.any
  MTX_UNLOCK(world_db->active_ids_mtx);
   100006928:	91102100 	add	x0, x8, #0x408
   10000692c:	a9417bfd 	ldp	x29, x30, [sp, #16]
   100006930:	a8c24ff4 	ldp	x20, x19, [sp], #32
   100006934:	14000202 	b	10000713c <_request_snapshot+0x634>
      fast_list->data[i] = fast_list->data[--fast_list->num];
   100006938:	51000529 	sub	w9, w9, #0x1
   10000693c:	b9000109 	str	w9, [x8]
   100006940:	8b294909 	add	x9, x8, w9, uxtw #2
   100006944:	b9400529 	ldr	w9, [x9, #4]
   100006948:	b9000149 	str	w9, [x10]
  MTX_UNLOCK(world_db->active_ids_mtx);
   10000694c:	91102100 	add	x0, x8, #0x408
   100006950:	a9417bfd 	ldp	x29, x30, [sp, #16]
   100006954:	a8c24ff4 	ldp	x20, x19, [sp], #32
   100006958:	140001f9 	b	10000713c <_request_snapshot+0x634>

000000010000695c <_end_world_db>:
}

void end_world_db() {
   10000695c:	a9bd57f6 	stp	x22, x21, [sp, #-48]!
   100006960:	a9014ff4 	stp	x20, x19, [sp, #16]
   100006964:	a9027bfd 	stp	x29, x30, [sp, #32]
   100006968:	910083fd 	add	x29, sp, #0x20
  MTX_DESTROY(world_db->active_ids_mtx);
   10000696c:	b00000b3 	adrp	x19, 10001b000 <_render_client+0xd9f0>
   100006970:	f944da68 	ldr	x8, [x19, #2480]
   100006974:	91102100 	add	x0, x8, #0x408
   100006978:	940001e8 	bl	100007118 <_request_snapshot+0x610>
   10000697c:	52808914 	mov	w20, #0x448                 	// #1096
   100006980:	52888915 	mov	w21, #0x4448                	// #17480
  for (int i = 0; i < MAX_CLIENTS; i++) MTX_DESTROY(world_db->player_mtxs[i]);
   100006984:	f944da68 	ldr	x8, [x19, #2480]
   100006988:	8b140100 	add	x0, x8, x20
   10000698c:	940001e3 	bl	100007118 <_request_snapshot+0x610>
   100006990:	91010294 	add	x20, x20, #0x40
   100006994:	eb15029f 	cmp	x20, x21
   100006998:	54ffff61 	b.ne	100006984 <_end_world_db+0x28>  // b.any
  munmap(world_db, sizeof(world_db_t));
   10000699c:	f944da60 	ldr	x0, [x19, #2480]
   1000069a0:	528c8a01 	mov	w1, #0x6450                	// #25680
   1000069a4:	72a00021 	movk	w1, #0x1, lsl #16
   1000069a8:	a9427bfd 	ldp	x29, x30, [sp, #32]
   1000069ac:	a9414ff4 	ldp	x20, x19, [sp, #16]
   1000069b0:	a8c357f6 	ldp	x22, x21, [sp], #48
   1000069b4:	140001ca 	b	1000070dc <_request_snapshot+0x5d4>

00000001000069b8 <_chunk_ids_contains>:
  }
}

bool chunk_ids_contains(unsigned int * container, unsigned int x) {
  for (int i = 0; i < CUBE_NUM; i++) {
    if (container[i] == x) return true;
   1000069b8:	b9400008 	ldr	w8, [x0]
   1000069bc:	6b01011f 	cmp	w8, w1
   1000069c0:	54000980 	b.eq	100006af0 <_chunk_ids_contains+0x138>  // b.none
   1000069c4:	b9400408 	ldr	w8, [x0, #4]
   1000069c8:	6b01011f 	cmp	w8, w1
   1000069cc:	54000920 	b.eq	100006af0 <_chunk_ids_contains+0x138>  // b.none
   1000069d0:	b9400808 	ldr	w8, [x0, #8]
   1000069d4:	6b01011f 	cmp	w8, w1
   1000069d8:	540008c0 	b.eq	100006af0 <_chunk_ids_contains+0x138>  // b.none
   1000069dc:	b9400c08 	ldr	w8, [x0, #12]
   1000069e0:	6b01011f 	cmp	w8, w1
   1000069e4:	54000860 	b.eq	100006af0 <_chunk_ids_contains+0x138>  // b.none
   1000069e8:	b9401008 	ldr	w8, [x0, #16]
   1000069ec:	6b01011f 	cmp	w8, w1
   1000069f0:	54000800 	b.eq	100006af0 <_chunk_ids_contains+0x138>  // b.none
   1000069f4:	b9401408 	ldr	w8, [x0, #20]
   1000069f8:	6b01011f 	cmp	w8, w1
   1000069fc:	540007a0 	b.eq	100006af0 <_chunk_ids_contains+0x138>  // b.none
   100006a00:	b9401808 	ldr	w8, [x0, #24]
   100006a04:	6b01011f 	cmp	w8, w1
   100006a08:	54000740 	b.eq	100006af0 <_chunk_ids_contains+0x138>  // b.none
   100006a0c:	b9401c08 	ldr	w8, [x0, #28]
   100006a10:	6b01011f 	cmp	w8, w1
   100006a14:	540006e0 	b.eq	100006af0 <_chunk_ids_contains+0x138>  // b.none
   100006a18:	b9402008 	ldr	w8, [x0, #32]
   100006a1c:	6b01011f 	cmp	w8, w1
   100006a20:	54000680 	b.eq	100006af0 <_chunk_ids_contains+0x138>  // b.none
   100006a24:	b9402408 	ldr	w8, [x0, #36]
   100006a28:	6b01011f 	cmp	w8, w1
   100006a2c:	54000620 	b.eq	100006af0 <_chunk_ids_contains+0x138>  // b.none
   100006a30:	b9402808 	ldr	w8, [x0, #40]
   100006a34:	6b01011f 	cmp	w8, w1
   100006a38:	540005c0 	b.eq	100006af0 <_chunk_ids_contains+0x138>  // b.none
   100006a3c:	b9402c08 	ldr	w8, [x0, #44]
   100006a40:	6b01011f 	cmp	w8, w1
   100006a44:	54000560 	b.eq	100006af0 <_chunk_ids_contains+0x138>  // b.none
   100006a48:	b9403008 	ldr	w8, [x0, #48]
   100006a4c:	6b01011f 	cmp	w8, w1
   100006a50:	54000500 	b.eq	100006af0 <_chunk_ids_contains+0x138>  // b.none
   100006a54:	b9403408 	ldr	w8, [x0, #52]
   100006a58:	6b01011f 	cmp	w8, w1
   100006a5c:	540004a0 	b.eq	100006af0 <_chunk_ids_contains+0x138>  // b.none
   100006a60:	b9403808 	ldr	w8, [x0, #56]
   100006a64:	6b01011f 	cmp	w8, w1
   100006a68:	54000440 	b.eq	100006af0 <_chunk_ids_contains+0x138>  // b.none
   100006a6c:	b9403c08 	ldr	w8, [x0, #60]
   100006a70:	6b01011f 	cmp	w8, w1
   100006a74:	540003e0 	b.eq	100006af0 <_chunk_ids_contains+0x138>  // b.none
   100006a78:	b9404008 	ldr	w8, [x0, #64]
   100006a7c:	6b01011f 	cmp	w8, w1
   100006a80:	54000380 	b.eq	100006af0 <_chunk_ids_contains+0x138>  // b.none
   100006a84:	b9404408 	ldr	w8, [x0, #68]
   100006a88:	6b01011f 	cmp	w8, w1
   100006a8c:	54000320 	b.eq	100006af0 <_chunk_ids_contains+0x138>  // b.none
   100006a90:	b9404808 	ldr	w8, [x0, #72]
   100006a94:	6b01011f 	cmp	w8, w1
   100006a98:	540002c0 	b.eq	100006af0 <_chunk_ids_contains+0x138>  // b.none
   100006a9c:	b9404c08 	ldr	w8, [x0, #76]
   100006aa0:	6b01011f 	cmp	w8, w1
   100006aa4:	54000260 	b.eq	100006af0 <_chunk_ids_contains+0x138>  // b.none
   100006aa8:	b9405008 	ldr	w8, [x0, #80]
   100006aac:	6b01011f 	cmp	w8, w1
   100006ab0:	54000200 	b.eq	100006af0 <_chunk_ids_contains+0x138>  // b.none
   100006ab4:	b9405408 	ldr	w8, [x0, #84]
   100006ab8:	6b01011f 	cmp	w8, w1
   100006abc:	540001a0 	b.eq	100006af0 <_chunk_ids_contains+0x138>  // b.none
   100006ac0:	b9405808 	ldr	w8, [x0, #88]
   100006ac4:	6b01011f 	cmp	w8, w1
   100006ac8:	54000140 	b.eq	100006af0 <_chunk_ids_contains+0x138>  // b.none
   100006acc:	b9405c08 	ldr	w8, [x0, #92]
   100006ad0:	6b01011f 	cmp	w8, w1
   100006ad4:	540000e0 	b.eq	100006af0 <_chunk_ids_contains+0x138>  // b.none
   100006ad8:	b9406008 	ldr	w8, [x0, #96]
   100006adc:	6b01011f 	cmp	w8, w1
   100006ae0:	54000080 	b.eq	100006af0 <_chunk_ids_contains+0x138>  // b.none
   100006ae4:	b9406408 	ldr	w8, [x0, #100]
   100006ae8:	6b01011f 	cmp	w8, w1
   100006aec:	54000061 	b.ne	100006af8 <_chunk_ids_contains+0x140>  // b.any
   100006af0:	52800020 	mov	w0, #0x1                   	// #1
  }
  return false;
}
   100006af4:	d65f03c0 	ret
    if (container[i] == x) return true;
   100006af8:	b9406808 	ldr	w8, [x0, #104]
   100006afc:	6b01011f 	cmp	w8, w1
   100006b00:	1a9f17e0 	cset	w0, eq  // eq = none
}
   100006b04:	d65f03c0 	ret

0000000100006b08 <_request_snapshot>:

world_snapshot_t request_snapshot(unsigned int id) {
   100006b08:	d106c3ff 	sub	sp, sp, #0x1b0
   100006b0c:	a9156ffc 	stp	x28, x27, [sp, #336]
   100006b10:	a91667fa 	stp	x26, x25, [sp, #352]
   100006b14:	a9175ff8 	stp	x24, x23, [sp, #368]
   100006b18:	a91857f6 	stp	x22, x21, [sp, #384]
   100006b1c:	a9194ff4 	stp	x20, x19, [sp, #400]
   100006b20:	a91a7bfd 	stp	x29, x30, [sp, #416]
   100006b24:	910683fd 	add	x29, sp, #0x1a0
   100006b28:	aa0003f4 	mov	x20, x0
   100006b2c:	aa0803f3 	mov	x19, x8
  world_snapshot_t snapshot = (world_snapshot_t) {
   100006b30:	aa0803e0 	mov	x0, x8
   100006b34:	529c1e01 	mov	w1, #0xe0f0                	// #57584
   100006b38:	94000151 	bl	10000707c <_request_snapshot+0x574>
    .num_ships = 0
  };

  unsigned int accept_chunk_ids[CUBE_NUM];

  MTX_LOCK(world_db->player_mtxs[id]);
   100006b3c:	b00000b7 	adrp	x23, 10001b000 <_render_client+0xd9f0>
   100006b40:	f944dae8 	ldr	x8, [x23, #2480]
   100006b44:	2a1403e9 	mov	w9, w20
   100006b48:	d37ae536 	lsl	x22, x9, #6
   100006b4c:	8b160108 	add	x8, x8, x22
   100006b50:	91112100 	add	x0, x8, #0x448
   100006b54:	94000177 	bl	100007130 <_request_snapshot+0x628>
   100006b58:	52800028 	mov	w8, #0x1                   	// #1
  snapshot.ships[snapshot.num_ships++] = world_db->players[id].self;
   100006b5c:	b900da68 	str	w8, [x19, #216]
   100006b60:	91038268 	add	x8, x19, #0xe0
   100006b64:	f944dae9 	ldr	x9, [x23, #2480]
   100006b68:	5280240a 	mov	w10, #0x120                 	// #288
   100006b6c:	9baa268a 	umaddl	x10, w20, w10, x9
   100006b70:	3dd11540 	ldr	q0, [x10, #17488]
   100006b74:	3dd11941 	ldr	q1, [x10, #17504]
   100006b78:	3d803e61 	str	q1, [x19, #240]
   100006b7c:	3dd12941 	ldr	q1, [x10, #17568]
   100006b80:	3dd12542 	ldr	q2, [x10, #17552]
   100006b84:	3dd12143 	ldr	q3, [x10, #17536]
   100006b88:	3dd11d44 	ldr	q4, [x10, #17520]
   100006b8c:	ad080e64 	stp	q4, q3, [x19, #256]
   100006b90:	ad090662 	stp	q2, q1, [x19, #288]
   100006b94:	3dd13941 	ldr	q1, [x10, #17632]
   100006b98:	3dd13542 	ldr	q2, [x10, #17616]
   100006b9c:	3dd13143 	ldr	q3, [x10, #17600]
   100006ba0:	3dd12d44 	ldr	q4, [x10, #17584]
   100006ba4:	ad0a0e64 	stp	q4, q3, [x19, #320]
   100006ba8:	ad0b0662 	stp	q2, q1, [x19, #352]
   100006bac:	3dd14941 	ldr	q1, [x10, #17696]
   100006bb0:	3dd14542 	ldr	q2, [x10, #17680]
   100006bb4:	3dd14143 	ldr	q3, [x10, #17664]
   100006bb8:	3dd13d44 	ldr	q4, [x10, #17648]
   100006bbc:	ad0c0e64 	stp	q4, q3, [x19, #384]
   100006bc0:	ad0d0662 	stp	q2, q1, [x19, #416]
   100006bc4:	529c1c0b 	mov	w11, #0xe0e0                	// #57568
  snapshot.self = snapshot.ships;
   100006bc8:	f82b6a68 	str	x8, [x19, x11]
  snapshot.ships[snapshot.num_ships++] = world_db->players[id].self;
   100006bcc:	3d803a60 	str	q0, [x19, #224]
   100006bd0:	5288a608 	mov	w8, #0x4530                	// #17712
  gather_acceptable_chunks(world_db->players[id].chunk_id, accept_chunk_ids);
   100006bd4:	b8686955 	ldr	w21, [x10, x8]
  MTX_UNLOCK(world_db->player_mtxs[id]);
   100006bd8:	8b160128 	add	x8, x9, x22
   100006bdc:	91112100 	add	x0, x8, #0x448
   100006be0:	94000157 	bl	10000713c <_request_snapshot+0x634>

  MTX_LOCK(world_db->active_ids_mtx);
   100006be4:	f944dae8 	ldr	x8, [x23, #2480]
   100006be8:	91102100 	add	x0, x8, #0x408
   100006bec:	94000151 	bl	100007130 <_request_snapshot+0x628>
  for (int i = 0; i < world_db->active_ids.num; i++) {
   100006bf0:	f944dae8 	ldr	x8, [x23, #2480]
   100006bf4:	b9400109 	ldr	w9, [x8]
   100006bf8:	34001609 	cbz	w9, 100006eb8 <_request_snapshot+0x3b0>
   100006bfc:	d2800016 	mov	x22, #0x0                   	// #0
   100006c00:	1140fea9 	add	w9, w21, #0x3f, lsl #12
   100006c04:	529df7ea 	mov	w10, #0xefbf                	// #61375
   100006c08:	72a0006a 	movk	w10, #0x3, lsl #16
   100006c0c:	0b0a02aa 	add	w10, w21, w10
   100006c10:	1100054b 	add	w11, w10, #0x1
   100006c14:	1200454c 	and	w12, w10, #0x3ffff
   100006c18:	1200456b 	and	w11, w11, #0x3ffff
   100006c1c:	290b33eb 	stp	w11, w12, [sp, #88]
   100006c20:	1100094b 	add	w11, w10, #0x2
   100006c24:	12004570 	and	w16, w11, #0x3ffff
   100006c28:	1101014b 	add	w11, w10, #0x40
   100006c2c:	1200456b 	and	w11, w11, #0x3ffff
   100006c30:	290a43eb 	stp	w11, w16, [sp, #80]
   100006c34:	1200452b 	and	w11, w9, #0x3ffff
   100006c38:	11010949 	add	w9, w10, #0x42
   100006c3c:	12004529 	and	w9, w9, #0x3ffff
   100006c40:	29092fe9 	stp	w9, w11, [sp, #72]
   100006c44:	11020549 	add	w9, w10, #0x81
   100006c48:	1102014b 	add	w11, w10, #0x80
   100006c4c:	1200456b 	and	w11, w11, #0x3ffff
   100006c50:	12004529 	and	w9, w9, #0x3ffff
   100006c54:	29082fe9 	stp	w9, w11, [sp, #64]
   100006c58:	11020949 	add	w9, w10, #0x82
   100006c5c:	1200452b 	and	w11, w9, #0x3ffff
   100006c60:	321a2fe9 	mov	w9, #0x3ffc0               	// #262080
   100006c64:	0b0902a9 	add	w9, w21, w9
   100006c68:	1140054a 	add	w10, w10, #0x1, lsl #12
   100006c6c:	1200454a 	and	w10, w10, #0x3ffff
   100006c70:	29072fea 	stp	w10, w11, [sp, #56]
   100006c74:	1200452a 	and	w10, w9, #0x3ffff
   100006c78:	529ff829 	mov	w9, #0xffc1                	// #65473
   100006c7c:	72a00069 	movk	w9, #0x3, lsl #16
   100006c80:	0b0902a9 	add	w9, w21, w9
   100006c84:	12004529 	and	w9, w9, #0x3ffff
   100006c88:	29062be9 	stp	w9, w10, [sp, #48]
   100006c8c:	510006a9 	sub	w9, w21, #0x1
   100006c90:	1200452a 	and	w10, w9, #0x3ffff
   100006c94:	120046a9 	and	w9, w21, #0x3ffff
   100006c98:	29052be9 	stp	w9, w10, [sp, #40]
   100006c9c:	110006a9 	add	w9, w21, #0x1
   100006ca0:	1200452b 	and	w11, w9, #0x3ffff
   100006ca4:	110102a9 	add	w9, w21, #0x40
   100006ca8:	1100feaa 	add	w10, w21, #0x3f
   100006cac:	1200454a 	and	w10, w10, #0x3ffff
   100006cb0:	29042fea 	stp	w10, w11, [sp, #32]
   100006cb4:	1200452a 	and	w10, w9, #0x3ffff
   100006cb8:	110106a9 	add	w9, w21, #0x41
   100006cbc:	12004529 	and	w9, w9, #0x3ffff
   100006cc0:	29032be9 	stp	w9, w10, [sp, #24]
   100006cc4:	114006a9 	add	w9, w21, #0x1, lsl #12
   100006cc8:	113f02aa 	add	w10, w21, #0xfc0
   100006ccc:	113efeab 	add	w11, w21, #0xfbf
   100006cd0:	1200456b 	and	w11, w11, #0x3ffff
   100006cd4:	1200454a 	and	w10, w10, #0x3ffff
   100006cd8:	29022fea 	stp	w10, w11, [sp, #16]
   100006cdc:	113f06aa 	add	w10, w21, #0xfc1
   100006ce0:	1200454b 	and	w11, w10, #0x3ffff
   100006ce4:	113ffeaa 	add	w10, w21, #0xfff
   100006ce8:	1200454a 	and	w10, w10, #0x3ffff
   100006cec:	29012fea 	stp	w10, w11, [sp, #8]
   100006cf0:	12004538 	and	w24, w9, #0x3ffff
   100006cf4:	52820029 	mov	w9, #0x1001                	// #4097
   100006cf8:	0b0902a9 	add	w9, w21, w9
   100006cfc:	12004539 	and	w25, w9, #0x3ffff
   100006d00:	52820809 	mov	w9, #0x1040                	// #4160
   100006d04:	0b0902a9 	add	w9, w21, w9
   100006d08:	528207ea 	mov	w10, #0x103f                	// #4159
   100006d0c:	0b0a02aa 	add	w10, w21, w10
   100006d10:	1200455a 	and	w26, w10, #0x3ffff
   100006d14:	1200453b 	and	w27, w9, #0x3ffff
   100006d18:	52820829 	mov	w9, #0x1041                	// #4161
   100006d1c:	0b0902a9 	add	w9, w21, w9
   100006d20:	1200453c 	and	w28, w9, #0x3ffff
   100006d24:	b00000b7 	adrp	x23, 10001b000 <_render_client+0xd9f0>
   100006d28:	14000009 	b	100006d4c <_request_snapshot+0x244>
    if (iter_id == id) continue;

    MTX_LOCK(world_db->player_mtxs[iter_id]);
    if (chunk_ids_contains(accept_chunk_ids, world_db->players[iter_id].chunk_id))
      snapshot.ships[snapshot.num_ships++] = world_db->players[iter_id].self;
    MTX_UNLOCK(world_db->player_mtxs[iter_id]);
   100006d2c:	8b151908 	add	x8, x8, x21, lsl #6
   100006d30:	91112100 	add	x0, x8, #0x448
   100006d34:	94000102 	bl	10000713c <_request_snapshot+0x634>
  for (int i = 0; i < world_db->active_ids.num; i++) {
   100006d38:	f944dae8 	ldr	x8, [x23, #2480]
   100006d3c:	910006d6 	add	x22, x22, #0x1
   100006d40:	b9400109 	ldr	w9, [x8]
   100006d44:	eb0902df 	cmp	x22, x9
   100006d48:	54000b82 	b.cs	100006eb8 <_request_snapshot+0x3b0>  // b.hs, b.nlast
    unsigned int iter_id = world_db->active_ids.data[i];
   100006d4c:	8b160909 	add	x9, x8, x22, lsl #2
   100006d50:	b9400535 	ldr	w21, [x9, #4]
    if (iter_id == id) continue;
   100006d54:	6b1402bf 	cmp	w21, w20
   100006d58:	54ffff20 	b.eq	100006d3c <_request_snapshot+0x234>  // b.none
    MTX_LOCK(world_db->player_mtxs[iter_id]);
   100006d5c:	8b151908 	add	x8, x8, x21, lsl #6
   100006d60:	91112100 	add	x0, x8, #0x448
   100006d64:	940000f3 	bl	100007130 <_request_snapshot+0x628>
    if (chunk_ids_contains(accept_chunk_ids, world_db->players[iter_id].chunk_id))
   100006d68:	f944dae8 	ldr	x8, [x23, #2480]
   100006d6c:	52802409 	mov	w9, #0x120                 	// #288
   100006d70:	9b0922a9 	madd	x9, x21, x9, x8
   100006d74:	5288a60a 	mov	w10, #0x4530                	// #17712
   100006d78:	b86a6929 	ldr	w9, [x9, x10]
   100006d7c:	b9405fea 	ldr	w10, [sp, #92]
    if (container[i] == x) return true;
   100006d80:	6b09015f 	cmp	w10, w9
   100006d84:	b9405bea 	ldr	w10, [sp, #88]
   100006d88:	7a491144 	ccmp	w10, w9, #0x4, ne  // ne = any
   100006d8c:	b94057ea 	ldr	w10, [sp, #84]
   100006d90:	7a491144 	ccmp	w10, w9, #0x4, ne  // ne = any
   100006d94:	b94053ea 	ldr	w10, [sp, #80]
   100006d98:	7a491144 	ccmp	w10, w9, #0x4, ne  // ne = any
   100006d9c:	b9404fea 	ldr	w10, [sp, #76]
   100006da0:	7a491144 	ccmp	w10, w9, #0x4, ne  // ne = any
   100006da4:	b9404bea 	ldr	w10, [sp, #72]
   100006da8:	7a491144 	ccmp	w10, w9, #0x4, ne  // ne = any
   100006dac:	b94047ea 	ldr	w10, [sp, #68]
   100006db0:	7a491144 	ccmp	w10, w9, #0x4, ne  // ne = any
   100006db4:	b94043ea 	ldr	w10, [sp, #64]
   100006db8:	7a491144 	ccmp	w10, w9, #0x4, ne  // ne = any
   100006dbc:	b9403fea 	ldr	w10, [sp, #60]
   100006dc0:	7a491144 	ccmp	w10, w9, #0x4, ne  // ne = any
   100006dc4:	b9403bea 	ldr	w10, [sp, #56]
   100006dc8:	7a491144 	ccmp	w10, w9, #0x4, ne  // ne = any
   100006dcc:	b94037ea 	ldr	w10, [sp, #52]
   100006dd0:	7a491144 	ccmp	w10, w9, #0x4, ne  // ne = any
   100006dd4:	b94033ea 	ldr	w10, [sp, #48]
   100006dd8:	7a491144 	ccmp	w10, w9, #0x4, ne  // ne = any
   100006ddc:	b9402fea 	ldr	w10, [sp, #44]
   100006de0:	7a491144 	ccmp	w10, w9, #0x4, ne  // ne = any
   100006de4:	b9402bea 	ldr	w10, [sp, #40]
   100006de8:	7a491144 	ccmp	w10, w9, #0x4, ne  // ne = any
   100006dec:	b94027ea 	ldr	w10, [sp, #36]
   100006df0:	7a491144 	ccmp	w10, w9, #0x4, ne  // ne = any
   100006df4:	b94023ea 	ldr	w10, [sp, #32]
   100006df8:	7a491144 	ccmp	w10, w9, #0x4, ne  // ne = any
   100006dfc:	b9401fea 	ldr	w10, [sp, #28]
   100006e00:	7a491144 	ccmp	w10, w9, #0x4, ne  // ne = any
   100006e04:	b9401bea 	ldr	w10, [sp, #24]
   100006e08:	7a491144 	ccmp	w10, w9, #0x4, ne  // ne = any
   100006e0c:	b94017ea 	ldr	w10, [sp, #20]
   100006e10:	7a491144 	ccmp	w10, w9, #0x4, ne  // ne = any
   100006e14:	b94013ea 	ldr	w10, [sp, #16]
   100006e18:	7a491144 	ccmp	w10, w9, #0x4, ne  // ne = any
   100006e1c:	b9400fea 	ldr	w10, [sp, #12]
   100006e20:	7a491144 	ccmp	w10, w9, #0x4, ne  // ne = any
   100006e24:	b9400bea 	ldr	w10, [sp, #8]
   100006e28:	7a491144 	ccmp	w10, w9, #0x4, ne  // ne = any
   100006e2c:	7a491304 	ccmp	w24, w9, #0x4, ne  // ne = any
   100006e30:	7a491324 	ccmp	w25, w9, #0x4, ne  // ne = any
   100006e34:	7a491344 	ccmp	w26, w9, #0x4, ne  // ne = any
   100006e38:	7a491364 	ccmp	w27, w9, #0x4, ne  // ne = any
   100006e3c:	7a491384 	ccmp	w28, w9, #0x4, ne  // ne = any
   100006e40:	54fff761 	b.ne	100006d2c <_request_snapshot+0x224>  // b.any
      snapshot.ships[snapshot.num_ships++] = world_db->players[iter_id].self;
   100006e44:	b940da69 	ldr	w9, [x19, #216]
   100006e48:	1100052a 	add	w10, w9, #0x1
   100006e4c:	b900da6a 	str	w10, [x19, #216]
   100006e50:	52801c0a 	mov	w10, #0xe0                  	// #224
   100006e54:	9b0a4d29 	madd	x9, x9, x10, x19
   100006e58:	5280240a 	mov	w10, #0x120                 	// #288
   100006e5c:	9b0a22aa 	madd	x10, x21, x10, x8
   100006e60:	3dd11540 	ldr	q0, [x10, #17488]
   100006e64:	3dd11941 	ldr	q1, [x10, #17504]
   100006e68:	ad070520 	stp	q0, q1, [x9, #224]
   100006e6c:	3dd11d40 	ldr	q0, [x10, #17520]
   100006e70:	3dd12141 	ldr	q1, [x10, #17536]
   100006e74:	3dd12542 	ldr	q2, [x10, #17552]
   100006e78:	3dd12943 	ldr	q3, [x10, #17568]
   100006e7c:	ad090d22 	stp	q2, q3, [x9, #288]
   100006e80:	ad080520 	stp	q0, q1, [x9, #256]
   100006e84:	3dd12d40 	ldr	q0, [x10, #17584]
   100006e88:	3dd13141 	ldr	q1, [x10, #17600]
   100006e8c:	3dd13542 	ldr	q2, [x10, #17616]
   100006e90:	3dd13943 	ldr	q3, [x10, #17632]
   100006e94:	ad0b0d22 	stp	q2, q3, [x9, #352]
   100006e98:	ad0a0520 	stp	q0, q1, [x9, #320]
   100006e9c:	3dd13d40 	ldr	q0, [x10, #17648]
   100006ea0:	3dd14141 	ldr	q1, [x10, #17664]
   100006ea4:	3dd14542 	ldr	q2, [x10, #17680]
   100006ea8:	3dd14943 	ldr	q3, [x10, #17696]
   100006eac:	ad0d0d22 	stp	q2, q3, [x9, #416]
   100006eb0:	ad0c0520 	stp	q0, q1, [x9, #384]
   100006eb4:	17ffff9e 	b	100006d2c <_request_snapshot+0x224>

  }
  MTX_UNLOCK(world_db->active_ids_mtx);
   100006eb8:	91102100 	add	x0, x8, #0x408
   100006ebc:	940000a0 	bl	10000713c <_request_snapshot+0x634>
   100006ec0:	52800116 	mov	w22, #0x8                   	// #8

  //REMOVE LATER TESTING ONLY
  for (int i = 1; i < CUBE_NUM; i++) {
    snapshot.chunks[i] = malloc(1 * sizeof(chunk_t));
   100006ec4:	52800400 	mov	w0, #0x20                  	// #32
   100006ec8:	9400007c 	bl	1000070b8 <_request_snapshot+0x5b0>
   100006ecc:	aa0003f4 	mov	x20, x0
   100006ed0:	f8366a60 	str	x0, [x19, x22]
    *(snapshot.chunks[i]) = (chunk_t) {
      .num_objects = 0,
      .objects = malloc(0 * sizeof(object_t)),
   100006ed4:	d2800000 	mov	x0, #0x0                   	// #0
   100006ed8:	94000078 	bl	1000070b8 <_request_snapshot+0x5b0>
   100006edc:	aa0003f5 	mov	x21, x0
      .num_lights = 0,
      .lights = malloc(0 * sizeof(object_t *))
   100006ee0:	d2800000 	mov	x0, #0x0                   	// #0
   100006ee4:	94000075 	bl	1000070b8 <_request_snapshot+0x5b0>
    *(snapshot.chunks[i]) = (chunk_t) {
   100006ee8:	b900029f 	str	wzr, [x20]
   100006eec:	f9000695 	str	x21, [x20, #8]
   100006ef0:	b900129f 	str	wzr, [x20, #16]
   100006ef4:	f9000e80 	str	x0, [x20, #24]
  for (int i = 1; i < CUBE_NUM; i++) {
   100006ef8:	910022d6 	add	x22, x22, #0x8
   100006efc:	f10362df 	cmp	x22, #0xd8
   100006f00:	54fffe21 	b.ne	100006ec4 <_request_snapshot+0x3bc>  // b.any
    };
  }

  snapshot.chunks[0] = malloc(1 * sizeof(chunk_t));
   100006f04:	52800400 	mov	w0, #0x20                  	// #32
   100006f08:	9400006c 	bl	1000070b8 <_request_snapshot+0x5b0>
   100006f0c:	aa0003f4 	mov	x20, x0
   100006f10:	f9000260 	str	x0, [x19]
  *(snapshot.chunks[0]) = (chunk_t) {
    .num_objects = 3,
    .objects = malloc(3 * sizeof(object_t)),
   100006f14:	52805400 	mov	w0, #0x2a0                 	// #672
   100006f18:	94000068 	bl	1000070b8 <_request_snapshot+0x5b0>
   100006f1c:	aa0003f5 	mov	x21, x0

    .num_lights = 1,
    .lights = malloc(1 * sizeof(object_t *))
   100006f20:	52800100 	mov	w0, #0x8                   	// #8
   100006f24:	94000065 	bl	1000070b8 <_request_snapshot+0x5b0>
   100006f28:	52800068 	mov	w8, #0x3                   	// #3
  *(snapshot.chunks[0]) = (chunk_t) {
   100006f2c:	b9000288 	str	w8, [x20]
   100006f30:	f9000695 	str	x21, [x20, #8]
   100006f34:	52800028 	mov	w8, #0x1                   	// #1
   100006f38:	b9001288 	str	w8, [x20, #16]
   100006f3c:	f9000e80 	str	x0, [x20, #24]
  };

  snapshot.chunks[0]->objects[0] = create_null_object();
   100006f40:	910183e8 	add	x8, sp, #0x60
   100006f44:	97fff619 	bl	1000047a8 <_create_null_object>
   100006f48:	ad4807e0 	ldp	q0, q1, [sp, #256]
   100006f4c:	ad0506a0 	stp	q0, q1, [x21, #160]
   100006f50:	ad4907e0 	ldp	q0, q1, [sp, #288]
   100006f54:	ad0606a0 	stp	q0, q1, [x21, #192]
   100006f58:	ad4607e0 	ldp	q0, q1, [sp, #192]
   100006f5c:	ad0306a0 	stp	q0, q1, [x21, #96]
   100006f60:	ad4707e0 	ldp	q0, q1, [sp, #224]
   100006f64:	ad0406a0 	stp	q0, q1, [x21, #128]
   100006f68:	ad4407e0 	ldp	q0, q1, [sp, #128]
   100006f6c:	ad0106a0 	stp	q0, q1, [x21, #32]
   100006f70:	ad4507e0 	ldp	q0, q1, [sp, #160]
   100006f74:	ad0206a0 	stp	q0, q1, [x21, #64]
   100006f78:	ad4307e0 	ldp	q0, q1, [sp, #96]
   100006f7c:	ad0006a0 	stp	q0, q1, [x21]
  snapshot.chunks[0]->objects[1] = create_planet((SGVec3D_t) {
   100006f80:	f9400268 	ldr	x8, [x19]
   100006f84:	f9400514 	ldr	x20, [x8, #8]
   100006f88:	10002348 	adr	x8, 1000073f0 <__PromotedConst>
   100006f8c:	d503201f 	nop
   100006f90:	ad400500 	ldp	q0, q1, [x8]
   100006f94:	3dc00902 	ldr	q2, [x8, #32]
   100006f98:	910183e8 	add	x8, sp, #0x60
   100006f9c:	97ffeffd 	bl	100002f90 <_create_planet>
   100006fa0:	ad4807e0 	ldp	q0, q1, [sp, #256]
   100006fa4:	ad0c0680 	stp	q0, q1, [x20, #384]
   100006fa8:	ad4907e0 	ldp	q0, q1, [sp, #288]
   100006fac:	ad0d0680 	stp	q0, q1, [x20, #416]
   100006fb0:	ad4607e0 	ldp	q0, q1, [sp, #192]
   100006fb4:	ad0a0680 	stp	q0, q1, [x20, #320]
   100006fb8:	ad4707e0 	ldp	q0, q1, [sp, #224]
   100006fbc:	ad0b0680 	stp	q0, q1, [x20, #352]
   100006fc0:	ad4407e0 	ldp	q0, q1, [sp, #128]
   100006fc4:	ad080680 	stp	q0, q1, [x20, #256]
   100006fc8:	ad4507e0 	ldp	q0, q1, [sp, #160]
   100006fcc:	ad090680 	stp	q0, q1, [x20, #288]
   100006fd0:	ad4307e0 	ldp	q0, q1, [sp, #96]
   100006fd4:	ad070680 	stp	q0, q1, [x20, #224]
    .x = SGVec_Load_Const(0.),
    .y = SGVec_Load_Const(0.),
    .z = SGVec_Load_Const(10.)
  });
  snapshot.chunks[0]->lights[0] = snapshot.chunks[0]->objects + 2;
   100006fd8:	f9400268 	ldr	x8, [x19]
   100006fdc:	f9400509 	ldr	x9, [x8, #8]
   100006fe0:	91070129 	add	x9, x9, #0x1c0
   100006fe4:	f9400d08 	ldr	x8, [x8, #24]
   100006fe8:	f9000109 	str	x9, [x8]
  snapshot.chunks[0]->objects[2] = create_star((SGVec3D_t) {
   100006fec:	f9400268 	ldr	x8, [x19]
   100006ff0:	f9400513 	ldr	x19, [x8, #8]
   100006ff4:	10002168 	adr	x8, 100007420 <__PromotedConst.1>
   100006ff8:	d503201f 	nop
   100006ffc:	ad400500 	ldp	q0, q1, [x8]
   100007000:	3dc00902 	ldr	q2, [x8, #32]
   100007004:	910183e8 	add	x8, sp, #0x60
   100007008:	97fff020 	bl	100003088 <_create_star>
   10000700c:	ad4807e0 	ldp	q0, q1, [sp, #256]
   100007010:	ad130660 	stp	q0, q1, [x19, #608]
   100007014:	ad4907e0 	ldp	q0, q1, [sp, #288]
   100007018:	ad140660 	stp	q0, q1, [x19, #640]
   10000701c:	ad4607e0 	ldp	q0, q1, [sp, #192]
   100007020:	ad110660 	stp	q0, q1, [x19, #544]
   100007024:	ad4707e0 	ldp	q0, q1, [sp, #224]
   100007028:	ad120660 	stp	q0, q1, [x19, #576]
   10000702c:	ad4407e0 	ldp	q0, q1, [sp, #128]
   100007030:	ad0f0660 	stp	q0, q1, [x19, #480]
   100007034:	ad4507e0 	ldp	q0, q1, [sp, #160]
   100007038:	ad100660 	stp	q0, q1, [x19, #512]
   10000703c:	ad4307e0 	ldp	q0, q1, [sp, #96]
   100007040:	ad0e0660 	stp	q0, q1, [x19, #448]
    .y = SGVec_Load_Const(10.),
    .z = SGVec_Load_Const(0.)
  });

  return snapshot;
}
   100007044:	a95a7bfd 	ldp	x29, x30, [sp, #416]
   100007048:	a9594ff4 	ldp	x20, x19, [sp, #400]
   10000704c:	a95857f6 	ldp	x22, x21, [sp, #384]
   100007050:	a9575ff8 	ldp	x24, x23, [sp, #368]
   100007054:	a95667fa 	ldp	x26, x25, [sp, #352]
   100007058:	a9556ffc 	ldp	x28, x27, [sp, #336]
   10000705c:	9106c3ff 	add	sp, sp, #0x1b0
   100007060:	d65f03c0 	ret

Disassembly of section __TEXT.__stubs:

0000000100007064 <__TEXT.__stubs>:
   100007064:	b0000010 	adrp	x16, 100008000 <__PromotedConst.1+0xbe0>
   100007068:	f9400610 	ldr	x16, [x16, #8]
   10000706c:	d61f0200 	br	x16
   100007070:	b0000010 	adrp	x16, 100008000 <__PromotedConst.1+0xbe0>
   100007074:	f9400a10 	ldr	x16, [x16, #16]
   100007078:	d61f0200 	br	x16
   10000707c:	b0000010 	adrp	x16, 100008000 <__PromotedConst.1+0xbe0>
   100007080:	f9401210 	ldr	x16, [x16, #32]
   100007084:	d61f0200 	br	x16
   100007088:	b0000010 	adrp	x16, 100008000 <__PromotedConst.1+0xbe0>
   10000708c:	f9401610 	ldr	x16, [x16, #40]
   100007090:	d61f0200 	br	x16
   100007094:	b0000010 	adrp	x16, 100008000 <__PromotedConst.1+0xbe0>
   100007098:	f9401a10 	ldr	x16, [x16, #48]
   10000709c:	d61f0200 	br	x16
   1000070a0:	b0000010 	adrp	x16, 100008000 <__PromotedConst.1+0xbe0>
   1000070a4:	f9401e10 	ldr	x16, [x16, #56]
   1000070a8:	d61f0200 	br	x16
   1000070ac:	b0000010 	adrp	x16, 100008000 <__PromotedConst.1+0xbe0>
   1000070b0:	f9402210 	ldr	x16, [x16, #64]
   1000070b4:	d61f0200 	br	x16
   1000070b8:	b0000010 	adrp	x16, 100008000 <__PromotedConst.1+0xbe0>
   1000070bc:	f9402610 	ldr	x16, [x16, #72]
   1000070c0:	d61f0200 	br	x16
   1000070c4:	b0000010 	adrp	x16, 100008000 <__PromotedConst.1+0xbe0>
   1000070c8:	f9402a10 	ldr	x16, [x16, #80]
   1000070cc:	d61f0200 	br	x16
   1000070d0:	b0000010 	adrp	x16, 100008000 <__PromotedConst.1+0xbe0>
   1000070d4:	f9402e10 	ldr	x16, [x16, #88]
   1000070d8:	d61f0200 	br	x16
   1000070dc:	b0000010 	adrp	x16, 100008000 <__PromotedConst.1+0xbe0>
   1000070e0:	f9403210 	ldr	x16, [x16, #96]
   1000070e4:	d61f0200 	br	x16
   1000070e8:	b0000010 	adrp	x16, 100008000 <__PromotedConst.1+0xbe0>
   1000070ec:	f9403610 	ldr	x16, [x16, #104]
   1000070f0:	d61f0200 	br	x16
   1000070f4:	b0000010 	adrp	x16, 100008000 <__PromotedConst.1+0xbe0>
   1000070f8:	f9403a10 	ldr	x16, [x16, #112]
   1000070fc:	d61f0200 	br	x16
   100007100:	b0000010 	adrp	x16, 100008000 <__PromotedConst.1+0xbe0>
   100007104:	f9403e10 	ldr	x16, [x16, #120]
   100007108:	d61f0200 	br	x16
   10000710c:	b0000010 	adrp	x16, 100008000 <__PromotedConst.1+0xbe0>
   100007110:	f9404210 	ldr	x16, [x16, #128]
   100007114:	d61f0200 	br	x16
   100007118:	b0000010 	adrp	x16, 100008000 <__PromotedConst.1+0xbe0>
   10000711c:	f9404610 	ldr	x16, [x16, #136]
   100007120:	d61f0200 	br	x16
   100007124:	b0000010 	adrp	x16, 100008000 <__PromotedConst.1+0xbe0>
   100007128:	f9404a10 	ldr	x16, [x16, #144]
   10000712c:	d61f0200 	br	x16
   100007130:	b0000010 	adrp	x16, 100008000 <__PromotedConst.1+0xbe0>
   100007134:	f9404e10 	ldr	x16, [x16, #152]
   100007138:	d61f0200 	br	x16
   10000713c:	b0000010 	adrp	x16, 100008000 <__PromotedConst.1+0xbe0>
   100007140:	f9405210 	ldr	x16, [x16, #160]
   100007144:	d61f0200 	br	x16
   100007148:	b0000010 	adrp	x16, 100008000 <__PromotedConst.1+0xbe0>
   10000714c:	f9405610 	ldr	x16, [x16, #168]
   100007150:	d61f0200 	br	x16
   100007154:	b0000010 	adrp	x16, 100008000 <__PromotedConst.1+0xbe0>
   100007158:	f9405a10 	ldr	x16, [x16, #176]
   10000715c:	d61f0200 	br	x16
   100007160:	b0000010 	adrp	x16, 100008000 <__PromotedConst.1+0xbe0>
   100007164:	f9405e10 	ldr	x16, [x16, #184]
   100007168:	d61f0200 	br	x16
   10000716c:	b0000010 	adrp	x16, 100008000 <__PromotedConst.1+0xbe0>
   100007170:	f9406210 	ldr	x16, [x16, #192]
   100007174:	d61f0200 	br	x16
   100007178:	b0000010 	adrp	x16, 100008000 <__PromotedConst.1+0xbe0>
   10000717c:	f9406610 	ldr	x16, [x16, #200]
   100007180:	d61f0200 	br	x16
   100007184:	b0000010 	adrp	x16, 100008000 <__PromotedConst.1+0xbe0>
   100007188:	f9406a10 	ldr	x16, [x16, #208]
   10000718c:	d61f0200 	br	x16
   100007190:	b0000010 	adrp	x16, 100008000 <__PromotedConst.1+0xbe0>
   100007194:	f9406e10 	ldr	x16, [x16, #216]
   100007198:	d61f0200 	br	x16
   10000719c:	b0000010 	adrp	x16, 100008000 <__PromotedConst.1+0xbe0>
   1000071a0:	f9407210 	ldr	x16, [x16, #224]
   1000071a4:	d61f0200 	br	x16
   1000071a8:	b0000010 	adrp	x16, 100008000 <__PromotedConst.1+0xbe0>
   1000071ac:	f9407610 	ldr	x16, [x16, #232]
   1000071b0:	d61f0200 	br	x16
   1000071b4:	b0000010 	adrp	x16, 100008000 <__PromotedConst.1+0xbe0>
   1000071b8:	f9407a10 	ldr	x16, [x16, #240]
   1000071bc:	d61f0200 	br	x16
   1000071c0:	b0000010 	adrp	x16, 100008000 <__PromotedConst.1+0xbe0>
   1000071c4:	f9407e10 	ldr	x16, [x16, #248]
   1000071c8:	d61f0200 	br	x16
   1000071cc:	b0000010 	adrp	x16, 100008000 <__PromotedConst.1+0xbe0>
   1000071d0:	f9408210 	ldr	x16, [x16, #256]
   1000071d4:	d61f0200 	br	x16
   1000071d8:	b0000010 	adrp	x16, 100008000 <__PromotedConst.1+0xbe0>
   1000071dc:	f9408610 	ldr	x16, [x16, #264]
   1000071e0:	d61f0200 	br	x16
   1000071e4:	b0000010 	adrp	x16, 100008000 <__PromotedConst.1+0xbe0>
   1000071e8:	f9408a10 	ldr	x16, [x16, #272]
   1000071ec:	d61f0200 	br	x16
   1000071f0:	b0000010 	adrp	x16, 100008000 <__PromotedConst.1+0xbe0>
   1000071f4:	f9408e10 	ldr	x16, [x16, #280]
   1000071f8:	d61f0200 	br	x16
   1000071fc:	b0000010 	adrp	x16, 100008000 <__PromotedConst.1+0xbe0>
   100007200:	f9409210 	ldr	x16, [x16, #288]
   100007204:	d61f0200 	br	x16
   100007208:	b0000010 	adrp	x16, 100008000 <__PromotedConst.1+0xbe0>
   10000720c:	f9409610 	ldr	x16, [x16, #296]
   100007210:	d61f0200 	br	x16
   100007214:	b0000010 	adrp	x16, 100008000 <__PromotedConst.1+0xbe0>
   100007218:	f9409a10 	ldr	x16, [x16, #304]
   10000721c:	d61f0200 	br	x16
   100007220:	b0000010 	adrp	x16, 100008000 <__PromotedConst.1+0xbe0>
   100007224:	f9409e10 	ldr	x16, [x16, #312]
   100007228:	d61f0200 	br	x16
   10000722c:	b0000010 	adrp	x16, 100008000 <__PromotedConst.1+0xbe0>
   100007230:	f940a210 	ldr	x16, [x16, #320]
   100007234:	d61f0200 	br	x16
   100007238:	b0000010 	adrp	x16, 100008000 <__PromotedConst.1+0xbe0>
   10000723c:	f940a610 	ldr	x16, [x16, #328]
   100007240:	d61f0200 	br	x16
   100007244:	b0000010 	adrp	x16, 100008000 <__PromotedConst.1+0xbe0>
   100007248:	f940aa10 	ldr	x16, [x16, #336]
   10000724c:	d61f0200 	br	x16
   100007250:	b0000010 	adrp	x16, 100008000 <__PromotedConst.1+0xbe0>
   100007254:	f940ae10 	ldr	x16, [x16, #344]
   100007258:	d61f0200 	br	x16
   10000725c:	b0000010 	adrp	x16, 100008000 <__PromotedConst.1+0xbe0>
   100007260:	f940b210 	ldr	x16, [x16, #352]
   100007264:	d61f0200 	br	x16
   100007268:	b0000010 	adrp	x16, 100008000 <__PromotedConst.1+0xbe0>
   10000726c:	f940b610 	ldr	x16, [x16, #360]
   100007270:	d61f0200 	br	x16
   100007274:	b0000010 	adrp	x16, 100008000 <__PromotedConst.1+0xbe0>
   100007278:	f940ba10 	ldr	x16, [x16, #368]
   10000727c:	d61f0200 	br	x16
   100007280:	b0000010 	adrp	x16, 100008000 <__PromotedConst.1+0xbe0>
   100007284:	f940be10 	ldr	x16, [x16, #376]
   100007288:	d61f0200 	br	x16
   10000728c:	b0000010 	adrp	x16, 100008000 <__PromotedConst.1+0xbe0>
   100007290:	f940c210 	ldr	x16, [x16, #384]
   100007294:	d61f0200 	br	x16
   100007298:	b0000010 	adrp	x16, 100008000 <__PromotedConst.1+0xbe0>
   10000729c:	f940c610 	ldr	x16, [x16, #392]
   1000072a0:	d61f0200 	br	x16
   1000072a4:	b0000010 	adrp	x16, 100008000 <__PromotedConst.1+0xbe0>
   1000072a8:	f940ca10 	ldr	x16, [x16, #400]
   1000072ac:	d61f0200 	br	x16

Disassembly of section __TEXT.__unwind_info:

0000000100007ed0 <__TEXT.__unwind_info>:
   100007ed0:	00000001 	udf	#1
   100007ed4:	0000001c 	udf	#28
   100007ed8:	00000006 	udf	#6
   100007edc:	00000034 	udf	#52
   100007ee0:	00000000 	udf	#0
   100007ee4:	00000034 	udf	#52
   100007ee8:	00000002 	udf	#2
   100007eec:	02000000 	.inst	0x02000000 ; undefined
   100007ef0:	04000001 	add	z1.b, p0/m, z1.b, z0.b
   100007ef4:	04000000 	add	z0.b, p0/m, z0.b, z0.b
   100007ef8:	04000003 	add	z3.b, p0/m, z3.b, z0.b
   100007efc:	04000007 	add	z7.b, p0/m, z7.b, z0.b
   100007f00:	0400001f 	add	z31.b, p0/m, z31.b, z0.b
   100007f04:	00002f90 	udf	#12176
   100007f08:	0000004c 	udf	#76
   100007f0c:	0000004c 	udf	#76
   100007f10:	00007065 	udf	#28773
   100007f14:	00000000 	udf	#0
   100007f18:	0000004c 	udf	#76
   100007f1c:	00000003 	udf	#3
   100007f20:	002e000c 	.inst	0x002e000c ; NYI
   100007f24:	000600c4 	.inst	0x000600c4 ; undefined
   100007f28:	00000000 	udf	#0
   100007f2c:	04000170 	add	z16.b, p0/m, z16.b, z11.b
   100007f30:	020002a4 	.inst	0x020002a4 ; undefined
   100007f34:	010002d8 	.inst	0x010002d8 ; undefined
   100007f38:	04000428 	add	z8.b, p1/m, z8.b, z1.b
   100007f3c:	01000528 	.inst	0x01000528 ; undefined
   100007f40:	02000580 	.inst	0x02000580 ; undefined
   100007f44:	040005e8 	add	z8.b, p1/m, z8.b, z15.b
   100007f48:	0200069c 	.inst	0x0200069c ; undefined
   100007f4c:	030006d4 	.inst	0x030006d4 ; undefined
   100007f50:	02000740 	.inst	0x02000740 ; undefined
   100007f54:	01000778 	.inst	0x01000778 ; undefined
   100007f58:	030007d4 	.inst	0x030007d4 ; undefined
   100007f5c:	01000890 	.inst	0x01000890 ; undefined
   100007f60:	020008ec 	.inst	0x020008ec ; undefined
   100007f64:	0100095c 	.inst	0x0100095c ; undefined
   100007f68:	02000a80 	.inst	0x02000a80 ; undefined
   100007f6c:	0b000b94 	add	w20, w28, w0, lsl #2
   100007f70:	02000bfc 	.inst	0x02000bfc ; undefined
   100007f74:	00000ca0 	udf	#3232
   100007f78:	0a000d4c 	and	w12, w10, w0, lsl #3
   100007f7c:	00000e7c 	udf	#3708
   100007f80:	020010ec 	.inst	0x020010ec ; undefined
   100007f84:	00001118 	udf	#4376
   100007f88:	050011b8 	orr	z24.s, z24.s, #0xc0000fff
   100007f8c:	0000149c 	udf	#5276
   100007f90:	090014a4 	.inst	0x090014a4 ; undefined
   100007f94:	00001808 	udf	#6152
   100007f98:	08001850 	stxrb	w0, w16, [x2]
   100007f9c:	010019ec 	.inst	0x010019ec ; undefined
   100007fa0:	07001db4 	.inst	0x07001db4 ; undefined
   100007fa4:	010024e8 	.inst	0x010024e8 ; undefined
   100007fa8:	040025a0 	saddv	d0, p1, z13.b
   100007fac:	05002a60 	orr	z0.s, z0.s, #0xf8007fff
   100007fb0:	03002ff8 	.inst	0x03002ff8 ; undefined
   100007fb4:	050030b0 	orr	z16.s, z16.s, #0xfc000000
   100007fb8:	0300342c 	.inst	0x0300342c ; undefined
   100007fbc:	0100359c 	.inst	0x0100359c ; undefined
   100007fc0:	000036c8 	udf	#14024
   100007fc4:	03003724 	.inst	0x03003724 ; undefined
   100007fc8:	000037bc 	udf	#14268
   100007fcc:	060037f8 	.inst	0x060037f8 ; undefined
   100007fd0:	0100394c 	.inst	0x0100394c ; undefined
   100007fd4:	030039cc 	.inst	0x030039cc ; undefined
   100007fd8:	00003a28 	udf	#14888
   100007fdc:	05003b78 	orr	z24.s, z24.s, #0xfe1fffff
   100007fe0:	04000013 	add	z19.b, p0/m, z19.b, z0.b
   100007fe4:	0400011f 	add	z31.b, p0/m, z31.b, z8.b
   100007fe8:	04000017 	add	z23.b, p0/m, z23.b, z0.b
   100007fec:	0400000f 	add	z15.b, p0/m, z15.b, z0.b
   100007ff0:	04000100 	add	z0.b, p0/m, z0.b, z8.b
   100007ff4:	04000101 	add	z1.b, p0/m, z1.b, z8.b
